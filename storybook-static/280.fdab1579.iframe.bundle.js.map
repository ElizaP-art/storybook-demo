{"version":3,"file":"280.fdab1579.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;ACPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;ACqBA;;;;;;;;;;AAoCA;;;;;;;ACxCA;AAyCA;;AAEA;;AAEA;;;AAGA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;;;;;;;;;;;;;;;;;;ACWA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUA;AAqCA;AACA;;AAEA;AAEA;;;;;;ACnCA;;;;;;;;;;;;;;ACiBA;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;AClCA;;;AAIA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AA2BA;AACA;AACA;AAEA;AAwBA;AAGA;;;;;;;ACvEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiBA;;;AAgCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAIA;AA2BA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;AAUA;;;;;AAKA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;AAaA;AACA;;;;;;;;;;;AAWA;;;;AAIA;AACA;;;;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEA;;;;;;ACCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmBA;;AAoDA;;;AAGA;AACA;AACA;;AAEA;;;;AAKA;;;AAuFA;AACA;AACA;;AAIA;;;AAGA;AACA;AACA;;AAGA;;;AAIA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;;;;;;ACUA;AAwDA;;;AAIA;;;;;ACtEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUA;;AAKA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;ACqHA;;;;;;;;;;;;;;;;;;;;;;ACjIA;AAsBA;AACA;AAEA;;;;;;;;;;;;;;;;;;;AChCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWA;;;AAyEA;;;AAGA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;AC/FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;;;AAqBA;;;;;AAKA;AACA;;AAEA;;;;AAIA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;;;;;;AAyCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;ACutBA;AAGA;;;AAGA;;;AAIA;AACA;AAZA;;;AAoBA;;AAEA;;AAKA;;;AAGA;;;;;;;;;;;;ACrvBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUA;;;;ACVA;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUA;;;;;;;;AA8CA;;AAEA;;;;;;;;;;;;;;AAeA;;;;;;;;;ACfA;;;;;;;AC1DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMA;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;;;;;;;;ACPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOA;AAYA;AAmBA;;AAGA;;;;;ACyDA;;;;;;;ACrFA;;;;;;;;;;ACbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiBA;;AA0CA;AACA;AACA;;AAEA;AACA;;;AAGA;AAEA;AAiBA;AAEA;;;;;;;;;;;;ACxFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcA;;;;AAMA;AAyDA;;;AAGA;AACA;;AAEA;;;AAIA;;;AAoFA;;AAIA;AChJA;AACA;;;;;;;;;;;;;AAwHA;;;;;;ACvEA;;;;;;;;;;;;ACjFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcA;;;AAcA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;AAIA;;;;ACzDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEA;;;;ACuGA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;;;AAGA;;;AAGA;;;;;AAMA;;;AAMA;;;;AAIA;;AAEA;AACA;AACA;;;AAIA;;;;;;ACjJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSA;AAYA;AACA;;;AAGA;;;AAGA;;;AAIA;;;;AChCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACuBA;;AAoGA;;AAEA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;;;;;AAQA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;;;;;;ACrJA;;;;AAqCA;AACA;AACA;;;;;;;AAOA;AACA;AACA;;;;;;;AAOA;AACA;;;AAGA;;;;AAIA;;;;;;AAMA;;AAEA;;AAGA;;;;;AC7FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;AAmBA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;;AA2IA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAqSA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5dA;;AAoFA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;AAUA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1IA;AAuFA;;;AAGA;;;;;AAMA;;;;;;;;;;;;;;;AClGA;;AAoEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;;AAEA;AACA;;;;;AAMA;ACvDA;;;AAGA;;;;;AAMA;;;;AA2BA;ACdA;;;AAGA;;;;;AAMA;;;;AAoCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrGA;;;;AAkCA;;AAEA;AACA;;AAEA;;AAGA;;;;;ACxDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYA;AAoCA;;;AAGA;;AAEA;;;;;AAKA;AACA;AACA;;;;;AAMA;;;;;;;;ACzEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaA;;;AAUA;AACA;AAEA;;;;;;;ACVA;;;;;;;ACTA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaA;;AAmCA;AACA;;;;;;AAMA;;;;;;;;AC9CA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;ACxEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYA;;;AAkEA;AACA;;AAEA;;AAEA;AACA;;AAQA;AAHA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnFA;AA2EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACpFA;;;;;;ACAA;;;;;;;;;;ACJA;;;;;AC0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;;AA2CA;;AAGA","sources":["webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/accordion-panel/accordion-panel.css-variables.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/generated/styles/typography.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/generated/styles/colors.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/generated/styles/selection-states.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/generated/styles/validation-states.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/common/style/common-styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/accordion-panel/accordion-panel.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/breadcrumbs/breadcrumbs.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/button/button.css-variables.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/button/button.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/button/button.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/carousel-page/carousel-page.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/chip/chip.css-variables.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/chip/chip.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/chip/chip.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/datepicker/datepicker.style.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/datepicker/datepicker.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/common/label/label.style.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/common/label/label.controller.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/tooltip/tooltip.css-variables.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/tooltip/tooltip.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/input/input.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/input/input.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/instrument-status/instrument-status.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/list-option/list-options.css-variables.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/list-option/list-option.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/notification-bubble/notification-bubble.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/notification-bubble/notification-bubble.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/overlay/overlay.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/progress-bar/progress-bar.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/sidepanel/sidepanel.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/sidepanel/sidepanel.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/modal/modal-utils.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/modal-dialog/modal-dialog.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/modal/modal.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/slydini/models/drawable-items/line-item.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/slydini/slydini.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/spinner/spinner.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/spinner/spinner.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/step/step.css-variables.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/step/step.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/step/step.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/tab-panel/tab-panel.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/tab/tab.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/tab/tab.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/toggle/toggle.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/widget-container/widget-container.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/widget-container/widget-container.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/accordion/accordion.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/button-group/button-group.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/carousel/carousel.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/carousel/carousel.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/checkbox/checkbox.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/checkbox/checkbox.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/checklist/checklist.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/choice-chips/choice-chips.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/date-range-picker/date-range-picker.style.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/date-range-picker/date-range-picker.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/date-time-picker/date-time-picker.style.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/date-time-picker/toggle-controls.plugin.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/date-time-picker/date-time-picker.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/common/clear-button/clear-button.style.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/common/clear-button/clear-button.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/input-date/input-date.style.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/input-date/input-date.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/input-date-range/input-date-range.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/select/select-dropdown.style.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/select/select-dropdown.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/select/select.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/input-date-time/input-date-time.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/input-number/input-number.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/input-increment/input-increment.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/input-password/input-password.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/input-text/input-text.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/message-box/message-box.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/meta-menu/meta-menu.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/meta-menu/meta-menu.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/navigation-bar/navigation-bar.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/navigation-bar/navigation-bar.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/stepper/stepper.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/tab-set/tab-set.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/tab-set/tab-set.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/toast/toast.css-variables.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/toast/toast.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/toast/toast.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/toast-container/toast-container.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/toggle-chips/toggle-chips.styles.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/toggle-chips/toggle-chips.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/molecules/widget-layout/widget-layout.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/icon/icon.service.js","webpack://storybook-demo/./node_modules/@agilent/awf-wc/src/atoms/icon/icon.js"],"sourcesContent":["/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const ACCORDION_PANEL_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-accordion-panel-item-separator-border-inner: var(--accordion-item-separator-border, 1px solid var(--at-gray));\r\n        --awf-accordion-panel-header-font-size-inner: var(--awf-accordion-panel-header-font-size, 18px);\r\n        --awf-accordion-panel-header-font-weight-inner: var(--awf-accordion-panel-header-font-weight, 600);\r\n        --awf-accordion-panel-header-height-inner: var(--awf-accordion-panel-header-height, 40px);\r\n    }\r\n`;\r\n//# sourceMappingURL=accordion-panel.css-variables.styles.js.map","import { css } from 'lit';\r\nexport default css `\n/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nhtml {\r\n    font-size: 16px;\r\n    color: var(--at-dark-navy);\r\n}\r\n\r\nh1 {\r\n    font-family: 'Noto Sans Display', sans-serif;\r\n    font-size: 1.5rem;\r\n    font-weight: 400;\r\n    margin: 0;\r\n}\r\n\r\nh2 {\r\n    font-family: 'Noto Sans Display', sans-serif;\r\n    font-size: 1.375rem;\r\n    font-weight: 400;\r\n    margin: 0;\r\n}\r\n\r\nh3 {\r\n    font-family: 'Noto Sans Display', sans-serif;\r\n    font-size: 1.125rem;\r\n    font-weight: 400;\r\n    margin: 0;\r\n}\r\n\r\nh4 {\r\n    font-family: 'Noto Sans Display', sans-serif;\r\n    font-size: 1rem;\r\n    font-weight: 400;\r\n    margin: 0;\r\n}\r\n\r\nh5 {\r\n    font-family: 'Noto Sans Display', sans-serif;\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    margin: 0;\r\n}\r\n\r\nbody,\r\n:host {\r\n    font-family: 'Noto Sans Display', sans-serif;\r\n    font-size: 0.875rem;\r\n    font-weight: 400;\r\n}\r\n\r\n.awf-medium {\r\n    font-weight: 500;\r\n}\r\n\r\n.awf-semibold {\r\n    font-weight: 600;\r\n}\r\n\r\n.awf-bold {\r\n    font-weight: 700;\r\n}\r\n\r\n.awf-italic {\r\n    font-style: italic;\r\n}\r\n\r\n.awf-underlined {\r\n    text-decoration: underline;\r\n}\r\n\r\n.awf-body-small {\r\n    font-size: 0.75rem\r\n}\r\n\r\n.awf-body-extra-small {\r\n    font-size: 0.625rem;\r\n    font-weight: 700;\r\n}\r\n\n`;\r\n//# sourceMappingURL=typography.styles.js.map","import { css } from 'lit';\r\nexport default css `\n/*!\r\n* © Agilent Technologies, Inc. 2022-2023.\r\n*\r\n* Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n* is prohibited and will be prosecuted to the maximum extent under the law.\r\n*\r\n*/\r\n\r\n/*\r\n * This code has been automatically generated from colors defined by https://brand.agilent.com/api/color/library/61,\r\n * using the command: node ./scripts/generate-agilent-colors.js\r\n */\r\n:root,\r\n:host {\r\n    --at-black: #000000;\r\n    --at-blue-dark-tint: #1171ad;\r\n    --at-blue-dark: #225d85;\r\n    --at-blue-fog: #e8eef1;\r\n    --at-blue-luminous: #e2eef5;\r\n    --at-blue-medium: #99ceee;\r\n    --at-blue-midtone: #88c4e8;\r\n    --at-blue-pale-luminous: #f1f7fa;\r\n    --at-blue-pale: #e5f3fb;\r\n    --at-blue-shade: #037cc2;\r\n    --at-blue-soft: #cce7f7;\r\n    --at-blue: #0085d5;\r\n    --at-cobalt-dark: #382f76;\r\n    --at-cobalt-light: #bfb8e8;\r\n    --at-cobalt: #5f4ac9;\r\n    --at-dark-gray: #6c747d;\r\n    --at-dark-midnight: #252a30;\r\n    --at-dark-navy: #384350;\r\n    --at-dark-pale: #d4dded;\r\n    --at-dark-shadow: #2e446b;\r\n    --at-dark: #4d72b3;\r\n    --at-gray-3q-dark: #848e99;\r\n    --at-gray-dark: #6c747d;\r\n    --at-gray-extra-pale: #f5f5f5;\r\n    --at-gray-light: #e1e3e5;\r\n    --at-gray-medium-shadow: #252a30;\r\n    --at-gray-medium: #a1a7af;\r\n    --at-gray-pale: #eaebed;\r\n    --at-gray-soft: #e1e3e5;\r\n    --at-gray: #c1c6c8;\r\n    --at-green-dark: #4a8030;\r\n    --at-green-extra-light: #e3f2d6;\r\n    --at-green-light: #c8e7ae;\r\n    --at-green-pale: #dff2cf;\r\n    --at-green-shadow: #487821;\r\n    --at-green: #75c335;\r\n    --at-light-blue-pale: #c2e8ff;\r\n    --at-light-blue-shadow: #005e99;\r\n    --at-light-blue: #009dff;\r\n    --at-magenta-pale: #f2d0e5;\r\n    --at-magenta-shadow: #772256;\r\n    --at-magenta: #c63990;\r\n    --at-navy-extra-light: #fafafa;\r\n    --at-navy-soft: #c1cad2;\r\n    --at-navy-tint: #4c5662;\r\n    --at-olive-shadow: #666614;\r\n    --at-olive: #9eaf20;\r\n    --at-orange-dark: #a15819;\r\n    --at-orange-light: #ffce99;\r\n    --at-orange-pale: #ffe2c2;\r\n    --at-orange-shadow: #994f00;\r\n    --at-orange: #ff8400;\r\n    --at-periwinkle-dark: #36507e;\r\n    --at-periwinkle-extra-light: #d9e5fa;\r\n    --at-periwinkle-light: #b5ccf7;\r\n    --at-periwinkle: #4780ea;\r\n    --at-purple-dark: #533e71;\r\n    --at-purple-light: #d3bdf5;\r\n    --at-purple-pale: #e1cef4;\r\n    --at-purple-shadow: #4e1d7c;\r\n    --at-purple: #925be5;\r\n    --at-red-dark-tint: #bf1f02;\r\n    --at-red-dark: #961802;\r\n    --at-red-extra-light: #fedcd6;\r\n    --at-red-light: #febaaf;\r\n    --at-red-pale: #fecbc3;\r\n    --at-red-shadow: #971602;\r\n    --at-red: #e72503;\r\n    --at-teal-dark: #148082;\r\n    --at-teal-light: #ace4e5;\r\n    --at-teal-pale: #cef2f3;\r\n    --at-teal-shadow: #1f797a;\r\n    --at-teal: #2ec0c2;\r\n    --at-violet-pale: #f5ccff;\r\n    --at-violet-shadow: #832999;\r\n    --at-violet: #cc43ff;\r\n    --at-white: #ffffff;\r\n    --at-yellow-dark: #a57b1b;\r\n    --at-yellow-extra-light: #fff0cb;\r\n    --at-yellow-light: #ffe399;\r\n    --at-yellow-pale: #ffefc2;\r\n    --at-yellow-shadow: #997000;\r\n    --at-yellow: #ffba00;\r\n    --blank: #cdd3ea;\r\n    --calibration-standard: #478ecc;\r\n    --dark-navy: #384350;\r\n    --double-blank: #f57e2b;\r\n    --olive-pale: #eef2b6;\r\n    --qc-check: #79287d;\r\n    --sample: #83c441;\r\n    --spike: #b83685;\r\n    --system-suitability: #a57c2c;\r\n}\r\n\n`;\r\n//# sourceMappingURL=colors.styles.js.map","import { css } from 'lit';\r\nexport default css `\n:root,\r\n:host {\r\n    /* Selection states */\r\n    --awf-state-rest-background: var(--at-white);\r\n    --awf-state-rest-background-transparency: transparent;\r\n    --awf-state-rest-border: var(--at-gray);\r\n    --awf-state-rest-foreground: var(--at-dark-navy);\r\n\r\n    --awf-state-hover-background: var(--at-blue-soft);\r\n    --awf-state-hover-border: var(--at-blue-medium);\r\n    --awf-state-hover-color: var(--at-blue-shade);\r\n\r\n    --awf-state-selected-background: var(--at-blue-medium);\r\n    --awf-state-selected-border: var(--at-blue-shade);\r\n    --awf-state-selected-foreground: var(--at-dark-navy);\r\n\r\n    --awf-state-disabled-background: var(--at-white);\r\n    --awf-state-disabled-border: var(--at-gray);\r\n    --awf-state-disabled-foreground: var(--at-gray);\r\n\r\n    --awf-state-focused-border: var(--at-blue-shade);\r\n    --awf-state-focused-foreground: var(--at-blue-shade);\r\n}\n`;\r\n//# sourceMappingURL=selection-states.styles.js.map","import { css } from 'lit';\r\nexport default css `\n:root,\r\n:host {\r\n    /* Validation Colors */\r\n    --awf-validation-error-background-color: var(--at-red-extra-light);\r\n    --awf-validation-error-focus-background-color: var(--at-red-light);\r\n    --awf-validation-error-border-color: var(--at-red);\r\n    --awf-validation-error-font-color: var(--at-dark-navy);\r\n    --awf-validation-error-message-font-color: var(--at-red);\r\n    --awf-validation-label-error-font-color: var(--at-red);\r\n\r\n    --awf-validation-warning-background-color: var(--at-yellow-extra-light);\r\n    --awf-validation-warning-focus-background-color: var(--at-yellow-light);\r\n    --awf-validation-warning-border-color: var(--at-yellow);\r\n    --awf-validation-warning-font-color: var(--at-yellow);\r\n}\r\n\n`;\r\n//# sourceMappingURL=validation-states.styles.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nimport TYPOGRAPHY_STYLES from '../../generated/styles/typography.styles';\r\nimport COLORS_STYLES from '../../generated/styles/colors.styles';\r\nimport SELECTION_STATES from '../../generated/styles/selection-states.styles';\r\nimport VALIDATION_STYLES from '../../generated/styles/validation-states.styles';\r\n/*\r\n * Start: Fix for Safari\r\n * According to specifications, ::slotted pseudo-element and :host pseudo-class do not allow combinators / query-selectors.\r\n * Though Chromium engine seems to support it, Safari does not (while compiant with the specs).\r\n *\r\n * Thus ::slotted(input)::placeholder or :host input::placeholder will not select any element in Safari browser and then\r\n * apply no CSS.\r\n *\r\n * Also see: https://github.com/WICG/webcomponents/issues/889\r\n */\r\nexport const PLACEHOLDER_STYLE = `\r\n    input.slotted-input::placeholder {\r\n        color: var(--awf-input-placeholder-color-inner);\r\n        font-size: var(--awf-input-font-size-inner);\r\n        font-style: italic;\r\n        padding-left: 1px;\r\n        text-align: left;\r\n        text-shadow: none;\r\n    }\r\n\r\n    *:not([labelPosition='left']) > input.slotted-input-hidden::placeholder {\r\n        visibility: hidden;\r\n    }\r\n\r\n    *:not([labelPosition='left']):not(:focus-within) > input.slotted-input.slotted-label::placeholder {\r\n        visibility: hidden;\r\n    }\r\n`;\r\nexport const NUMBER_SPINNER_STYLE = `\r\n    input[type='number']::-webkit-inner-spin-button,\r\n    input[type='number']::-webkit-outer-spin-button {\r\n        -webkit-appearance: none;\r\n        margin-left: 2px;\r\n    }\r\n`;\r\nconst ELEVATION_STYLES = css `\r\n    :host {\r\n        --awf-elevation-z1: 1;\r\n        --awf-elevation-z2: 10;\r\n        --awf-elevation-z3: 100;\r\n        --awf-elevation-z4: 1000;\r\n        --awf-elevation-z5: 10000;\r\n        --awf-elevation-z6: 100000;\r\n        --awf-elevation-z7: 1000000;\r\n    }\r\n`;\r\nexport const COMMON_STYLES = [\r\n    COLORS_STYLES,\r\n    ELEVATION_STYLES,\r\n    SELECTION_STATES,\r\n    VALIDATION_STYLES,\r\n    TYPOGRAPHY_STYLES,\r\n    css `\r\n        :host {\r\n            --disabled-opacity: 0.4;\r\n            --transition-duration: 0.15s;\r\n            --transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\r\n            --awf-line-height-inner: var(--awf-line-height, 20px);\r\n        }\r\n    `\r\n];\r\n//# sourceMappingURL=common-styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agDropDownMoreDetailsColumnDescending, agLessDetailsColumnAscending } from '@agilent/web-icons/core';\r\nimport { LitElement, html } from 'lit';\r\nimport { property, query, queryAssignedElements, state } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { dispatchCustomEvent } from '../../common/utils/util';\r\nimport '../icon/icon.js';\r\nimport { ACCORDION_PANEL_STYLES } from './accordion-panel.styles';\r\nimport { ACCORDION_PANEL_CSS_VARIABLES } from './accordion-panel.css-variables.styles';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nlet AwfAccordionPanel = class AwfAccordionPanel extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * When true, the accordion is disabled.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * When true, the accordion is expanded and its content is visible.\r\n         */\r\n        this.expanded = false;\r\n        /**\r\n         * Defined the label of the accordion (aka the title) if added.\r\n         */\r\n        this.label = null;\r\n        this.hasNoContent = true;\r\n        this.dispatchCustomEvent = dispatchCustomEvent.bind(this);\r\n    }\r\n    /**\r\n     * Toggles the expanded state of this accordion panel.\r\n     */\r\n    toggle() {\r\n        this.changeState(!this.expanded);\r\n    }\r\n    /**\r\n     * Expands this accordion panel, so that its content is displayed.\r\n     */\r\n    expand() {\r\n        this.changeState(true);\r\n    }\r\n    /**\r\n     * Collapses this accordion panel, so that its content is no longer visible.\r\n     */\r\n    collapse() {\r\n        this.changeState(false);\r\n    }\r\n    render() {\r\n        const expanded = this.expanded && !this.disabled;\r\n        const icon = expanded ? agLessDetailsColumnAscending : agDropDownMoreDetailsColumnDescending;\r\n        const iconId = expanded ? 'collapse' : 'expand';\r\n        return html `\r\n            <button class=\"header\" @click=${this.onButtonClick} ?disabled=${this.disabled || this.hasNoContent}>\r\n                <slot name=\"prefix\"></slot>\r\n                ${this.renderLabel()}\r\n                <slot name=\"header\"></slot>\r\n                <awf-icon id=${iconId} raw=${icon}></awf-icon>\r\n            </button>\r\n\r\n            <div ?hidden=\"${!this.expanded}\" class=\"body\">\r\n                <slot name=\"body\" @slotchange=${this.onBodySlotChange}></slot>\r\n            </div>\r\n        `;\r\n    }\r\n    updated(_changedProperties) {\r\n        this.hasNoContent = this.slottedBody.length === 0;\r\n    }\r\n    changeState(expanded) {\r\n        if (this.disabled || this.hasNoContent) {\r\n            return;\r\n        }\r\n        this.expanded = expanded;\r\n        const eventType = this.expanded ? AwfEvent.OPEN : AwfEvent.CLOSE;\r\n        this.dispatchCustomEvent(eventType);\r\n    }\r\n    onButtonClick(event) {\r\n        if (!this.isExpansionClick(event)) {\r\n            return;\r\n        }\r\n        this.changeState(!this.expanded);\r\n    }\r\n    isExpansionClick({ target }) {\r\n        return target === this.header || Array.from(this.header.children).includes(target);\r\n    }\r\n    renderLabel() {\r\n        if (this.label) {\r\n            return html `<span class=\"label\">${this.label}</span>`;\r\n        }\r\n        return html ``;\r\n    }\r\n    onBodySlotChange() {\r\n        this.hasNoContent = this.slottedBody.length === 0;\r\n    }\r\n};\r\nAwfAccordionPanel.styles = [COMMON_STYLES, ACCORDION_PANEL_CSS_VARIABLES, ACCORDION_PANEL_STYLES];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfAccordionPanel.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfAccordionPanel.prototype, \"expanded\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfAccordionPanel.prototype, \"label\", void 0);\r\n__decorate([\r\n    query('.header')\r\n], AwfAccordionPanel.prototype, \"header\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: 'body', flatten: true })\r\n], AwfAccordionPanel.prototype, \"slottedBody\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfAccordionPanel.prototype, \"hasNoContent\", void 0);\r\nAwfAccordionPanel = __decorate([\r\n    customElement('awf-accordion-panel', true)\r\n], AwfAccordionPanel);\r\nexport { AwfAccordionPanel };\r\n//# sourceMappingURL=accordion-panel.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { html, LitElement } from 'lit';\r\nimport { customElement } from '../../common/decorators/awf-custom-element.js';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles.js';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller.js';\r\nimport { BREADCRUMBS_STYLES } from './breadcrumbs.styles.js';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/breadcrumbs)\r\n */\r\nlet AwfBreadcrumbs = class AwfBreadcrumbs extends LitElement {\r\n    constructor() {\r\n        super();\r\n        new ElementStyleController(this, [`\r\n            a awf-icon {\r\n                width: 16px;\r\n                height: 16px;\r\n                padding-right: 4px;\r\n            }\r\n            a:not(:last-of-type)::after {\r\n                content: '';\r\n                display: block;\r\n                position: relative;\r\n                width: 16px;\r\n                height: 16px;\r\n                padding: 0 4px;\r\n                background-image: url(\"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='none' stroke='%23384350' stroke-miterlimit='10' d='M10 6l6 6-6 6' style='stroke: %23384350;'/%3E%3C/svg%3E%0A\");\r\n                background-repeat: no-repeat, repeat;\r\n                background-position: center;\r\n                background-size: 16px 16px;\r\n                pointer-events: none;\r\n            }\r\n        `]);\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.addEventListener('click', this.stopEventPropagation);\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.removeEventListener('click', this.stopEventPropagation);\r\n    }\r\n    render() {\r\n        return html `<slot></slot>`;\r\n    }\r\n    stopEventPropagation(event) {\r\n        const { target } = event;\r\n        if (target instanceof HTMLAnchorElement) {\r\n            return;\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n};\r\nAwfBreadcrumbs.styles = [COMMON_STYLES, BREADCRUMBS_STYLES];\r\nAwfBreadcrumbs = __decorate([\r\n    customElement('awf-breadcrumbs', true)\r\n], AwfBreadcrumbs);\r\nexport { AwfBreadcrumbs };\r\n//# sourceMappingURL=breadcrumbs.js.map","/*\r\n * © Agilent Technologies, Inc. 2023-2024.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nconst BUTTON_PRIMARY_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-button-primary-rest-background-inner: var(--awf-button-primary-rest-background, var(--at-blue-pale));\r\n        --awf-button-primary-rest-border-inner: var(--awf-button-primary-rest-border, solid 1px var(--at-blue-shade));\r\n        --awf-button-primary-rest-font-color-inner: var(--awf-button-primary-rest-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-primary-hover-background-inner: var(--awf-button-primary-hover-background, var(--at-blue-soft));\r\n        --awf-button-primary-hover-border-inner: var(--awf-button-primary-hover-border, solid 1px var(--at-blue-shade));\r\n        --awf-button-primary-hover-font-color-inner: var(--awf-button-primary-hover-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-primary-active-background-inner: var(--awf-button-primary-active-background, var(--at-blue-shade));\r\n        --awf-button-primary-active-border-inner: var(--awf-button-primary-active-border, solid 1px var(--at-dark-navy));\r\n        --awf-button-primary-active-font-color-inner: var(--awf-button-primary-active-font-color, var(--at-white));\r\n\r\n        --awf-button-primary-disabled-background-inner: var(--awf-button-primary-disabled-background, var(--at-white));\r\n        --awf-button-primary-disabled-border-inner: var(--awf-button-primary-disabled-border, solid 1px var(--at-gray-soft));\r\n        --awf-button-primary-disabled-font-color-inner: var(--awf-button-primary-disabled-font-color, var(--at-gray));\r\n    }\r\n`;\r\nconst BUTTON_SECONDARY_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-button-secondary-rest-background-inner: var(--awf-button-secondary-rest-background, var(--at-navy-extra-light));\r\n        --awf-button-secondary-rest-border-inner: var(--awf-button-secondary-rest-border, solid 1px var(--at-gray-soft));\r\n        --awf-button-secondary-rest-font-color-inner: var(--awf-button-secondary-rest-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-secondary-hover-background-inner: var(--awf-button-secondary-hover-background, var(--at-gray-extra-pale));\r\n        --awf-button-secondary-hover-border-inner: var(--awf-button-secondary-hover-border, solid 1px var(--at-gray-soft));\r\n        --awf-button-secondary-hover-font-color-inner: var(--awf-button-secondary-hover-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-secondary-active-background-inner: var(--awf-button-secondary-active-background, var(--at-gray-soft));\r\n        --awf-button-secondary-active-border-inner: var(--awf-button-secondary-active-border, solid 1px var(--at-gray-soft));\r\n        --awf-button-secondary-active-font-color-inner: var(--awf-button-secondary-active-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-secondary-disabled-background-inner: var(--awf-button-secondary-disabled-background, var(--at-white));\r\n        --awf-button-secondary-disabled-border-inner: var(--awf-button-secondary-disabled-border, solid 1px var(--at-gray-soft));\r\n        --awf-button-secondary-disabled-font-color-inner: var(--awf-button-secondary-disabled-font-color, var(--at-gray));\r\n    }\r\n`;\r\nconst BUTTON_SPECIAL_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-button-special-rest-background-inner: var(--awf-button-special-rest-background, var(--at-green-pale));\r\n        --awf-button-special-rest-border-inner: var(--awf-button-special-rest-border, solid 1px var(--at-green));\r\n        --awf-button-special-rest-font-color-inner: var(--awf-button-special-rest-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-special-hover-background-inner: var(--awf-button-special-hover-background, var(--at-green-light));\r\n        --awf-button-special-hover-border-inner: var(--awf-button-special-hover-border, solid 1px var(--at-green));\r\n        --awf-button-special-hover-font-color-inner: var(--awf-button-special-hover-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-special-active-background-inner: var(--awf-button-special-active-background, var(--at-green));\r\n        --awf-button-special-active-border-inner: var(--awf-button-special-active-border, solid 1px var(--at-green));\r\n        --awf-button-special-active-font-color-inner: var(--awf-button-special-active-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-special-disabled-background-inner: var(--awf-button-special-disabled-background, var(--at-white));\r\n        --awf-button-special-disabled-border-inner: var(--awf-button-special-disabled-border, solid 1px var(--at-gray-soft));\r\n        --awf-button-special-disabled-font-color-inner: var(--awf-button-special-disabled-font-color, var(--at-gray));\r\n    }\r\n`;\r\nconst BUTTON_DELETE_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-button-critical-rest-background-inner: var(--awf-button-critical-rest-background, var(--at-red));\r\n        --awf-button-critical-rest-border-inner: var(--awf-button-critical-rest-border, solid 1px var(--at-red));\r\n        --awf-button-critical-rest-font-color-inner: var(--awf-button-critical-rest-font-color, var(--at-white));\r\n\r\n        --awf-button-critical-hover-background-inner: var(--awf-button-critical-hover-background, var(--at-red-dark-tint));\r\n        --awf-button-critical-hover-border-inner: var(--awf-button-critical-hover-border, solid 1px var(--at-red-dark-tint));\r\n        --awf-button-critical-hover-font-color-inner: var(--awf-button-critical-hover-font-color, var(--at-white));\r\n\r\n        --awf-button-critical-active-background-inner: var(--awf-button-critical-active-background, var(--at-red-dark));\r\n        --awf-button-critical-active-border-inner: var(--awf-button-critical-active-border, solid 1px var(--at-red-dark));\r\n        --awf-button-critical-active-font-color-inner: var(--awf-button-critical-active-font-color, var(--at-white));\r\n\r\n        --awf-button-critical-disabled-background-inner: var(--awf-button-critical-disabled-background, var(--at-white));\r\n        --awf-button-critical-disabled-border-inner: var(--awf-button-critical-disabled-border, solid 1px var(--at-gray-soft));\r\n        --awf-button-critical-disabled-font-color-inner: var(--awf-button-critical-disabled-font-color, var(--at-gray));\r\n    }\r\n`;\r\nconst BUTTON_DARK_PRIMARY_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-button-dark-primary-rest-background-inner: var(--awf-button-dark-primary-rest-background, var(--at-dark-navy));\r\n        --awf-button-dark-primary-rest-border-inner: var(--awf-button-dark-primary-rest-border, solid 1px var(--at-dark-navy));\r\n        --awf-button-dark-primary-rest-font-color-inner: var(--awf-button-dark-primary-rest-font-color, var(--at-white));\r\n\r\n        --awf-button-dark-primary-hover-background-inner: var(--awf-button-dark-primary-hover-background, var(--at-blue-dark));\r\n        --awf-button-dark-primary-hover-border-inner: var(--awf-button-dark-primary-hover-border, solid 1px var(--at-dark-navy));\r\n        --awf-button-dark-primary-hover-font-color-inner: var(--awf-button-dark-primary-hover-font-color, var(--at-white));\r\n\r\n        --awf-button-dark-primary-active-background-inner: var(--awf-button-dark-primary-active-background, var(--at-blue-shade));\r\n        --awf-button-dark-primary-active-border-inner: var(--awf-button-dark-primary-active-border, solid 1px var(--at-dark-navy));\r\n        --awf-button-dark-primary-active-font-color-inner: var(--awf-button-dark-primary-active-font-color, var(--at-white));\r\n\r\n        --awf-button-dark-primary-disabled-background-inner: var(--awf-button-dark-primary-disabled-background, var(--at-blue-pale-luminous));\r\n        --awf-button-dark-primary-disabled-border-inner: var(--awf-button-dark-primary-disabled-border, solid 1px var(--at-blue-pale-luminous));\r\n        --awf-button-dark-primary-disabled-font-color-inner: var(--awf-button-dark-primary-disabled-font-color, var(--at-gray));\r\n    }\r\n`;\r\nconst BUTTON_DARK_SECONDARY_CSS_VARIABLES = css `\r\n    :host{\r\n        --awf-button-dark-secondary-rest-background-inner: var(--awf-button-dark-secondary-rest-background, var(--at-blue-pale));\r\n        --awf-button-dark-secondary-rest-border-inner: var(--awf-button-dark-secondary-rest-border, solid 1px var(--at-blue-shade));\r\n        --awf-button-dark-secondary-rest-font-color-inner: var(--awf-button-dark-secondary-rest-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-dark-secondary-hover-background-inner: var(--awf-button-dark-secondary-hover-background, var(--at-blue-soft));\r\n        --awf-button-dark-secondary-hover-border-inner: var(--awf-button-dark-secondary-hover-border, solid 1px var(--at-blue-shade));\r\n        --awf-button-dark-secondary-hover-font-color-inner: var(--awf-button-dark-secondary-hover-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-dark-secondary-active-background-inner: var(--awf-button-dark-secondary-active-background, var(--at-blue-shade));\r\n        --awf-button-dark-secondary-active-border-inner: var(--awf-button-dark-secondary-active-border, solid 1px var(--at-dark-navy));\r\n        --awf-button-dark-secondary-active-font-color-inner: var(--awf-button-dark-secondary-active-font-color, var(--at-white));\r\n\r\n        --awf-button-dark-secondary-disabled-background-inner: var(--awf-button-dark-secondary-disabled-background, var(--at-blue-pale-luminous));\r\n        --awf-button-dark-secondary-disabled-border-inner: var(--awf-button-dark-secondary-disabled-border, solid 1px var(--at-blue-pale-luminous));\r\n        --awf-button-dark-secondary-disabled-font-color-inner: var(--awf-button-dark-secondary-disabled-font-color, var(--at-gray));\r\n    }\r\n`;\r\nconst BUTTON_DARK_SPECIAL_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-button-dark-special-rest-background-inner: var(--awf-button-dark-special-rest-background, var(--at-green-pale));\r\n        --awf-button-dark-special-rest-border-inner: var(--awf-button-dark-special-rest-border, solid 1px var(--at-green));\r\n        --awf-button-dark-special-rest-font-color-inner: var(--awf-button-dark-special-rest-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-dark-special-hover-background-inner: var(--awf-button-dark-special-hover-background, var(--at-green-light));\r\n        --awf-button-dark-special-hover-border-inner: var(--awf-button-dark-special-hover-border, solid 1px var(--at-green));\r\n        --awf-button-dark-special-hover-font-color-inner: var(--awf-button-dark-special-hover-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-dark-special-active-background-inner: var(--awf-button-dark-special-active-background, var(--at-green));\r\n        --awf-button-dark-special-active-border-inner: var(--awf-button-dark-special-active-border, solid 1px var(--at-green));\r\n        --awf-button-dark-special-active-font-color-inner: var(--awf-button-dark-special-active-font-color, var(--at-dark-navy));\r\n\r\n        --awf-button-dark-special-disabled-background-inner: var(--awf-button-dark-special-disabled-background, var(--at-white));\r\n        --awf-button-dark-special-disabled-border-inner: var(--awf-button-dark-special-disabled-border, solid 1px var(--at-gray-soft));\r\n        --awf-button-dark-special-disabled-font-color-inner: var(--awf-button-dark-special-disabled-font-color, var(--at-gray));\r\n    }\r\n`;\r\nexport const BUTTON_CSS_VARIABLES = [\r\n    BUTTON_PRIMARY_CSS_VARIABLES,\r\n    BUTTON_SECONDARY_CSS_VARIABLES,\r\n    BUTTON_SPECIAL_CSS_VARIABLES,\r\n    BUTTON_DELETE_CSS_VARIABLES,\r\n    BUTTON_DARK_PRIMARY_CSS_VARIABLES,\r\n    BUTTON_DARK_SECONDARY_CSS_VARIABLES,\r\n    BUTTON_DARK_SPECIAL_CSS_VARIABLES,\r\n    css `\r\n        :host {\r\n            --awf-button-content-alignment-inner: var(--awf-button-content-alignment, center);\r\n            --awf-button-font-size-inner: var(--awf-button-font-size, 0.875rem);\r\n            --awf-button-height-inner: var(--awf-button-height, 32px);\r\n            --awf-button-icon-margin-inner: var(--awf-button-icon-margin, 4px);\r\n            --awf-button-icon-size-inner: var(--awf-button-icon-size, 24px);\r\n            --awf-button-label-display-inner: var(--awf-button-label-display, inline);\r\n            --awf-button-label-margin-inner: var(--awf-button-label-margin, 0);\r\n            --awf-button-padding-left-inner: var(--awf-button-padding-left, 12px);\r\n            --awf-button-padding-right-inner: var(--awf-button-padding-right, 12px);\r\n            --awf-button-width-inner: var(--awf-button-width, unset);\r\n\r\n            /* Rest */\r\n            --awf-button-border-inner: var(--awf-button-border, var(--awf-button-primary-rest-border-inner));\r\n            --awf-button-background-inner: var(--awf-button-background, var(--awf-button-primary-rest-background-inner));\r\n            --awf-button-font-color-inner: var(--awf-button-font-color, var(--awf-button-primary-rest-font-color-inner));\r\n\r\n            /* Hover */\r\n            --awf-button-hover-background-inner: var(--awf-button-hover-background, var(--awf-button-primary-hover-background-inner));\r\n            --awf-button-hover-border-inner: var(--awf-button-hover-border, var(--awf-button-primary-hover-border-inner));\r\n            --awf-button-hover-font-color-inner: var(--awf-button-hover-font-color, var(--awf-button-primary-hover-font-color-inner));\r\n            \r\n            /* Active */\r\n            --awf-button-active-background-inner: var(--awf-button-active-background, var(--awf-button-primary-active-background-inner));\r\n            --awf-button-active-border-inner: var(--awf-button-active-border, var(--awf-button-primary-active-border-inner));\r\n            --awf-button-active-font-color-inner: var(--awf-button-active-font-color, var(--awf-button-primary-active-font-color-inner));\r\n\r\n            /* Disabled */\r\n            --awf-button-disabled-background-inner: var(--awf-button-disabled-background, var(--awf-button-primary-disabled-background-inner));\r\n            --awf-button-disabled-border-inner: var(--awf-button-disabled-border, var(--awf-button-primary-disabled-border-inner));\r\n            --awf-button-disabled-font-color-inner: var(--awf-button-disabled-font-color, var(--awf-button-primary-disabled-font-color-inner));\r\n\r\n            /* Icon buttons */\r\n            --awf-button-icon-only-background-inner: var(--awf-button-icon-only-background, var(--awf-state-rest-background-transparency));\r\n            --awf-button-icon-only-hover-background-inner: var(--awf-button-icon-only-hover-background, var(--awf-state-hover-background));\r\n            --awf-button-icon-only-active-background-inner: var(--awf-button-icon-only-active-background, var(--awf-state-selected-background));\r\n            --awf-button-icon-only-active-foreground-inner: var(--awf-button-icon-only-active-foreground, var(--at-dark-navy));\r\n        }\r\n    `\r\n];\r\n//# sourceMappingURL=button.css-variables.styles.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2024.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const BUTTON_STYLES = css `\r\n    :host {\r\n        display: inline-block;\r\n        height: var(--awf-button-height-inner);\r\n        width: var(--awf-button-width-inner);\r\n        --awf-icon-color: var(--awf-button-font-color-inner);\r\n        --awf-icon-size: var(--awf-button-icon-size-inner);\r\n    }\r\n\r\n    button {\r\n        align-items: center;\r\n        background-color: var(--awf-button-background-inner);\r\n        border: var(--awf-button-border-inner);\r\n        color: var(--awf-button-font-color-inner);\r\n        display: inline-flex;\r\n        font-family: inherit; /*Required to override User Agent settings*/\r\n        font-size: var(--awf-button-font-size-inner);\r\n        height: 100%;\r\n        justify-content: var(--awf-button-content-alignment-inner);\r\n        padding-left: var(--awf-button-padding-left-inner);\r\n        padding-right: var(--awf-button-padding-right-inner);\r\n        transition: var(--transition-duration) var(--transition-timing-function);\r\n        transition-property: color, background-color, border-color;\r\n        width: 100%;\r\n        --awf-icon-color: var(--awf-button-font-color-inner);\r\n    }\r\n\r\n    #label {\r\n        display: var(--awf-button-label-display-inner);\r\n        margin: var(--awf-button-label-margin-inner);\r\n    }\r\n\r\n    ::slotted(awf-icon),\r\n    ::slotted(ag-icon),\r\n    ::slotted(awf-icon-ng),\r\n    ::slotted(ag-icon-wc),\r\n    ::slotted(awf-notification-bubble) {\r\n        margin: var(--awf-button-icon-margin-inner);\r\n    }\r\n\r\n    slot:not([name]) {\r\n        display: none;\r\n    }\r\n\r\n    button:focus {\r\n        outline: var(--at-blue-shade) solid 1px;\r\n        outline-offset: 1px;\r\n    }\r\n\r\n    @media (hover: hover) {\r\n        button:hover {\r\n            background: var(--awf-button-hover-background-inner);\r\n            border: var(--awf-button-hover-border-inner);\r\n            color: var(--awf-button-hover-font-color-inner);\r\n            cursor: pointer;\r\n            --awf-icon-color: var(--awf-button-hover-font-color-inner);\r\n            --awf-notification-bubble-stroke-color: var(--awf-button-hover-background-inner);\r\n        }\r\n\r\n        :host(:not([disabled]):hover) button.awf-icon-button {\r\n            background-color: var(--awf-button-icon-only-hover-background-inner);\r\n        }\r\n    }\r\n\r\n    :host(.activated) button,\r\n    button:active {\r\n        background: var(--awf-button-active-background-inner);\r\n        border: var(--awf-button-active-border-inner);\r\n        color: var(--awf-button-active-font-color-inner);\r\n        --awf-icon-color: var(--awf-button-active-font-color-inner);\r\n    }\r\n\r\n    button:active {\r\n        outline: none;\r\n    }\r\n\r\n    :host([disabled]) button,\r\n    :host([disabled]) button:hover {\r\n        background: var(--awf-button-disabled-background-inner);\r\n        border: var(--awf-button-disabled-border-inner);\r\n        color: var(--awf-button-disabled-font-color-inner);\r\n        cursor: not-allowed;\r\n        --awf-icon-color: var(--awf-button-disabled-font-color-inner);\r\n    }\r\n\r\n    /* Primary dark */\r\n    :host([dark]) {\r\n        --awf-button-background-inner: var(--awf-button-background, var(--awf-button-dark-primary-rest-background-inner));\r\n        --awf-button-border-inner: var(--awf-button-border, var(--awf-button-dark-primary-rest-border-inner));\r\n        --awf-button-font-color-inner: var(--awf-button-font-color, var(--awf-button-dark-primary-rest-font-color-inner));\r\n        --awf-button-hover-background-inner: var(--awf-button-hover-background, var(--awf-button-dark-primary-hover-background-inner));\r\n        --awf-button-hover-border-inner: var(--awf-button-hover-border, var(--awf-button-dark-primary-hover-border-inner));\r\n        --awf-button-hover-font-color-inner: var(--awf-button-hover-font-color, var(--awf-button-dark-primary-hover-font-color-inner));\r\n        --awf-button-active-background-inner: var(--awf-button-active-background, var(--awf-button-dark-primary-active-background-inner));\r\n        --awf-button-active-border-inner: var(--awf-button-active-border, var(--awf-button-dark-primary-active-border-inner));\r\n        --awf-button-active-font-color-inner: var(--awf-button-active-font-color, var(--awf-button-dark-primary-active-font-color-inner));\r\n        --awf-button-disabled-background-inner: var(--awf-button-disabled-background, var(--awf-button-dark-primary-disabled-background-inner));\r\n        --awf-button-disabled-border-inner: var(--awf-button-disabled-border, var(--awf-button-dark-primary-disabled-border-inner));\r\n        --awf-button-disabled-font-color-inner: var(--awf-button-disabled-font-color, var(--awf-button-dark-primary-disabled-font-color-inner));\r\n    }\r\n\r\n    /* Secondary */\r\n    :host([type='secondary']) {\r\n        --awf-button-border-inner: var(--awf-button-border, var(--awf-button-secondary-rest-border-inner));\r\n        --awf-button-background-inner: var(--awf-button-background, var(--awf-button-secondary-rest-background-inner));\r\n        --awf-button-font-color-inner: var(--awf-button-font-color, var(--awf-button-secondary-rest-font-color-inner));\r\n        --awf-button-hover-border-inner: var(--awf-button-hover-border, var(--awf-button-secondary-hover-border-inner));\r\n        --awf-button-hover-background-inner: var(--awf-button-hover-background, var(--awf-button-secondary-hover-background-inner));\r\n        --awf-button-hover-font-color-inner: var(--awf-button-hover-font-color, var(--awf-button-secondary-hover-font-color-inner));\r\n        --awf-button-active-background-inner: var(--awf-button-active-background, var(--awf-button-secondary-active-background-inner));\r\n        --awf-button-active-border-inner: var(--awf-button-active-border, var(--awf-button-secondary-active-border-inner));\r\n        --awf-button-active-font-color-inner: var(--awf-button-active-font-color, var(--awf-button-secondary-active-font-color-inner));\r\n        --awf-button-disabled-background-inner: var(--awf-button-disabled-background, var(--awf-button-secondary-disabled-background-inner));\r\n        --awf-button-disabled-border-inner: var(--awf-button-disabled-border, var(--awf-button-secondary-disabled-border-inner));\r\n        --awf-button-disabled-font-color-inner: var(--awf-button-disabled-font-color, var(--awf-button-secondary-disabled-font-color-inner));\r\n    }\r\n\r\n    /* Secondary dark */\r\n    :host([type='secondary'][dark]) {\r\n        --awf-button-border-inner: var(--awf-button-border, var(--awf-button-dark-secondary-rest-border-inner));\r\n        --awf-button-background-inner: var(--awf-button-background, var(--awf-button-dark-secondary-rest-background-inner));\r\n        --awf-button-font-color-inner: var(--awf-button-font-color, var(--awf-button-dark-secondary-rest-font-color-inner));\r\n        --awf-button-hover-border-inner: var(--awf-button-hover-border, var(--awf-button-dark-secondary-hover-border-inner));\r\n        --awf-button-hover-background-inner: var(--awf-button-hover-background, var(--awf-button-dark-secondary-hover-background-inner));\r\n        --awf-button-hover-font-color-inner: var(--awf-button-hover-font-color, var(--awf-button-dark-secondary-hover-font-color-inner));\r\n        --awf-button-active-background-inner: var(--awf-button-active-background, var(--awf-button-dark-secondary-active-background-inner));\r\n        --awf-button-active-border-inner: var(--awf-button-active-border, var(--awf-button-dark-secondary-active-border-inner));\r\n        --awf-button-active-font-color-inner: var(--awf-button-active-font-color, var(--awf-button-dark-secondary-active-font-color-inner));\r\n        --awf-button-disabled-background-inner: var(--awf-button-disabled-background, var(--awf-button-dark-secondary-disabled-background-inner));\r\n        --awf-button-disabled-border-inner: var(--awf-button-disabled-border, var(--awf-button-dark-secondary-disabled-border-inner));\r\n        --awf-button-disabled-font-color-inner: var(--awf-button-disabled-font-color, var(--awf-button-dark-secondary-disabled-font-color-inner));\r\n    }\r\n\r\n    /* Special */\r\n    :host([type='special']) {\r\n        --awf-button-border-inner: var(--awf-button-border, var(--awf-button-special-rest-border-inner));\r\n        --awf-button-background-inner: var(--awf-button-background, var(--awf-button-special-rest-background-inner));\r\n        --awf-button-font-color-inner: var(--awf-button-font-color, var(--awf-button-special-rest-font-color-inner));\r\n        --awf-button-hover-border-inner: var(--awf-button-hover-border, var(--awf-button-special-hover-border-inner));\r\n        --awf-button-hover-background-inner: var(--awf-button-hover-background, var(--awf-button-special-hover-background-inner));\r\n        --awf-button-hover-font-color-inner: var(--awf-button-hover-font-color, var(--awf-button-special-hover-font-color-inner));\r\n        --awf-button-active-background-inner: var(--awf-button-active-background, var(--awf-button-special-active-background-inner));\r\n        --awf-button-active-border-inner: var(--awf-button-active-border, var(--awf-button-special-active-border-inner));\r\n        --awf-button-active-font-color-inner: var(--awf-button-active-font-color, var(--awf-button-special-active-font-color-inner));\r\n        --awf-button-disabled-background-inner: var(--awf-button-disabled-background, var(--awf-button-special-disabled-background-inner));\r\n        --awf-button-disabled-border-inner: var(--awf-button-disabled-border, var(--awf-button-special-disabled-border-inner));\r\n        --awf-button-disabled-font-color-inner: var(--awf-button-disabled-font-color, var(--awf-button-special-disabled-font-color-inner));\r\n    }\r\n\r\n    :host([type='critical']) {\r\n        --awf-button-border-inner: var(--awf-button-border, var(--awf-button-critical-rest-border-inner));\r\n        --awf-button-background-inner: var(--awf-button-background, var(--awf-button-critical-rest-background-inner));\r\n        --awf-button-font-color-inner: var(--awf-button-font-color, var(--awf-button-critical-rest-font-color-inner));\r\n        --awf-button-hover-border-inner: var(--awf-button-hover-border, var(--awf-button-critical-hover-border-inner));\r\n        --awf-button-hover-background-inner: var(--awf-button-hover-background, var(--awf-button-critical-hover-background-inner));\r\n        --awf-button-hover-font-color-inner: var(--awf-button-hover-font-color, var(--awf-button-critical-hover-font-color-inner));\r\n        --awf-button-active-background-inner: var(--awf-button-active-background, var(--awf-button-critical-active-background-inner));\r\n        --awf-button-active-border-inner: var(--awf-button-active-border, var(--awf-button-critical-active-border-inner));\r\n        --awf-button-active-font-color-inner: var(--awf-button-active-font-color, var(--awf-button-critical-active-font-color-inner));\r\n        --awf-button-disabled-background-inner: var(--awf-button-disabled-background, var(--awf-button-critical-disabled-background-inner));\r\n        --awf-button-disabled-border-inner: var(--awf-button-disabled-border, var(--awf-button-critical-disabled-border-inner));\r\n        --awf-button-disabled-font-color-inner: var(--awf-button-disabled-font-color, var(--awf-button-critical-disabled-font-color-inner));\r\n    }\r\n\r\n    /* Special dark */\r\n    :host([type='special'][dark]) {\r\n        --awf-button-border-inner: var(--awf-button-border, var(--awf-button-dark-special-rest-border-inner));\r\n        --awf-button-background-inner: var(--awf-button-background, var(--awf-button-dark-special-rest-background-inner));\r\n        --awf-button-font-color-inner: var(--awf-button-font-color, var(--awf-button-dark-special-rest-font-color-inner));\r\n        --awf-button-hover-border-inner: var(--awf-button-hover-border, var(--awf-button-dark-special-hover-border-inner));\r\n        --awf-button-hover-background-inner: var(--awf-button-hover-background, var(--awf-button-dark-special-hover-background-inner));\r\n        --awf-button-hover-font-color-inner: var(--awf-button-hover-font-color, var(--awf-button-dark-special-hover-font-color-inner));\r\n        --awf-button-active-background-inner: var(--awf-button-active-background, var(--awf-button-dark-special-active-background-inner));\r\n        --awf-button-active-border-inner: var(--awf-button-active-border, var(--awf-button-dark-special-active-border-inner));\r\n        --awf-button-active-font-color-inner: var(--awf-button-active-font-color, var(--awf-button-dark-special-active-font-color-inner));\r\n        --awf-button-disabled-background-inner: var(--awf-button-disabled-background, var(--awf-button-dark-special-disabled-background-inner));\r\n        --awf-button-disabled-border-inner: var(--awf-button-disabled-border, var(--awf-button-dark-special-disabled-border-inner));\r\n        --awf-button-disabled-font-color-inner: var(--awf-button-disabled-font-color, var(--awf-button-dark-special-disabled-font-color-inner));\r\n    }\r\n\r\n    /* Icon buttons */\r\n    button.awf-icon-button {\r\n        align-items: center;\r\n        border-radius: inherit;\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        outline: none;\r\n        width: var(--awf-button-width-inner, var(--awf-button-height-inner));\r\n        padding: 0;\r\n        border: 1px solid transparent;\r\n        background-color: var(--awf-button-icon-only-background-inner);\r\n        --awf-button-icon-margin-inner: 0;\r\n        --awf-button-active-font-color-inner: var(--awf-button-icon-only-active-foreground-inner);\r\n    }\r\n\r\n    :host(.activated) button.awf-icon-button,\r\n    :host(:not([disabled]):active) button.awf-icon-button {\r\n        background-color: var(--awf-button-icon-only-active-background-inner);\r\n        border-color: transparent;\r\n        --awf-notification-bubble-stroke-color: var(--awf-button-icon-only-active-background-inner);\r\n    }\r\n\r\n    :host(:not([disabled]):not(:active):focus) button.awf-icon-button,\r\n    :host(:not([disabled]):not(:active):focus-visible) button.awf-icon-button {\r\n        border-color: var(--awf-state-focused-border);\r\n    }\r\n\r\n    :host([disabled]) button.awf-icon-button {\r\n        --awf-icon-color: var(--awf-state-disabled-foreground);\r\n        background-color: var(--awf-button-icon-only-background-inner);\r\n        border-color: transparent;\r\n    }\r\n`;\r\n//# sourceMappingURL=button.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2024.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { html, LitElement } from 'lit';\r\nimport { property, query, queryAssignedElements, queryAssignedNodes } from 'lit/decorators.js';\r\nimport { ifDefined } from 'lit/directives/if-defined.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { eventsService } from '../../common/events/events.service';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { moveElementsIntoSlot } from '../../common/utils/util';\r\nimport { BUTTON_CSS_VARIABLES } from './button.css-variables.styles';\r\nimport { BUTTON_STYLES } from './button.styles';\r\n// eslint-disable-next-line no-shadow\r\nexport var ButtonType;\r\n(function (ButtonType) {\r\n    ButtonType[\"Primary\"] = \"primary\";\r\n    ButtonType[\"Secondary\"] = \"secondary\";\r\n    ButtonType[\"Special\"] = \"special\";\r\n    ButtonType[\"Critical\"] = \"critical\";\r\n})(ButtonType || (ButtonType = {}));\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/buttons)\r\n */\r\nlet AwfButton = class AwfButton extends LitElement {\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * The type of the button: <code>primary</code>, <code>secondary</code>, <code>special</code>, <code>critical</code>.\r\n         */\r\n        this.type = ButtonType.Primary;\r\n        /**\r\n         * The label to be displayed in the button\r\n         */\r\n        this.label = null;\r\n        /**\r\n         * Set this property to true when the button is placed in an element with a colored background.\r\n         */\r\n        this.dark = false;\r\n        /**\r\n         * When true, clicking on the button will have no effect.\r\n         */\r\n        this.disabled = false;\r\n        eventsService.manageFocus(this);\r\n    }\r\n    requestFocus() {\r\n        this.buttonElement.focus();\r\n    }\r\n    render() {\r\n        const ariaLabel = this.getAttribute('aria-label') || undefined;\r\n        const commonTemplate = html `\r\n            <button ?disabled=${this.disabled} aria-label=${ifDefined(ariaLabel)}>\r\n                <slot name=\"icon\" @slotchange=${this.handleIconSlotChange}></slot>\r\n            </button>\r\n            <slot @slotchange=${this.handleSlotChange}></slot>\r\n        `;\r\n        return html ` ${commonTemplate} `;\r\n    }\r\n    updated(_changedProperties) {\r\n        if (_changedProperties.has('label')) {\r\n            this.replaceLabel(this.label ?? '');\r\n        }\r\n    }\r\n    handleSlotChange() {\r\n        const selector = 'slot:not([name])';\r\n        if (this.shadowRoot) {\r\n            const defaultSlot = this.shadowRoot.querySelector(selector);\r\n            if (defaultSlot) {\r\n                moveElementsIntoSlot(defaultSlot, 'awf-icon', 'icon');\r\n            }\r\n        }\r\n        const text = this.label ??\r\n            this.slottedContent\r\n                .map(n => n?.textContent)\r\n                .join('')\r\n                .trim();\r\n        if (text) {\r\n            this.replaceLabel(text);\r\n        }\r\n    }\r\n    handleIconSlotChange() {\r\n        const [icon] = this.slottedIcon;\r\n        if (icon) {\r\n            const label = this.shadowRoot?.getElementById('label');\r\n            if (label?.textContent) {\r\n                this.style.setProperty('--awf-button-padding-left', '0px');\r\n                this.buttonElement.classList.remove('awf-icon-button');\r\n            }\r\n            else {\r\n                this.buttonElement.classList.add('awf-icon-button');\r\n            }\r\n        }\r\n        else {\r\n            this.buttonElement.classList.remove('awf-icon-button');\r\n        }\r\n    }\r\n    replaceLabel(text) {\r\n        const label = this.shadowRoot?.getElementById('label');\r\n        if (label) {\r\n            this.buttonElement.removeChild(label);\r\n        }\r\n        if (text) {\r\n            const labelElement = this.createLabel(text);\r\n            this.buttonElement.appendChild(labelElement);\r\n        }\r\n        this.handleIconSlotChange();\r\n    }\r\n    createLabel(text) {\r\n        const labelElement = document.createElement('span');\r\n        labelElement.id = 'label';\r\n        labelElement.innerText = text;\r\n        return labelElement;\r\n    }\r\n};\r\nAwfButton.styles = [COMMON_STYLES, BUTTON_CSS_VARIABLES, BUTTON_STYLES];\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfButton.prototype, \"type\", void 0);\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfButton.prototype, \"label\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfButton.prototype, \"dark\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfButton.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    queryAssignedNodes({ flatten: true })\r\n], AwfButton.prototype, \"slottedContent\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: 'icon' })\r\n], AwfButton.prototype, \"slottedIcon\", void 0);\r\n__decorate([\r\n    query('button')\r\n], AwfButton.prototype, \"buttonElement\", void 0);\r\nAwfButton = __decorate([\r\n    customElement('awf-button', true)\r\n], AwfButton);\r\nexport { AwfButton };\r\n//# sourceMappingURL=button.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { css, html, LitElement } from 'lit';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nlet AwfCarouselPage = class AwfCarouselPage extends LitElement {\r\n    render() {\r\n        return html `<slot></slot>`;\r\n    }\r\n};\r\nAwfCarouselPage.styles = [\r\n    COMMON_STYLES, css `\r\n        :host {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n    `\r\n];\r\nAwfCarouselPage = __decorate([\r\n    customElement('awf-carousel-page', true)\r\n], AwfCarouselPage);\r\nexport { AwfCarouselPage };\r\n//# sourceMappingURL=carousel-page.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const CHIP_ACTIVE = css `\r\n    :host {\r\n        --awf-chip-active-background-inner: var(--awf-chip-active-background, var(--at-blue-shade));\r\n        --awf-chip-active-border-inner: var(--awf-chip-active-border, 1px solid var(--at-blue-shade));\r\n        --awf-chip-active-font-color-inner: var(--awf-chip-active-font-color, var(--at-white));\r\n\r\n        --awf-chip-active-disabled-background-inner: var(--awf-chip-active-disabled-background, var(--at-blue-soft));\r\n        --awf-chip-active-disabled-border-inner: var(--awf-chip-active-disabled-border, 1px solid var(--at-blue-soft));\r\n        --awf-chip-active-disabled-font-color-inner: var(--awf-chip-active-disabled-font-color, var(--at-gray-medium));\r\n\r\n        --awf-chip-active-light-background-inner: var(--awf-chip-active-light-background, var(--at-blue-medium));\r\n        --awf-chip-active-light-border-inner: var(--awf-chip-active-light-border, 1px solid var(--at-blue-medium));\r\n        --awf-chip-active-light-font-color-inner: var(--awf-chip-active-light-font-color, var(--at-dark-navy));\r\n    }\r\n`;\r\nexport const CHIP_REST = css `\r\n    :host {\r\n        --awf-chip-rest-background-inner: var(--awf-chip-rest-background, none);\r\n        --awf-chip-rest-border-inner: var(--awf-chip-rest-border, 1px solid var(--at-gray));\r\n        --awf-chip-rest-font-color-inner: var(--awf-chip-rest-font-color, var(--at-dark-navy));\r\n\r\n        --awf-chip-rest-disabled-background-inner: var(--awf-chip-rest-disabled-background, none);\r\n        --awf-chip-rest-disabled-border-inner: var(--awf-chip-rest-disabled-border, 1px solid var(--at-gray));\r\n        --awf-chip-rest-disabled-font-color-inner: var(--awf-chip-rest-disabled-font-color, var(--at-gray-medium));\r\n\r\n        --awf-chip-rest-light-hover-background-inner: var(--awf-chip-rest-light-background, var(--at-blue-soft));\r\n        --awf-chip-rest-light-hover-border-inner: var(--awf-chip-rest-light-border, 1px solid var(--at-blue-soft));\r\n        --awf-chip-rest-light-hover-font-color-inner: var(--awf-chip-rest-light-font-color, var(--at-dark-navy));\r\n\r\n        --awf-chip-rest-hover-background-inner: var(--awf-chip-rest-hover-background, var(--at-blue-medium));\r\n        --awf-chip-rest-hover-border-inner: var(--awf-chip-rest-hover-border, 1px solid var(--at-blue-medium));\r\n        --awf-chip-rest-hover-font-color-inner: var(--awf-chip-rest-hover-font-color, var(--at-dark-navy));\r\n    }\r\n`;\r\nexport const CHIP_CSS_VARIABLES = [\r\n    CHIP_REST,\r\n    CHIP_ACTIVE,\r\n    css `\r\n        :host {\r\n            --awf-chip-height-inner: var(--awf-chip-height, 32px);\r\n            --awf-chip-padding-left-right-inner: var(--awf-chip-padding-left-right, 16px);\r\n            --awf-chip-padding-top-bottom-inner: var(--awf-chip-padding-top-bottom, 3px);\r\n            --awf-chip-wrapper-padding-inner: var(--awf-chip-wrapper-padding, 3px);\r\n            \r\n            /* Remove button */\r\n            --awf-chip-remove-button-hover-background-inner: var(--awf-chip-remove-button-hover-background, var(--at-blue-medium));\r\n            --awf-chip-remove-button-size-inner: var(--awf-chip-remove-button-size, 16px);\r\n            --awf-chip-remove-button-wrapper-margin-inner: var(--awf-chip-remove-button-wrapper-margin, 5px);\r\n            --awf-chip-remove-button-wrapper-size-inner: var(--awf-chip-remove-button-wrapper-size, 24px);\r\n        }\r\n    `\r\n];\r\n//# sourceMappingURL=chip.css-variables.styles.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const CHIP_TRANSITIONS = css `\r\n    transition: var(--transition-duration) var(--transition-timing-function);\r\n    transition-property: color, background-color, border-color, opacity, box-shadow;\r\n`;\r\nexport const CHIP_STYLES = css `\r\n    .chip-wrapper {\r\n        display: flex;\r\n        border-radius: 16px;\r\n        width: fit-content;\r\n        align-items: center;\r\n        justify-content: center;\r\n        padding: var(--awf-chip-padding-top-bottom-inner) var(--awf-chip-padding-left-right-inner);\r\n        height: var(--awf-chip-height-inner);\r\n\r\n        background-color: var(--awf-chip-rest-background-inner);\r\n        border: var(--awf-chip-rest-border-inner);\r\n        color: var(--awf-chip-rest-font-color-inner);\r\n        cursor: pointer;\r\n        --awf-icon-color: var(--awf-chip-rest-font-color-inner);\r\n    }\r\n\r\n    .chip-wrapper,\r\n    .chip-wrapper > * {\r\n        opacity: 1;\r\n\r\n        ${CHIP_TRANSITIONS};\r\n    }\r\n\r\n    :host {\r\n        display: inline-block;\r\n    }\r\n\r\n    :host([active][light]) .chip-wrapper {\r\n        background-color: var(--awf-chip-active-light-background-inner);\r\n        border: var(--awf-chip-active-light-border-inner);\r\n        color: var(--awf-chip-active-light-font-color-inner);\r\n    }\r\n\r\n    :host([disabled]) .chip-wrapper {\r\n        background-color: var(--awf-chip-rest-disabled-background-inner);\r\n        border: var(--awf-chip-rest-disabled-border-inner);\r\n        color: var(--awf-chip-rest-disabled-font-color-inner);\r\n    }\r\n\r\n    :host([active][disabled]) .chip-wrapper {\r\n        background-color: var(--awf-chip-active-disabled-background-inner);\r\n        border: var(--awf-chip-active-disabled-border-inner);\r\n        color: var(--awf-chip-active-disabled-font-color-inner);\r\n        --awf-icon-color: var(--awf-chip-active-disabled-font-color-inner);\r\n    }\r\n\r\n    :host([active]) .chip-wrapper {\r\n        background-color: var(--awf-chip-active-background-inner);\r\n        border: var(--awf-chip-active-border-inner);\r\n        color: var(--awf-chip-active-font-color-inner);\r\n        --awf-icon-color: var(--awf-chip-active-font-color-inner);\r\n    }\r\n\r\n    :host([disabled]) .chip-wrapper {\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    :host([disabled]) .chip-wrapper > img {\r\n        opacity: var(--disabled-opacity);\r\n    }\r\n\r\n    :host([light]:not([active]):not([disabled])) .chip-wrapper:hover {\r\n        background-color: var(--awf-chip-rest-light-hover-background-inner);\r\n        border: var(--awf-chip-rest-light-hover-border-inner);\r\n        color: var(--awf-chip-rest-light-hover-font-color-inner);\r\n    }\r\n\r\n    :host(:not([disabled]):not([active])) .chip-wrapper:hover {\r\n        background-color: var(--awf-chip-rest-hover-background-inner);\r\n        border: var(--awf-chip-rest-hover-border-inner);\r\n        color: var(--awf-chip-rest-hover-font-color-inner);\r\n    }\r\n\r\n    :host(:not([disabled])) .remove-button:hover {\r\n        cursor: pointer;\r\n        background-color: var(--awf-chip-remove-button-hover-background-inner);\r\n    }\r\n\r\n    :host(:not([disabled])[light]) .remove-button:hover {\r\n        background-color: var(--at-blue-soft);\r\n    }\r\n\r\n    :host([removeable]) .chip-wrapper {\r\n        padding-right: var(--awf-chip-wrapper-padding-inner);\r\n    }\r\n\r\n    img,\r\n    .icon {\r\n        width: 24px;\r\n        height: 24px;\r\n        border-radius: 50%;\r\n        margin-right: 5px;\r\n        margin-left: -13px;\r\n        object-fit: cover;\r\n    }\r\n\r\n    .icon awf-icon {\r\n        margin: 1px 1px 1px 2px;\r\n    }\r\n\r\n    .remove-button {\r\n        border-radius: 50%;\r\n        border-width: 0;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        padding: 0;\r\n        background-color: transparent;\r\n        width: var(--awf-chip-remove-button-wrapper-size-inner);\r\n        height: var(--awf-chip-remove-button-wrapper-size-inner);\r\n        margin-left: var(--awf-chip-remove-button-wrapper-margin-inner);\r\n    }\r\n\r\n    .remove-button awf-icon {\r\n        height: var(--awf-chip-remove-button-size-inner);\r\n        width: var(--awf-chip-remove-button-size-inner);\r\n    }\r\n\r\n    .label {\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n//# sourceMappingURL=chip.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agDeleteCross } from '@agilent/web-icons/core';\r\nimport { html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { dispatchCustomEvent } from '../../common/utils/util';\r\nimport '../icon/icon.js';\r\nimport { CHIP_CSS_VARIABLES } from './chip.css-variables.styles';\r\nimport { CHIP_STYLES } from './chip.styles';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/chips)\r\n */\r\nlet AwfChip = class AwfChip extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The label to be displayed in the chip.\r\n         */\r\n        this.label = '';\r\n        /**\r\n         * If true, then a light-coloring is used.\r\n         */\r\n        this.light = false;\r\n        /**\r\n         * If true, then the chip is active.\r\n         */\r\n        this.active = false;\r\n        /**\r\n         * If true, then the chip is disabled and can't be activated.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * If true, then a remove-button is added to the chip.\r\n         */\r\n        this.removeable = false;\r\n        this.dispatchCustomEvent = dispatchCustomEvent.bind(this);\r\n    }\r\n    render() {\r\n        return html `<button aria-label=\"chip\" class=\"chip-wrapper\" ?disabled=${this.disabled}>\r\n            ${this.getPictureTemplate()}\r\n            <span class=\"label\">${this.label}</span>\r\n            ${this.getRemoveButton()}\r\n        </button>`;\r\n    }\r\n    updated(changes) {\r\n        super.updated(changes);\r\n        if (changes.has('disabled')) {\r\n            if (this.disabled) {\r\n                this.setAttribute('aria-disabled', 'true');\r\n            }\r\n            else {\r\n                this.removeAttribute('aria-disabled');\r\n            }\r\n        }\r\n    }\r\n    getPictureTemplate() {\r\n        if (this.image) {\r\n            return html `<img alt=\"\" src=\"${this.image}\" />`;\r\n        }\r\n        if (this.icon) {\r\n            return html `<span class=\"icon\"><awf-icon name=${this.icon}></awf-icon></span>`;\r\n        }\r\n        return html ``;\r\n    }\r\n    getRemoveButton() {\r\n        if (this.removeable) {\r\n            return html ` <button aria-label=\"remove-chip\" class=\"remove-button\" @click=${this.removeChip}>\r\n                <awf-icon raw=${agDeleteCross}></awf-icon>\r\n            </button>`;\r\n        }\r\n        return html ``;\r\n    }\r\n    removeChip(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        this.dispatchCustomEvent(AwfEvent.DELETE);\r\n    }\r\n};\r\nAwfChip.styles = [COMMON_STYLES, CHIP_CSS_VARIABLES, CHIP_STYLES];\r\n__decorate([\r\n    property()\r\n], AwfChip.prototype, \"label\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfChip.prototype, \"value\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfChip.prototype, \"icon\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfChip.prototype, \"image\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfChip.prototype, \"light\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfChip.prototype, \"active\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfChip.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfChip.prototype, \"removeable\", void 0);\r\nAwfChip = __decorate([\r\n    customElement('awf-chip', true)\r\n], AwfChip);\r\nexport { AwfChip };\r\n//# sourceMappingURL=chip.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const DATEPICKER_STYLES = css `\r\n    .datepicker {\r\n        background-color: white;\r\n        cursor: default;\r\n        width: calc(7 * var(--awf-datepicker-day-width-inner));\r\n    }\r\n\r\n    .header {\r\n        display: grid;\r\n        grid-template-columns: auto 1fr auto;\r\n        color: var(--awf-state-rest-foreground);\r\n    }\r\n\r\n    .month {\r\n        background-color: white;\r\n        border: none;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .grid {\r\n        display: grid;\r\n        grid-template-columns: repeat(7, var(--awf-datepicker-day-width-inner));\r\n        grid-template-rows: repeat(7, var(--awf-datepicker-day-height-inner));\r\n    }\r\n\r\n    .grid:focus-visible {\r\n        outline: none;\r\n    }\r\n\r\n    .weekday {\r\n        color: var(--awf-state-disabled-foreground);\r\n        border-bottom: solid 1px var(--at-gray);\r\n        line-height: 2;\r\n        text-align: center;\r\n        font-style: italic;\r\n        font-size: smaller;\r\n    }\r\n\r\n    .day-of-month {\r\n        background-color: white;\r\n        border: none;\r\n        box-sizing: border-box;\r\n        color: var(--awf-state-rest-foreground);\r\n        cursor: pointer;\r\n        font-family: inherit; /*Required to override User Agent settings*/\r\n        font-size: var(--awf-button-font-size-inner);\r\n        height: var(--awf-datepicker-day-height-inner);\r\n        width: var(--awf-datepicker-day-width-inner);\r\n    }\r\n\r\n    .day-of-month.disabled {\r\n        color: var(--awf-state-disabled-foreground);\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    .day-of-month.focused {\r\n        border: solid 1px var(--awf-state-selected-border);\r\n    }\r\n\r\n    .day-of-month:focus-visible {\r\n        outline: none;\r\n    }\r\n\r\n    .day-of-month:hover:not(.disabled),\r\n    .day-of-month.selected:hover:not(.disabled),\r\n    .day-of-month.highlighted:not(.disabled) {\r\n        background-color: var(--awf-state-hover-background);\r\n    }\r\n\r\n    .day-of-month.selected:not(.disabled),\r\n    .day-of-month:active:not(.disabled) {\r\n        background-color: var(--awf-state-selected-background);\r\n        color: var(--awf-state-selected-foreground);\r\n    }\r\n\r\n    .day-of-month.selected {\r\n        outline: none;\r\n    }\r\n`;\r\n//# sourceMappingURL=datepicker.style.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agPageNext, agPagePrevious } from '@agilent/web-icons/core';\r\nimport { localized, msg } from '@lit/localize';\r\nimport { LitElement, html } from 'lit';\r\nimport { repeat } from 'lit-html/directives/repeat.js';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport { classMap } from 'lit/directives/class-map.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { dateUtil } from '../../common/utils/date.util';\r\nimport { localizationUtil } from '../../common/utils/localization.util';\r\nimport { createCustomEvent } from '../../common/utils/util';\r\nimport { BUTTON_CSS_VARIABLES } from '../button/button.css-variables.styles';\r\nimport '../button/button.js';\r\nimport '../icon/icon.js';\r\nimport { DATE_PICKER_CSS_VARIABLES } from './datepicker.css-variables.styles';\r\nimport { DATEPICKER_STYLES } from './datepicker.style';\r\nlet AwfDatePicker = class AwfDatePicker extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * When true, the user can select a date range.\r\n         */\r\n        this.dateRange = false;\r\n        this.monthLabel = '';\r\n        this.displayedDates = [];\r\n        this._onKeydown = this.onKeydown.bind(this);\r\n        this._onKeypress = this.onKeypress.bind(this);\r\n    }\r\n    /** @inheritdoc */\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.addEventListener('keydown', this._onKeydown);\r\n        this.addEventListener('keypress', this._onKeypress);\r\n    }\r\n    /** @inheritdoc */\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.removeEventListener('keydown', this._onKeydown);\r\n        this.removeEventListener('keypress', this._onKeypress);\r\n    }\r\n    requestFocus() {\r\n        this.focusedDayBtn?.focus();\r\n    }\r\n    /** @inheritdoc */\r\n    render() {\r\n        return html `\r\n            <div class=\"datepicker\">\r\n                <div class=\"header\">\r\n                    <awf-button id=\"previousMonthBtn\" @click=${this.gotoPreviousMonth} aria-label=\"previous month\">\r\n                        <awf-icon raw=${agPagePrevious}></awf-icon>\r\n                    </awf-button>\r\n                    <awf-tooltip trigger=\"previousMonthBtn\" message=${msg('Previous month')} tip></awf-tooltip>\r\n                    <div class=\"month\">${this.monthLabel} ${this.displayedMonth.getFullYear()}</div>\r\n                    <awf-button id=\"nextMonthBtn\" @click=${this.gotoNextMonth} aria-label=\"next month\">\r\n                        <awf-icon raw=${agPageNext}></awf-icon>\r\n                    </awf-button>\r\n                    <awf-tooltip trigger=\"nextMonthBtn\" message=${msg('Next month')} tip></awf-tooltip>\r\n                </div>\r\n                <div class=\"grid\" @mouseleave=${this.onMouseLeaveGrid}>\r\n                    ${repeat([msg('Su'), msg('Mo'), msg('Tu'), msg('We'), msg('Th'), msg('Fr'), msg('Sa')], this.renderWeekday)}\r\n                    ${repeat(this.displayedDates, this.renderDates.bind(this))}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n    /** @inheritdoc */\r\n    willUpdate(_changedProperties) {\r\n        const valueChanged = _changedProperties.has('value');\r\n        const minChanged = _changedProperties.has('min');\r\n        const maxChanged = _changedProperties.has('max');\r\n        if (!this.focusedDate || valueChanged || minChanged || maxChanged) {\r\n            this.initFocusedDate(this.value || new Date());\r\n        }\r\n        if (!this.displayedMonth || valueChanged || minChanged || maxChanged) {\r\n            this.displayedMonth = new Date(this.focusedDate.getFullYear(), this.focusedDate.getMonth(), 1);\r\n        }\r\n        this.monthLabel = localizationUtil.computeMonthName(this.displayedMonth);\r\n        this.displayedDates = this.computeDisplayedDates(this.displayedMonth);\r\n    }\r\n    updated(_changedProperties) {\r\n        this.requestFocus();\r\n    }\r\n    renderDates(date) {\r\n        const classes = classMap({\r\n            'day-of-month': true,\r\n            disabled: this.isDateDisabled(date),\r\n            selected: this.isDateSelected(date),\r\n            highlighted: this.isDateHighlighted(date),\r\n            focused: this.isDateFocused(date),\r\n        });\r\n        return html `<button class=${classes} @click=${() => this.selectDate(date)} @mouseenter=${() => this.onMouseEnter(date)}>\r\n            ${date.getDate()}\r\n        </button>`;\r\n    }\r\n    renderWeekday(weekday) {\r\n        return html `<div class=\"weekday\">${weekday}</div>`;\r\n    }\r\n    initFocusedDate(date) {\r\n        let dateToSet = date.getTime();\r\n        dateToSet = this.min && dateToSet < this.min.getTime() ? this.min.getTime() : dateToSet;\r\n        dateToSet = this.max && dateToSet > this.max.getTime() ? this.max.getTime() : dateToSet;\r\n        this.focusedDate = new Date(dateToSet);\r\n    }\r\n    computeDisplayedDates(displayedMonth) {\r\n        const dates = new Array(42);\r\n        const firstDisplayedDate = new Date(displayedMonth.getFullYear(), displayedMonth.getMonth(), -displayedMonth.getDay() + 1);\r\n        for (let i = 0; i < 42; i++) {\r\n            const date = new Date(firstDisplayedDate);\r\n            date.setDate(firstDisplayedDate.getDate() + i);\r\n            dates[i] = date;\r\n        }\r\n        return dates;\r\n    }\r\n    isDateDisabled(date) {\r\n        let disabled = date.getMonth() !== this.displayedMonth.getMonth();\r\n        if (this.min) {\r\n            disabled || (disabled = dateUtil.compareDates(date, this.min) < 0);\r\n        }\r\n        if (this.max) {\r\n            disabled || (disabled = dateUtil.compareDates(date, this.max) > 0);\r\n        }\r\n        if (this.dateRange && this.value) {\r\n            disabled || (disabled = dateUtil.compareDates(date, this.value) === -1);\r\n        }\r\n        return disabled;\r\n    }\r\n    isDateSelected(date) {\r\n        return [this.value, this.endValue].some(d => d?.toDateString() === date.toDateString());\r\n    }\r\n    isDateFocused(date) {\r\n        return !this.isDateDisabled(date) && date.toDateString() === this.focusedDate.toDateString();\r\n    }\r\n    isDateHighlighted(date) {\r\n        if (this.dateRange && this.value) {\r\n            const targetDate = this.endValue || this.hoveredDay;\r\n            if (targetDate) {\r\n                return date.getTime() >= this.value.getTime() && date.getTime() <= targetDate.getTime();\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    gotoPreviousMonth() {\r\n        this.displayedMonth = new Date(this.displayedMonth.getFullYear(), this.displayedMonth.getMonth() - 1);\r\n    }\r\n    gotoNextMonth() {\r\n        this.displayedMonth = new Date(this.displayedMonth.getFullYear(), this.displayedMonth.getMonth() + 1);\r\n    }\r\n    selectDate(date) {\r\n        if (!this.isDateDisabled(date)) {\r\n            this.focusedDate = date;\r\n            if (this.value && this.dateRange) {\r\n                this.endValue = date;\r\n                this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_CHANGE, { startDate: this.value, endDate: this.endValue }));\r\n            }\r\n            else {\r\n                this.value = date;\r\n                this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_CHANGE, this.value));\r\n            }\r\n        }\r\n    }\r\n    onMouseEnter(date) {\r\n        if (this.dateRange && this.value && date.getTime() > this.value.getTime()) {\r\n            this.hoveredDay = date;\r\n        }\r\n        else {\r\n            this.hoveredDay = undefined;\r\n        }\r\n    }\r\n    onMouseLeaveGrid() {\r\n        this.hoveredDay = undefined;\r\n    }\r\n    onKeypress(event) {\r\n        if (['Enter', 'Space'].some(key => key === event.code)) {\r\n            this.selectDate(this.focusedDate);\r\n        }\r\n    }\r\n    onKeydown(event) {\r\n        let dayShift = 0;\r\n        switch (event.code) {\r\n            case 'ArrowRight':\r\n                dayShift = 1;\r\n                break;\r\n            case 'ArrowLeft':\r\n                dayShift = -1;\r\n                break;\r\n            case 'ArrowDown':\r\n                dayShift = 7;\r\n                break;\r\n            case 'ArrowUp':\r\n                dayShift = -7;\r\n                break;\r\n            case 'Tab':\r\n                dayShift = event.shiftKey ? -1 : 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (dayShift !== 0) {\r\n            event.preventDefault();\r\n        }\r\n        this.focusedDate = new Date(this.focusedDate.getFullYear(), this.focusedDate.getMonth(), this.focusedDate.getDate() + dayShift);\r\n        this.displayedMonth = new Date(this.focusedDate.getFullYear(), this.focusedDate.getMonth(), 1);\r\n    }\r\n};\r\nAwfDatePicker.styles = [COMMON_STYLES, BUTTON_CSS_VARIABLES, DATE_PICKER_CSS_VARIABLES, DATEPICKER_STYLES];\r\n__decorate([\r\n    property({ attribute: false })\r\n], AwfDatePicker.prototype, \"value\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], AwfDatePicker.prototype, \"endValue\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], AwfDatePicker.prototype, \"min\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], AwfDatePicker.prototype, \"max\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfDatePicker.prototype, \"dateRange\", void 0);\r\n__decorate([\r\n    query('button.day-of-month.focused')\r\n], AwfDatePicker.prototype, \"focusedDayBtn\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfDatePicker.prototype, \"displayedMonth\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfDatePicker.prototype, \"focusedDate\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfDatePicker.prototype, \"hoveredDay\", void 0);\r\nAwfDatePicker = __decorate([\r\n    localized(),\r\n    customElement('awf-datepicker', true)\r\n], AwfDatePicker);\r\nexport { AwfDatePicker };\r\n//# sourceMappingURL=datepicker.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nimport { LABEL_CSS_VARIABLES } from './label.css-variables.styles';\r\nexport const FLOATING_ATTR = css `floating`;\r\n/** Constant to be used by external components to force the label to stay in a floating position, whatever the default management does. */\r\nexport const FLOATING_FORCED_ATTR = css `floating-forced`;\r\nexport const LABEL_STYLE = [\r\n    LABEL_CSS_VARIABLES,\r\n    css `\r\n        :host([warning]) {\r\n            --awf-label-font-color: var(--awf-label-warning-font-color-inner);\r\n        }\r\n\r\n        :host([error]) {\r\n            --awf-label-font-color: var(--awf-label-error-font-color-inner);\r\n        }\r\n\r\n        :host(:not([labelPosition='left']).has-label) {\r\n            padding-top: 19px;\r\n            position: relative;\r\n        }\r\n\r\n        /* Label top-inside: transition */\r\n        :host(:not([labelPosition='left'])) ::slotted(label) {\r\n            transition: all var(--transition-duration) var(--transition-timing-function);\r\n            pointer-events: none;\r\n            z-index: var(--awf-elevation-z2);\r\n\r\n            display: block;\r\n            height: var(--awf-label-inside-position-height-inner);\r\n            overflow: hidden;\r\n            position: absolute;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        /* Label inside */\r\n        :host(:not([labelPosition='left'])):host(:not(:focus-within)) ::slotted(label:not([${FLOATING_ATTR}]):not([${FLOATING_FORCED_ATTR}])) {\r\n            --awf-label-internal-font-color: var(--awf-label-inside-position-font-color-inner);\r\n            --awf-label-font-size: var(--awf-label-inside-position-font-size-inner);\r\n            --awf-label-font-style: var(--awf-label-inside-position-font-style-inner);\r\n            --awf-label-padding-left: var(--awf-label-inside-position-padding-left-inner);\r\n            --awf-label-padding-right: var(--awf-label-inside-position-padding-right-inner);\r\n            --awf-label-top: var(--awf-label-inside-position-top-inner);\r\n        }\r\n\r\n        :host(:not([labelPosition='left'])):host(:not(:focus-within)):host(:hover)\r\n                                                                    ::slotted(label:not([${FLOATING_ATTR}]):not([${FLOATING_FORCED_ATTR}])) {\r\n            --awf-label-internal-font-color: var(--awf-label-hover-font-color-inner);\r\n        }\r\n\r\n        :host(:not([labelPosition='left'])):host(:not(:focus-within)):host([disabled])\r\n                                                                    ::slotted(label:not([${FLOATING_ATTR}]):not([${FLOATING_FORCED_ATTR}])) {\r\n            --awf-label-internal-font-color: var(--awf-label-disabled-font-color-inner);\r\n        }\r\n\r\n        /* label left */\r\n        :host([labelPosition='left']) ::slotted(label) {\r\n            --awf-label-internal-font-color: var(--awf-label-left-position-font-color-inner);\r\n            --awf-label-font-size: var(--awf-label-left-position-font-size-inner);\r\n            --awf-label-font-style: var(--awf-label-left-position-font-style-inner);\r\n            --awf-label-top: 0;\r\n            --awf-label-margin-top: var(--awf-label-left-position-margin-top-inner);\r\n            --awf-label-margin-bottom: var(--awf-label-left-position-margin-bottom-inner);\r\n\r\n            padding-right: 1rem;\r\n        }\r\n\r\n        :host([labelPosition='left']):host(:focus-within) ::slotted(label),\r\n        :host([labelPosition='left']) ::slotted(label[${FLOATING_FORCED_ATTR}]) {\r\n            --awf-label-internal-font-color: var(--awf-label-focus-font-color-inner);\r\n        }\r\n\r\n        :host([labelPosition='left']):host(:hover) ::slotted(label) {\r\n            --awf-label-internal-font-color: var(--awf-label-hover-font-color-inner);\r\n        }\r\n\r\n        :host([labelPosition='left']):host([disabled]) ::slotted(label) {\r\n            --awf-label-internal-font-color: var(--awf-label-disabled-font-color-inner);\r\n        }\r\n\r\n        /* label top */\r\n        :host(:not([labelPosition='left'])) ::slotted(label[${FLOATING_ATTR}]),\r\n        :host(:not([labelPosition='left'])) ::slotted(label[${FLOATING_FORCED_ATTR}]),\r\n        :host(:not([labelPosition='left'])):host(:focus-within) ::slotted(label) {\r\n            --awf-label-internal-font-color: var(--awf-label-top-position-font-color-inner);\r\n            --awf-label-font-size: var(--awf-label-top-position-font-size-inner);\r\n            --awf-label-font-style: var(--awf-label-top-position-font-style-inner);\r\n            --awf-label-padding-left: var(--awf-label-top-position-padding-left-inner);\r\n            --awf-label-padding-right: var(--awf-label-top-position-padding-right);\r\n            --awf-label-top: var(--awf-label-top-position-top-inner);\r\n        }\r\n\r\n        :host(:not([labelPosition='left'])):host(:focus-within) ::slotted(label),\r\n        :host(:not([labelPosition='left'])) ::slotted(label[${FLOATING_FORCED_ATTR}]) {\r\n            --awf-label-internal-font-color: var(--awf-label-focus-font-color-inner);\r\n        }\r\n\r\n        :host(:not([labelPosition='left'])):host(:hover) ::slotted(label[${FLOATING_ATTR}]),\r\n        :host(:not([labelPosition='left'])):host(:hover) ::slotted(label[${FLOATING_FORCED_ATTR}]) {\r\n            --awf-label-internal-font-color: var(--awf-label-hover-font-color-inner);\r\n        }\r\n\r\n        :host(:not([labelPosition='left'])):host([disabled]) ::slotted(label[${FLOATING_ATTR}]),\r\n        :host(:not([labelPosition='left'])):host([disabled]) ::slotted(label[${FLOATING_FORCED_ATTR}]) {\r\n            --awf-label-internal-font-color: var(--awf-label-disabled-font-color-inner);\r\n        }\r\n\r\n        ::slotted(label) {\r\n            box-sizing: border-box;\r\n            color: var(--awf-label-font-color, var(--awf-label-internal-font-color));\r\n            font-size: var(--awf-label-font-size);\r\n            font-style: var(--awf-label-font-style);\r\n            line-height: var(--awf-line-height-inner);\r\n            margin-left: var(--awf-label-margin-left);\r\n            margin-top: var(--awf-label-margin-top);\r\n            margin-bottom: var(--awf-label-margin-bottom);\r\n            padding-left: var(--awf-label-padding-left);\r\n            padding-right: var(--awf-label-padding-right);\r\n            position: relative;\r\n            top: var(--awf-label-top);\r\n            white-space: nowrap;\r\n            width: var(--awf-label-width);\r\n            user-select: none;\r\n        }\r\n\r\n        :host([required]) ::slotted(label)::after {\r\n            content: ' *';\r\n            color: var(--awf-label-font-color, var(--awf-label-internal-font-color));\r\n        }\r\n    `\r\n];\r\n//# sourceMappingURL=label.style.js.map","import { LabelPosition } from '../utils/label-position.enum';\r\nimport { FLOATING_ATTR, FLOATING_FORCED_ATTR } from './label.style';\r\n/**\r\n * Reactive controller that handles the positioning of the label.\r\n * You also need to add LABEL_STYLES from label.style.ts to the component's style property.\r\n */\r\nexport class LabelController {\r\n    get label() {\r\n        return this.host.slottedLabel[0];\r\n    }\r\n    constructor(host) {\r\n        this.host = host;\r\n        this._updateLabelPosition = () => { };\r\n        this._onFocusIn = () => { };\r\n        this._onFocusOut = () => { };\r\n        this._onLabelSlotChange = () => { };\r\n        this.host.addController(this);\r\n    }\r\n    async hostConnected() {\r\n        await this.host.updateComplete;\r\n        this.updateLabelFloatingAttribute();\r\n        this.updateLabelWidth();\r\n        this._updateLabelPosition = () => this.updateLabelFloatingAttribute();\r\n        this._onFocusIn = () => this.updateLabelWidthOnTop();\r\n        this._onFocusOut = () => this.updateLabelWidth();\r\n        this._onLabelSlotChange = () => this.updateLabelFloatingAttribute();\r\n        this.host.field.addEventListener('change', this._updateLabelPosition);\r\n        this.host.addEventListener('focusin', this._onFocusIn);\r\n        this.host.addEventListener('focusout', this._onFocusOut);\r\n        const slotLabel = this.host.shadowRoot?.querySelector('slot[name=label]');\r\n        slotLabel?.addEventListener('slotchange', this._onLabelSlotChange);\r\n    }\r\n    hostDisconnected() {\r\n        this.host.field?.removeEventListener('change', this._updateLabelPosition);\r\n        this.host.removeEventListener('focusin', this._onFocusIn);\r\n        this.host.removeEventListener('focusout', this._onFocusOut);\r\n        const slotLabel = this.host.shadowRoot?.querySelector('slot[name=label]');\r\n        slotLabel?.removeEventListener('slotchange', this._onLabelSlotChange);\r\n    }\r\n    hostUpdated() {\r\n        this.updateLabelWidth();\r\n    }\r\n    updateLabelFloatingAttribute() {\r\n        if (this.host.labelPosition === LabelPosition.Top && this.label) {\r\n            const hasValue = this.host.value.length > 0;\r\n            if (hasValue) {\r\n                this.label?.setAttribute(`${FLOATING_ATTR}`, '');\r\n            }\r\n            else {\r\n                this.label?.removeAttribute(`${FLOATING_ATTR}`);\r\n            }\r\n        }\r\n        if (this.label) {\r\n            this.host.classList.add('has-label');\r\n        }\r\n        else {\r\n            this.host.classList.remove('has-label');\r\n        }\r\n    }\r\n    updateLabelWidth() {\r\n        if (this.host.labelPosition === LabelPosition.Top) {\r\n            if (this.isLabelFloating()) {\r\n                this.updateLabelWidthOnTop();\r\n            }\r\n            else {\r\n                this.updateLabelWidthInside();\r\n            }\r\n        }\r\n        else {\r\n            this.label?.style.removeProperty('--awf-label-padding-left');\r\n            this.label?.style.removeProperty('--awf-label-width');\r\n        }\r\n    }\r\n    isLabelFloating() {\r\n        return !!this.label && (this.label.hasAttribute(`${FLOATING_ATTR}`) || this.label.hasAttribute(`${FLOATING_FORCED_ATTR}`));\r\n    }\r\n    updateLabelWidthInside() {\r\n        setTimeout(() => {\r\n            // Make sure the label position is still top when code is executed.\r\n            if (this.host.labelPosition === LabelPosition.Top) {\r\n                const fieldWidth = this.host.field.getBoundingClientRect().width;\r\n                const fieldPaddingRight = (getComputedStyle(this.host.field).paddingRight.match(/([0-9]+)/g) ?? ['0'])[0];\r\n                const fieldPaddingLeft = (getComputedStyle(this.host.field).paddingLeft.match(/([0-9]+)/g) ?? ['0'])[0];\r\n                const fieldLeftPosition = this.host.field.getBoundingClientRect().left;\r\n                const hostLeftPosition = this.host.getBoundingClientRect().left;\r\n                const labelMarginLeft = fieldLeftPosition - hostLeftPosition;\r\n                this.label?.style.setProperty('--awf-label-padding-left', `${fieldPaddingLeft}px`);\r\n                this.label?.style.setProperty('--awf-label-padding-right', `${fieldPaddingRight}px`);\r\n                this.label?.style.setProperty('--awf-label-margin-left', `${labelMarginLeft}px`);\r\n                this.label?.style.setProperty('--awf-label-width', `${fieldWidth}px`);\r\n            }\r\n        });\r\n    }\r\n    updateLabelWidthOnTop() {\r\n        setTimeout(() => {\r\n            if (this.host.labelPosition === LabelPosition.Top) {\r\n                this.label?.style.removeProperty('--awf-label-padding-left');\r\n                this.label?.style.removeProperty('--awf-label-padding-right');\r\n                this.label?.style.removeProperty('--awf-label-margin-left');\r\n                this.label?.style.setProperty('--awf-label-width', `${this.host.labelTopWidth}px`);\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=label.controller.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const TOOLTIP_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-tooltip-border-color-inner: var(--awf-tooltip-border-color, var(--at-gray));\r\n        --awf-tooltip-background-color-inner: var(--awf-tooltip-background-color, var(--at-white));\r\n        --awf-tooltip-text-color-inner: var(--awf-tooltip-text-color, var(--at-dark-gray));\r\n    }\r\n`;\r\n//# sourceMappingURL=tooltip.css-variables.styles.js.map","import { __decorate } from \"tslib\";\r\nimport { html, LitElement } from 'lit';\r\nimport { when } from 'lit-html/directives/when.js';\r\nimport { property, query } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { FloatingElementController } from '../../common/floating/floating-element.controller';\r\nimport { TOOLTIP_STYLES } from './tooltip.style';\r\nimport { TOOLTIP_CSS_VARIABLES } from './tooltip.css-variables.styles';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nlet AwfTooltip = class AwfTooltip extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.open = false;\r\n        this.tip = false;\r\n        this.disabled = false;\r\n        this.error = false;\r\n        this.warning = false;\r\n        this.appendToBody = false;\r\n        this.message = '';\r\n        this.offset = 8;\r\n        this.manualToggle = false;\r\n        this.defaultPlacement = 'top';\r\n        this.floatingElementPadding = 5;\r\n        this.controller = new FloatingElementController(this);\r\n        this._detectTouch = this.detectedAsTouchDevice.bind(this);\r\n        this._showTooltip = this.showTooltip.bind(this);\r\n        this._hideTooltip = this.hideTooltip.bind(this);\r\n        /** When true, the user initiated an action from a touch device: the tooltip must not raise */\r\n        this.touchDevice = false;\r\n    }\r\n    get floatingElement() {\r\n        return this;\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        if (!this.formerParent) {\r\n            this.formerParent = this.parentNode;\r\n        }\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        if (this.appendToBody) {\r\n            this.remove();\r\n        }\r\n    }\r\n    detectedAsTouchDevice() {\r\n        this.touchDevice = true;\r\n    }\r\n    showTooltip() {\r\n        if ((this.textContent || this.message) && !this.disabled && !this.touchDevice) {\r\n            this.cleanUp = this.controller.autoUpdatePosition();\r\n            this.open = true;\r\n        }\r\n    }\r\n    hideTooltip() {\r\n        this.open = false;\r\n        if (this.cleanUp) {\r\n            this.cleanUp();\r\n        }\r\n    }\r\n    render() {\r\n        return html `<p class='awf-tooltip-message'>${this.message}</p><slot></slot>${when(this.tip, this.createTip)}`;\r\n    }\r\n    async updated(_changedProperties) {\r\n        if (_changedProperties.has('trigger')) {\r\n            this.triggerUpdated(_changedProperties.get('trigger'));\r\n        }\r\n        if (_changedProperties.has('open')) {\r\n            this.openUpdated();\r\n        }\r\n        if (_changedProperties.has('appendToBody')) {\r\n            this.moveTooltip();\r\n        }\r\n    }\r\n    triggerUpdated(oldTrigger) {\r\n        if (this.trigger) {\r\n            this.refElement = this.formerParent?.querySelector(`#${this.trigger}`);\r\n            if (this.refElement && !this.manualToggle) {\r\n                this.refElement.addEventListener('touchstart', this._detectTouch);\r\n                this.refElement.addEventListener('mouseenter', this._showTooltip);\r\n                this.refElement.addEventListener('mouseleave', this._hideTooltip);\r\n            }\r\n        }\r\n        if (oldTrigger) {\r\n            const oldRefElement = this.formerParent?.querySelector(`#${oldTrigger}`);\r\n            if (oldRefElement) {\r\n                oldRefElement.removeEventListener('touchstart', this._detectTouch);\r\n                oldRefElement.removeEventListener('mouseenter', this._showTooltip);\r\n                oldRefElement.removeEventListener('mouseleave', this._hideTooltip);\r\n            }\r\n        }\r\n    }\r\n    openUpdated() {\r\n        if (this.open) {\r\n            this.showTooltip();\r\n        }\r\n        else {\r\n            this.hideTooltip();\r\n        }\r\n    }\r\n    createTip() {\r\n        return html `<div id=\"tip\"></div>`;\r\n    }\r\n    moveTooltip() {\r\n        this.remove();\r\n        if (this.appendToBody) {\r\n            document.body.appendChild(this);\r\n        }\r\n        else if (this.formerParent) {\r\n            this.formerParent.appendChild(this);\r\n        }\r\n    }\r\n};\r\nAwfTooltip.styles = [COMMON_STYLES, TOOLTIP_CSS_VARIABLES, TOOLTIP_STYLES];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfTooltip.prototype, \"open\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfTooltip.prototype, \"tip\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfTooltip.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfTooltip.prototype, \"error\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfTooltip.prototype, \"warning\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfTooltip.prototype, \"appendToBody\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfTooltip.prototype, \"placement\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfTooltip.prototype, \"message\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfTooltip.prototype, \"trigger\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfTooltip.prototype, \"offset\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfTooltip.prototype, \"manualToggle\", void 0);\r\n__decorate([\r\n    query('#tip')\r\n], AwfTooltip.prototype, \"tipElement\", void 0);\r\nAwfTooltip = __decorate([\r\n    customElement('awf-tooltip', true)\r\n], AwfTooltip);\r\nexport { AwfTooltip };\r\n//# sourceMappingURL=tooltip.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const INPUT_STYLES = css `\r\n    :host {\r\n        --awf-icon-size: var(--awf-input-icon-size-inner);\r\n\r\n        display: inline-flex;\r\n        min-width: var(--awf-input-width-inner);\r\n        box-sizing: border-box;\r\n        font-size: var(--awf-input-font-size-inner);\r\n    }\r\n\r\n    :host(:not([disabled]):not([warning]):not([error]):not([readonly]):hover) {\r\n        --awf-input-border-color-inner: var(--awf-input-hover-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-hover-font-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-hover-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host(:not([readonly])[focused]) {\r\n        --awf-input-border-color-inner: var(--awf-input-focus-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-focus-font-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-focus-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host(:not([readonly])[error]:focus-within) {\r\n        --awf-input-border-color-inner: var(--awf-input-error-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-error-font-color-inner);\r\n        --awf-input-background-color: var(--awf-input-error-focus-background-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-error-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host(:not([readonly])[warning]:focus-within) {\r\n        --awf-input-border-color-inner: var(--awf-input-warning-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-warning-font-color-inner);\r\n        --awf-input-background-color: var(--awf-input-warning-focus-background-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-warning-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host([disabled]) {\r\n        --awf-icon-color: var(--awf-input-icon-disabled-color-inner);\r\n        --awf-input-border-color-inner: var(--awf-input-disabled-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-disabled-font-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-disabled-placeholder-font-color-inner);\r\n\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    :host([warning]) {\r\n        --awf-input-prefix-suffix-text-color: var(--at-dark-navy);\r\n        --awf-input-background-color: var(--awf-input-warning-background-color-inner);\r\n        --awf-input-border-color-inner: var(--awf-input-warning-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-warning-font-color-inner);\r\n        --awf-input-placeholder-font-color: var(--at-gray-3q-dark);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-warning-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host([warning][disabled]) {\r\n        --awf-input-font-color-inner: var(--awf-input-disabled-font-color-inner);\r\n    }\r\n\r\n    :host([error]) {\r\n        --awf-input-prefix-suffix-text-color: var(--at-dark-navy);\r\n        --awf-input-background-color: var(--awf-input-error-background-color-inner);\r\n        --awf-input-border-color-inner: var(--awf-input-error-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-error-font-color-inner);\r\n        --awf-input-placeholder-font-color: var(--at-gray-3q-dark);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-error-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host([error][disabled]) {\r\n        --awf-input-font-color-inner: var(--awf-input-disabled-font-color-inner);\r\n    }\r\n\r\n    div#tooltipTrigger {\r\n        width:100%;\r\n        display: inline-flex;\r\n    }\r\n\r\n    :host(:not([labelPosition=left])) div#tooltipTrigger {\r\n        flex-direction: column;\r\n        display: inline-block;\r\n    }\r\n\r\n    :host(:not([labelPosition=left]).has-icon-prefix),\r\n    :host([labelPosition=left]:not(.has-label).has-icon-prefix) {\r\n        vertical-align: var(--awf-input-vertical-align-inner);\r\n    }\r\n\r\n    .alignment {\r\n        display: flex;\r\n        flex-direction: column;\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .colored-box {\r\n        align-items: flex-start;\r\n        background-color: var(--awf-input-background-color-inner);\r\n        border: 1px solid var(--awf-input-border-color-inner);\r\n        box-sizing: border-box;\r\n        display: grid;\r\n        grid-template-columns: auto 1fr auto;\r\n        grid-template-areas: \"prefix input suffix\";\r\n        height: var(--awf-input-height-inner);\r\n        position: relative;\r\n    }\r\n\r\n    .colored-box ::slotted([slot='prefix']) {\r\n        /* order has to be the first parameter to be taken into account correctly */\r\n        order: 1;\r\n        color: var(--awf-input-prefix-suffix-text-color-inner);\r\n        white-space: nowrap;\r\n        grid-area: prefix;\r\n    }\r\n\r\n    .colored-box ::slotted([slot='suffix']) {\r\n        /* order has to be the first parameter to be taken into account correctly */\r\n        order: 3;\r\n        color: var(--awf-input-prefix-suffix-text-color-inner);\r\n        white-space: nowrap;\r\n        grid-area: suffix;\r\n    }\r\n\r\n    .colored-box ::slotted(awf-icon[slot='prefix']) {\r\n        padding: 3px 0 3px 4px;\r\n    }\r\n\r\n    .colored-box ::slotted(awf-icon[slot='suffix']) {\r\n        padding: 3px 4px 3px 0;\r\n    }\r\n\r\n    .colored-box ::slotted(span[slot='suffix']),\r\n    .colored-box ::slotted(div[slot='suffix']) {\r\n        min-height: var(--awf-line-height-inner);\r\n        padding:  var(--awf-input-suffix-text-padding-inner);\r\n    }\r\n\r\n    .colored-box ::slotted(span[slot='prefix']),\r\n    .colored-box ::slotted(div[slot='prefix']) {\r\n        min-height: var(--awf-line-height-inner);\r\n        padding:  var(--awf-input-prefix-text-padding-inner);\r\n    }\r\n\r\n    /* Actual Input */\r\n    .colored-box ::slotted(input) {\r\n        order: 2; // Requires to be the first parameter to be taken into account correctly\r\n        font-family: inherit; // Required to override User Agent settings\r\n    }\r\n\r\n    ::slotted(input) {\r\n        background-color: transparent;\r\n        border: none;\r\n        box-sizing: border-box;\r\n        color: var(--awf-input-font-color-inner);\r\n        font-size: var(--awf-input-font-size-inner);\r\n        height: var(--awf-input-height-inner);\r\n        outline: none;\r\n        padding: var(--awf-input-padding-inner);\r\n        position: relative;\r\n        text-overflow: ellipsis;\r\n        width: var(--awf-input-width-inner);\r\n    }\r\n\r\n    ::slotted(input[disabled]) {\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    /* Placeholder */\r\n    ::slotted(input)::placeholder {\r\n        color: var(--awf-input-placeholder-color-inner);\r\n        font-size: var(--awf-input-font-size-inner);\r\n        font-style: italic;\r\n        padding-left: 1px;\r\n        text-align: left;\r\n        text-shadow: none;\r\n    }\r\n\r\n    :host([labelPosition='top']):not(:focus-within) ::slotted(input)::placeholder {\r\n        visibility: hidden;\r\n    }\r\n\r\n    /* Errors Slot */\r\n    .errors {\r\n        height: var(--awf-input-errors-height-inner);\r\n        overflow: hidden;\r\n        padding: 0 5px 0 2px;\r\n    }\r\n\r\n    ::slotted([error]) {\r\n        color: var(--awf-input-error-message-font-color-inner);\r\n        display: none;\r\n    }\r\n\r\n    ::slotted([slot='error']),\r\n    .internalError {\r\n        color: var(--awf-input-error-message-font-color-inner);\r\n        line-height: 16px;\r\n    }\r\n\r\n    /* first-child not working? */\r\n    ::slotted([error]:last-child) {\r\n        display: unset;\r\n    }\r\n\r\n    /* Start: Fix for Safari incompatibility on placeholder management. */\r\n    :host > input.slotted-input::placeholder {\r\n        --awf-icon-size: var(--awf-input-icon-size-inner);\r\n        --awf-input-border-color-inner: var(--awf-input-rest-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-rest-font-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-rest-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host(:not([disabled]):not([warning]):not([error]):not([readonly]):hover) > input.slotted-input::placeholder {\r\n        --awf-input-border-color-inner: var(--awf-input-hover-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-hover-font-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-hover-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host(:not([readonly]):focus-within) > input.slotted-input::placeholder {\r\n        --awf-input-border-color-inner: var(--awf-input-focus-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-focus-font-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-focus-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host(:not([readonly])[error]:focus-within) > input.slotted-input::placeholder {\r\n        --awf-input-border-color-inner: var(--awf-input-error-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-error-font-color-inner);\r\n        --awf-input-background-color: var(--awf-input-error-focus-background-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-error-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host(:not([readonly])[warning]:focus-within) > input.slotted-input::placeholder {\r\n        --awf-input-border-color-inner: var(--awf-input-warning-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-warning-font-color-inner);\r\n        --awf-input-background-color: var(--awf-input-warning-focus-background-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-warning-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host([disabled]) > input.slotted-input::placeholder {\r\n        --awf-input-border-color-inner: var(--awf-input-disabled-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-disabled-font-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-disabled-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host([warning]) > input.slotted-input::placeholder {\r\n        --awf-input-background-color: var(--awf-input-warning-background-color-inner);\r\n        --awf-input-border-color-inner: var(--awf-input-warning-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-warning-font-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-warning-placeholder-font-color-inner);\r\n    }\r\n\r\n    :host([error]) > input.slotted-input::placeholder {\r\n        --awf-input-background-color: var(--awf-input-error-background-color-inner);\r\n        --awf-input-border-color-inner: var(--awf-input-error-border-color-inner);\r\n        --awf-input-font-color-inner: var(--awf-input-error-font-color-inner);\r\n        --awf-input-placeholder-color-inner: var(--awf-input-error-placeholder-font-color-inner);\r\n    }\r\n    /* End: Fix for Safari incompatibility */\r\n`;\r\n//# sourceMappingURL=input.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\n/* eslint-disable no-shadow */\r\nimport { localized, msg } from '@lit/localize';\r\nimport { LitElement, html } from 'lit';\r\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\r\nimport { property, query, queryAssignedElements } from 'lit/decorators.js';\r\nimport { createRef, ref } from 'lit/directives/ref.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { FormValidationController } from '../../common/form-validation/form-validation.controller';\r\nimport { LabelController } from '../../common/label/label.controller';\r\nimport { LABEL_STYLE } from '../../common/label/label.style';\r\nimport { COMMON_STYLES, PLACEHOLDER_STYLE } from '../../common/style/common-styles';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller';\r\nimport { LabelPosition } from '../../common/utils/label-position.enum';\r\nimport { listenPropertyChange } from '../../common/utils/listen-property-change';\r\nimport { MessageLevel } from '../../common/utils/message-level.enum';\r\nimport { reflectAttributes } from '../../common/utils/util';\r\nimport '../tooltip/tooltip';\r\nimport { INPUT_CSS_VARIABLES } from './input.css-variables.styles';\r\nimport { INPUT_STYLES } from './input.styles';\r\nexport var InputType;\r\n(function (InputType) {\r\n    InputType[\"Text\"] = \"text\";\r\n    InputType[\"Number\"] = \"number\";\r\n})(InputType || (InputType = {}));\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/input-fields)\r\n */\r\nlet AwfInput = class AwfInput extends LitElement {\r\n    /** @ignore */\r\n    get field() {\r\n        return this.slottedInput[0];\r\n    }\r\n    /** @ignore */\r\n    get value() {\r\n        return this.field.value;\r\n    }\r\n    /** @ignore */\r\n    get labelTopWidth() {\r\n        return this.coloredBoxElement.getBoundingClientRect().width;\r\n    }\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * The position of the label.\r\n         */\r\n        this.labelPosition = LabelPosition.Top;\r\n        /**\r\n         * When <code>true</code>, error messages are displayed below the input.\r\n         * If <code>false</code>, error messages are displayed in a tooltip and there is no margin below the component.\r\n         */\r\n        this.messageBelow = false;\r\n        /**\r\n         * If true, this input will automatically be focused when loaded.\r\n         */\r\n        this.forceFocus = false;\r\n        /** @ignore */\r\n        this.hasForm = false;\r\n        this.isFocus = false;\r\n        this.slotRefs = {\r\n            error: createRef(),\r\n            warning: createRef(),\r\n        };\r\n        this.errorMessageMutationObserver = new MutationObserver(() => this.buildErrorWarningMessage());\r\n        this.warningMessageMutationObserver = new MutationObserver(() => this.buildErrorWarningMessage());\r\n        new LabelController(this);\r\n        this.formValidationController = new FormValidationController(this);\r\n        new ElementStyleController(this, [PLACEHOLDER_STYLE]);\r\n    }\r\n    render() {\r\n        return html `\r\n            <div id=\"tooltipTrigger\">\r\n                <slot name=\"label\" @slotchange=${this.slotChange}></slot>\r\n                <span class=\"alignment\" trigger>\r\n                    <span class=\"colored-box\">\r\n                        <slot name=\"prefix\" @slotchange=${this.onPrefixSuffixSlotChange}></slot>\r\n                        <slot @slotchange=${this.slotChange}></slot>\r\n                        <slot name=\"suffix\" @slotchange=${this.onPrefixSuffixSlotChange}></slot>\r\n                    </span>\r\n                    ${this.renderErrorSlot()}\r\n                </span>\r\n            </div>\r\n            <awf-tooltip offset=\"5\" placement=\"bottom\" tip trigger=\"tooltipTrigger\" manualToggle></awf-tooltip>\r\n        `;\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    formAssociatedCallback(form) {\r\n        this.formValidationController.formAssociatedCallback(form);\r\n    }\r\n    /** @inheritdoc */\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.subscription = awfTranslateService.onLangChange().subscribe(() => this.field.dispatchEvent(new FocusEvent('blur')));\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.field?.removeEventListener('input', this.onInput);\r\n        this.subscription?.unsubscribe();\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    validateValue() {\r\n        if (this.field) {\r\n            const validationFailed = this.field.validity.valueMissing;\r\n            if (validationFailed) {\r\n                this.setInternalMessage(MessageLevel.ERROR, msg('This field is required.'));\r\n            }\r\n            return !validationFailed;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    clearInternalErrorMessage() {\r\n        if (this.internalErrorMessage) {\r\n            this.internalErrorMessage.innerText = '';\r\n        }\r\n        if (this.tooltip.message) {\r\n            this.tooltip.message = '';\r\n            this.tooltip.hideTooltip();\r\n        }\r\n        this.buildErrorWarningMessage();\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    setInternalMessage(level, message) {\r\n        this.setAttribute(level, '');\r\n        this.tooltip.setAttribute(level, '');\r\n        if (this.messageBelow) {\r\n            this.slotRefs[level].value.style.display = 'block';\r\n            if (this.internalErrorMessage) {\r\n                this.internalErrorMessage.innerText = message;\r\n            }\r\n        }\r\n        else {\r\n            this.tooltip.disabled = false;\r\n            this.tooltip.message = message;\r\n        }\r\n    }\r\n    firstUpdated() {\r\n        const [input] = this.slottedInput;\r\n        if (!input) {\r\n            throw new Error('Input not found!');\r\n        }\r\n        input.addEventListener('focusin', () => this.setAttribute('focused', ''));\r\n        input.addEventListener('focusout', () => this.removeAttribute('focused'));\r\n        listenPropertyChange(this.field);\r\n        this.manuallyHandleTooltip(input);\r\n        if (this.forceFocus) {\r\n            this.updateComplete.then(() => this.field.focus());\r\n        }\r\n    }\r\n    updated(_changedProperties) {\r\n        if (_changedProperties.has('messageBelow')) {\r\n            this.tooltip.disabled = this.messageBelow;\r\n        }\r\n    }\r\n    renderErrorSlot() {\r\n        const style = this.messageBelow ? undefined : 'display: none;';\r\n        // prettier-ignore\r\n        const errorSlot = html `\r\n            <slot\r\n                name=\"error\"\r\n                style=${ifDefined(style)}\r\n                @slotchange=${this.onErrorMessageSlotChange}\r\n                ${ref(this.slotRefs.error)}>\r\n            </slot>\r\n        `;\r\n        // prettier-ignore\r\n        const warningSlot = html `\r\n            <slot\r\n                name=\"warning\"\r\n                style=${ifDefined(style)}\r\n                @slotchange=${this.onWarningMessageSlotChange}\r\n                ${ref(this.slotRefs.warning)}>\r\n            </slot>\r\n        `;\r\n        if (this.messageBelow) {\r\n            return html `\r\n                <div class=\"errors\">\r\n                    <div class=\"internalError\"></div>\r\n                    ${errorSlot}${warningSlot}\r\n                </div>\r\n            `;\r\n        }\r\n        return html `${errorSlot}${warningSlot}`;\r\n    }\r\n    slotChange() {\r\n        this.field.title = '';\r\n        this.field.classList.add('slotted-input');\r\n        if (this.slottedLabel.length > 0) {\r\n            this.field.classList.add('slotted-label');\r\n        }\r\n        else {\r\n            this.field.classList.remove('slotted-label');\r\n        }\r\n        this.updateMutationObserver();\r\n        this.requestUpdate();\r\n    }\r\n    getTooltipMessage(errors) {\r\n        return errors.map(e => e.innerText)[errors.length - 1];\r\n    }\r\n    onErrorMessageSlotChange() {\r\n        this.errorMessageMutationObserver.disconnect();\r\n        this.observeMessageChanges(this.slottedError, this.errorMessageMutationObserver);\r\n    }\r\n    onWarningMessageSlotChange() {\r\n        this.warningMessageMutationObserver.disconnect();\r\n        this.observeMessageChanges(this.slottedWarning, this.warningMessageMutationObserver);\r\n    }\r\n    observeMessageChanges(slottedMessages, observer) {\r\n        if (slottedMessages.length > 0) {\r\n            const options = { characterData: true, subtree: true };\r\n            observer.observe(slottedMessages[slottedMessages.length - 1], options);\r\n        }\r\n        this.buildErrorWarningMessage();\r\n    }\r\n    buildErrorWarningMessage() {\r\n        if (this.tooltip === null) {\r\n            return;\r\n        }\r\n        const levels = ['error', 'warning'];\r\n        levels.forEach(currentLevel => {\r\n            this.tooltip.removeAttribute(currentLevel);\r\n            this.removeAttribute(currentLevel);\r\n            this.slotRefs[currentLevel].value.style.display = 'none';\r\n        });\r\n        const messageElements = {};\r\n        messageElements['error'] = this.slottedError;\r\n        messageElements['warning'] = this.slottedWarning;\r\n        this.tooltip.disabled = true;\r\n        const level = levels.find(lvl => messageElements[lvl]?.length);\r\n        if (level) {\r\n            this.setAttribute(level, '');\r\n            this.tooltip.setAttribute(level, '');\r\n            if (this.messageBelow) {\r\n                this.slotRefs[level].value.style.display = 'block';\r\n                const messages = this.slotRefs[level].value.assignedElements({ flatten: true });\r\n                messages.forEach((message, index) => {\r\n                    if (index < messages.length - 1) {\r\n                        message.style.display = 'none';\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this.tooltip.disabled = false;\r\n                this.tooltip.message = this.getTooltipMessage(messageElements[level]);\r\n            }\r\n        }\r\n    }\r\n    updateMutationObserver() {\r\n        this.inputMutationObserver?.disconnect();\r\n        this.inputMutationObserver = reflectAttributes(this.field, this, ['type', 'disabled', 'required', 'readonly']);\r\n    }\r\n    onPrefixSuffixSlotChange() {\r\n        const hasIconPrefix = this.slottedPrefix[0]?.tagName.toLowerCase() === 'awf-icon';\r\n        if (hasIconPrefix) {\r\n            this.classList.add('has-icon-prefix');\r\n        }\r\n        else {\r\n            this.classList.remove('has-icon-prefix');\r\n        }\r\n        // Recompute label's position\r\n        this.requestUpdate();\r\n    }\r\n    manuallyHandleTooltip(input) {\r\n        input.addEventListener('input', this.onInput.bind(this));\r\n        input.addEventListener('focus', this.onInputFocus.bind(this));\r\n        input.addEventListener('blur', this.onInputBlur.bind(this));\r\n        input.addEventListener('mouseenter', this.onInputMouseEnter.bind(this));\r\n        input.addEventListener('mouseleave', this.onInputMouseLeave.bind(this));\r\n    }\r\n    onInput() {\r\n        this.tooltip.showTooltip();\r\n    }\r\n    onInputFocus() {\r\n        this.isFocus = true;\r\n        this.tooltip.showTooltip();\r\n    }\r\n    onInputBlur() {\r\n        this.isFocus = false;\r\n        this.tooltip.hideTooltip();\r\n    }\r\n    onInputMouseEnter() {\r\n        this.tooltip.showTooltip();\r\n    }\r\n    onInputMouseLeave() {\r\n        if (!this.isFocus) {\r\n            this.tooltip.hideTooltip();\r\n        }\r\n    }\r\n};\r\n/** @ignore */\r\nAwfInput.styles = [COMMON_STYLES, INPUT_CSS_VARIABLES, INPUT_STYLES, LABEL_STYLE];\r\n/** @ignore */\r\nAwfInput.formAssociated = true;\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfInput.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInput.prototype, \"messageBelow\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInput.prototype, \"forceFocus\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: 'label', selector: 'label', flatten: true })\r\n], AwfInput.prototype, \"slottedLabel\", void 0);\r\n__decorate([\r\n    query('.colored-box')\r\n], AwfInput.prototype, \"coloredBoxElement\", void 0);\r\n__decorate([\r\n    query('awf-tooltip')\r\n], AwfInput.prototype, \"tooltip\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'input', flatten: true })\r\n], AwfInput.prototype, \"slottedInput\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: 'error', flatten: true, selector: 'div,span' })\r\n], AwfInput.prototype, \"slottedError\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: 'warning', flatten: true, selector: 'div,span' })\r\n], AwfInput.prototype, \"slottedWarning\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: 'prefix', flatten: true })\r\n], AwfInput.prototype, \"slottedPrefix\", void 0);\r\n__decorate([\r\n    query('.internalError')\r\n], AwfInput.prototype, \"internalErrorMessage\", void 0);\r\nAwfInput = __decorate([\r\n    localized(),\r\n    customElement('awf-input', true)\r\n], AwfInput);\r\nexport { AwfInput };\r\n//# sourceMappingURL=input.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { msg } from '@lit/localize';\r\nimport { html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { Status, STATUS_COLOR_MAPPING } from '../../common/utils/status.enum';\r\nimport { INSTRUMENT_STATUS_STYLES } from './instrument-status.styles';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/status-communication/instrument-status)\r\n */\r\nlet AwfInstrumentStatus = class AwfInstrumentStatus extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The status of the instrument.\r\n         * The status is <code>Offline</code> by default.\r\n         */\r\n        this.status = Status.OFFLINE;\r\n        /**\r\n         * If true, the status bar is collapsed and otherwise extended.\r\n         * This is only applicable in desktop layout.\r\n         */\r\n        this.collapsed = false;\r\n    }\r\n    render() {\r\n        this.determineColors();\r\n        return html `<span>${this.getLocalizedLabel()}</span> `;\r\n    }\r\n    determineColors() {\r\n        const statusColor = STATUS_COLOR_MAPPING.get(this.status) ?? 'var(--at-violet)';\r\n        let labelColor;\r\n        switch (this.status) {\r\n            case Status.NOT_READY:\r\n            case Status.WARNING:\r\n            case Status.OFFLINE:\r\n            case Status.STANDBY:\r\n            case Status.READY:\r\n            case Status.IDLE:\r\n                labelColor = 'var(--at-dark-navy)';\r\n                break;\r\n            default:\r\n                labelColor = 'var(--at-white)';\r\n        }\r\n        this.style.setProperty('--awf-instrument-status-color', statusColor);\r\n        this.style.setProperty('--awf-instrument-status-label-color', labelColor);\r\n    }\r\n    getLocalizedLabel() {\r\n        let label;\r\n        switch (this.status) {\r\n            case Status.IDLE:\r\n                label = msg('Idle');\r\n                break;\r\n            case Status.READY:\r\n                label = msg('Ready');\r\n                break;\r\n            case Status.PRERUN:\r\n                label = msg('Pre-Run');\r\n                break;\r\n            case Status.TUNE:\r\n                label = msg('Tune');\r\n                break;\r\n            case Status.ACQUIRING:\r\n                label = msg('Acquiring');\r\n                break;\r\n            case Status.RUNNING:\r\n                label = msg('Running');\r\n                break;\r\n            case Status.INJECTING:\r\n                label = msg('Injecting');\r\n                break;\r\n            case Status.NOT_READY:\r\n                label = msg('Not Ready');\r\n                break;\r\n            case Status.WARNING:\r\n                label = msg('Warning');\r\n                break;\r\n            case Status.ERROR:\r\n                label = msg('Error');\r\n                break;\r\n            case Status.STANDBY:\r\n                label = msg('Standby');\r\n                break;\r\n            case Status.OFFLINE:\r\n                label = msg('Offline');\r\n                break;\r\n            case Status.POST_RUN:\r\n                label = msg('Post-Run');\r\n                break;\r\n            default:\r\n                label = '';\r\n        }\r\n        return label;\r\n    }\r\n};\r\nAwfInstrumentStatus.styles = [COMMON_STYLES, INSTRUMENT_STATUS_STYLES];\r\n__decorate([\r\n    property()\r\n], AwfInstrumentStatus.prototype, \"status\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInstrumentStatus.prototype, \"collapsed\", void 0);\r\nAwfInstrumentStatus = __decorate([\r\n    customElement('awf-instrument-status', true)\r\n], AwfInstrumentStatus);\r\nexport { AwfInstrumentStatus };\r\n//# sourceMappingURL=instrument-status.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const LIST_OPTION_CSS_VARIABLES = css `\r\n    :host {\r\n        /* List Option Density Related */\r\n        --awf-list-option-font-size-inner: var(--awf-list-option-font-size, 14px);\r\n        --awf-list-option-height-inner: var(--awf-list-option-height, 21px);\r\n    }\r\n`;\r\n//# sourceMappingURL=list-options.css-variables.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\n/* eslint-disable wc/guard-super-call */\r\nimport { html, LitElement } from 'lit';\r\nimport { when } from 'lit-html/directives/when.js';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { LABEL_CSS_VARIABLES } from '../../common/label/label.css-variables.styles';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { createCustomEvent } from '../../common/utils/util';\r\nimport { LIST_OPTION_STYLES } from './list-option.styles';\r\nimport { LIST_OPTION_CSS_VARIABLES } from './list-options.css-variables.styles';\r\nlet AwfListOption = class AwfListOption extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * When true, the option is selected.\r\n         */\r\n        this.selected = false;\r\n        /*\r\n         * When true, the option is focused.\r\n         */\r\n        this.focused = false;\r\n        /**\r\n         * When true, no checkbox is displayed.\r\n         */\r\n        this.noCheckbox = false;\r\n        /*\r\n         * When true, the option is not visible.\r\n         */\r\n        this.hidden = false;\r\n        /*\r\n         * When true, the option is not clickable.\r\n         */\r\n        this.disabled = false;\r\n        this._onMouseEnter = () => this.dispatchEvent(createCustomEvent('listOptionMouseEnter'));\r\n        this._onClick = (event) => {\r\n            if (!this.disabled) {\r\n                this.dispatchEvent(createCustomEvent('listOptionClick'));\r\n            }\r\n            else {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n        };\r\n    }\r\n    static get styles() {\r\n        return [COMMON_STYLES, LABEL_CSS_VARIABLES, LIST_OPTION_CSS_VARIABLES, LIST_OPTION_STYLES];\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        if (this.disabled) {\r\n            this.tabIndex = -1;\r\n        }\r\n        else {\r\n            this.tabIndex = 0;\r\n        }\r\n        this.addEventListener('mouseenter', this._onMouseEnter);\r\n        this.addEventListener('click', this._onClick);\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.removeEventListener('mouseenter', this._onMouseEnter);\r\n        this.removeEventListener('click', this._onClick);\r\n    }\r\n    render() {\r\n        const checkbox = html `<awf-checkbox><input tabindex=\"-1\" type=\"checkbox\" ?checked=${this.selected} /></awf-checkbox>`;\r\n        return html `\r\n            ${when(!this.noCheckbox, () => checkbox)}\r\n            <slot></slot>\r\n            <slot name=\"suffix\"></slot>\r\n        `;\r\n    }\r\n};\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfListOption.prototype, \"selected\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfListOption.prototype, \"focused\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfListOption.prototype, \"noCheckbox\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfListOption.prototype, \"hidden\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfListOption.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfListOption.prototype, \"value\", void 0);\r\nAwfListOption = __decorate([\r\n    customElement('awf-list-option', true)\r\n], AwfListOption);\r\nexport { AwfListOption };\r\n//# sourceMappingURL=list-option.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const NOTIFICATION_BUBBLE_STYLES = css `\r\n    :host {\r\n        position: relative;\r\n        display: inline-block;\r\n        height: 24px;\r\n    }\r\n\r\n    .notification-bubble {\r\n        height: 16px;\r\n        width: 16px;\r\n        position: absolute;\r\n        top: 10px;\r\n        left: 12px;\r\n        display: inline-flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        background-color: var(--awf-notification-bubble-background-color-inner);\r\n        border: 1px solid var(--awf-notification-bubble-stroke-color-inner);\r\n        border-radius: 16px;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .notification-bubble.extended {\r\n        width: 24px;\r\n    }\r\n\r\n    .value {\r\n        font-size: 10px;\r\n        height: 10px;\r\n        line-height: 10px;\r\n        color: var(--at-white);\r\n    }\r\n`;\r\n//# sourceMappingURL=notification-bubble.styles.js.map","/*\r\n * © Agilent Technologies, Inc. 2022.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { html, LitElement } from 'lit';\r\nimport { classMap } from 'lit-html/directives/class-map.js';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { NOTIFICATION_BUBBLES_CSS_VARIABLES } from './notification-bubble.css-variables.styles';\r\nimport { NOTIFICATION_BUBBLE_STYLES } from './notification-bubble.styles';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/status-communication/notification-bubble)\r\n */\r\nlet AwfNotificationBubble = class AwfNotificationBubble extends LitElement {\r\n    render() {\r\n        const extended = !!this.value && this.value > 9;\r\n        return html `\r\n            <slot></slot>\r\n            <div class=\"notification-bubble ${classMap({ extended })}\">\r\n                <span class=\"value\">${this.determineDisplayValue()}</span>\r\n            </div>\r\n        `;\r\n    }\r\n    firstUpdated() {\r\n        this.moveIconIntoElement();\r\n    }\r\n    determineDisplayValue() {\r\n        let displayValue = '';\r\n        if (this.value !== undefined) {\r\n            displayValue = `${this.value}`;\r\n            if (this.value > 99) {\r\n                displayValue = `99+`;\r\n            }\r\n        }\r\n        return displayValue;\r\n    }\r\n    moveIconIntoElement() {\r\n        if (this.for) {\r\n            const icon = document.querySelector(`#${this.for}`);\r\n            if (!icon) {\r\n                throw new Error('Icon not found!');\r\n            }\r\n            this.append(icon);\r\n        }\r\n    }\r\n};\r\nAwfNotificationBubble.styles = [COMMON_STYLES, NOTIFICATION_BUBBLES_CSS_VARIABLES, NOTIFICATION_BUBBLE_STYLES];\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfNotificationBubble.prototype, \"value\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfNotificationBubble.prototype, \"for\", void 0);\r\nAwfNotificationBubble = __decorate([\r\n    customElement('awf-notification-bubble', true)\r\n], AwfNotificationBubble);\r\nexport { AwfNotificationBubble };\r\n//# sourceMappingURL=notification-bubble.js.map","import { __decorate } from \"tslib\";\r\nimport { css, html, LitElement } from 'lit';\r\nimport { when } from 'lit-html/directives/when.js';\r\nimport { property, query } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { FloatingElementController } from '../../common/floating/floating-element.controller';\r\nimport { dispatchCustomEvent } from '../../common/utils/util';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nlet AwfOverlay = class AwfOverlay extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.disabled = false;\r\n        this.open = false;\r\n        this.tip = false;\r\n        this.appendToBody = false;\r\n        this.offset = 16;\r\n        this.manualToggle = false;\r\n        this.floatingElementPadding = 0;\r\n        this.defaultPlacement = 'bottom';\r\n        this.controller = new FloatingElementController(this);\r\n        this.closeOverlay = (event) => {\r\n            if (!this.isInEventPath(event)) {\r\n                this.hide();\r\n            }\r\n        };\r\n        this._toggle = this.toggle.bind(this);\r\n        this.dispatchCustomEvent = dispatchCustomEvent.bind(this);\r\n    }\r\n    get floatingElement() {\r\n        return this;\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        document.addEventListener('click', this.closeOverlay);\r\n        if (!this.formerParent) {\r\n            this.formerParent = this.parentNode;\r\n        }\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        document.removeEventListener('click', this.closeOverlay);\r\n        if (this.appendToBody) {\r\n            this.remove();\r\n        }\r\n    }\r\n    toggle() {\r\n        if (this.open) {\r\n            this.hide();\r\n        }\r\n        else {\r\n            this.show();\r\n        }\r\n    }\r\n    show() {\r\n        if (!this.disabled && !this.open) {\r\n            this.cleanUp = this.controller.autoUpdatePosition();\r\n            this.open = true;\r\n            Array.from(this.children).forEach(child => child.setAttribute('awf-overlay-open', ''));\r\n            this.dispatchCustomEvent(AwfEvent.OPEN);\r\n        }\r\n    }\r\n    hide() {\r\n        if (this.open) {\r\n            this.open = false;\r\n            Array.from(this.children).forEach(child => child.removeAttribute('awf-overlay-open'));\r\n            this.dispatchCustomEvent(AwfEvent.CLOSE);\r\n            if (this.cleanUp) {\r\n                this.cleanUp();\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return html `<slot></slot>${when(this.tip, this.createTip)}`;\r\n    }\r\n    updated(_changedProperties) {\r\n        if (_changedProperties.has('appendToBody')) {\r\n            this.moveOverlay();\r\n        }\r\n        if (_changedProperties.has('trigger')) {\r\n            if (this.trigger) {\r\n                this.refElement = this.formerParent?.querySelector(`#${this.trigger}`);\r\n                if (this.refElement && !this.manualToggle) {\r\n                    this.refElement.addEventListener('click', this._toggle);\r\n                }\r\n            }\r\n            if (_changedProperties.get('trigger')) {\r\n                const oldRefElement = this.formerParent?.querySelector(`#${_changedProperties.get('trigger')}`);\r\n                if (oldRefElement) {\r\n                    oldRefElement.removeEventListener('click', this._toggle);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    createTip() {\r\n        return html `<div id=\"tip\"></div>`;\r\n    }\r\n    isInEventPath(event) {\r\n        const path = event.composedPath().filter(e => e instanceof HTMLElement);\r\n        return !!path.find(e => e === this || e === this.refElement);\r\n    }\r\n    moveOverlay() {\r\n        this.remove();\r\n        if (this.appendToBody) {\r\n            document.body.appendChild(this);\r\n        }\r\n        else if (this.formerParent) {\r\n            this.formerParent.appendChild(this);\r\n        }\r\n    }\r\n};\r\nAwfOverlay.styles = [COMMON_STYLES, css `\r\n            :host {\r\n                background-color: var(--at-white);\r\n                box-shadow: 0 0 4px 0.1px var(--at-gray);\r\n                display: block;\r\n                opacity: 0;\r\n                padding: 10px;\r\n                position: absolute;\r\n                visibility: hidden;\r\n                z-index: var(--awf-elevation-z5);\r\n            }\r\n\r\n            :host([open]) {\r\n                opacity: 1;\r\n                transition: opacity 0.1s ease-in-out;\r\n                visibility: visible;\r\n            }\r\n\r\n            #tip {\r\n                background-color: var(--at-white);\r\n                height: 16px;\r\n                position: absolute;\r\n                transform: rotate(45deg);\r\n                width: 16px;\r\n                z-index: var( --awf-elevation-z1);\r\n            }\r\n        `];\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfOverlay.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfOverlay.prototype, \"open\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfOverlay.prototype, \"tip\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfOverlay.prototype, \"appendToBody\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfOverlay.prototype, \"offset\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfOverlay.prototype, \"placement\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfOverlay.prototype, \"trigger\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfOverlay.prototype, \"manualToggle\", void 0);\r\n__decorate([\r\n    query('#tip')\r\n], AwfOverlay.prototype, \"tipElement\", void 0);\r\nAwfOverlay = __decorate([\r\n    customElement('awf-overlay', true)\r\n], AwfOverlay);\r\nexport { AwfOverlay };\r\n//# sourceMappingURL=overlay.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { html, LitElement } from 'lit';\r\nimport { property, query, queryAssignedElements } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller';\r\nimport { listenPropertyChange } from '../../common/utils/listen-property-change';\r\nimport { PROGRESS_BAR_STYLES } from './progress-bar.styles';\r\nlet AwfProgressBar = class AwfProgressBar extends LitElement {\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * If true, then the current value of the progress bar is displayed in a label.\r\n         */\r\n        this.withLabel = false;\r\n        new ElementStyleController(this, [`\r\n            progress::-webkit-progress-bar {\r\n                background-color: var(--at-gray-extra-pale);\r\n            }\r\n            progress::-webkit-progress-value {\r\n                background-color: var(--at-periwinkle);\r\n                transition: width 0.6s ease;\r\n            }\r\n            progress::-moz-progress-bar {\r\n                background-color: var(--at-periwinkle);\r\n            }\r\n        `]);\r\n    }\r\n    render() {\r\n        return html `\r\n            ${this.showLabel()}\r\n            <slot @change=\"${this.handleLabel}\"></slot>\r\n        `;\r\n    }\r\n    firstUpdated() {\r\n        const [progress] = this.slottedProgress;\r\n        this.setProgress(progress);\r\n        listenPropertyChange(this.progress);\r\n    }\r\n    updated(changedProperties) {\r\n        if (changedProperties.has('withLabel')) {\r\n            this.handleLabel();\r\n        }\r\n    }\r\n    showLabel() {\r\n        return this.withLabel ? html `<label></label>` : html ``;\r\n    }\r\n    handleLabel() {\r\n        if (this.withLabel) {\r\n            const share = this.progress.value / this.progress.max;\r\n            this.setLabelText(share);\r\n            this.positionLabel(share);\r\n        }\r\n    }\r\n    setLabelText(share) {\r\n        const label = `${Math.round(share * 100)} %`;\r\n        this.label.innerHTML = label;\r\n    }\r\n    positionLabel(share) {\r\n        let position = this.progress.offsetWidth * share * 0.5 - this.label.offsetWidth / 2;\r\n        let color = 'var(--at-white)';\r\n        if (position < 0) {\r\n            position = this.progress.offsetWidth / 2 - this.label.offsetWidth / 2;\r\n            color = 'var(--at-black)';\r\n        }\r\n        this.label.style.left = `${position}px`;\r\n        this.label.style.color = color;\r\n    }\r\n    setProgress(progress) {\r\n        if (!progress) {\r\n            throw new Error('Progress not found!');\r\n        }\r\n        this.progress = progress;\r\n    }\r\n};\r\nAwfProgressBar.styles = [COMMON_STYLES, PROGRESS_BAR_STYLES];\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfProgressBar.prototype, \"withLabel\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'progress' })\r\n], AwfProgressBar.prototype, \"slottedProgress\", void 0);\r\n__decorate([\r\n    query('label')\r\n], AwfProgressBar.prototype, \"label\", void 0);\r\nAwfProgressBar = __decorate([\r\n    customElement('awf-progress-bar', true)\r\n], AwfProgressBar);\r\nexport { AwfProgressBar };\r\n//# sourceMappingURL=progress-bar.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const SIDEPANEL_STYLES = css `\r\n    :host {\r\n        --box-shadow-blur-radius: 10px;\r\n\r\n        position: fixed;\r\n        top: 0;\r\n        width: var(--awf-sidepanel-width-inner);\r\n        min-width: 18rem;\r\n        height: 100vh;\r\n        display: flex;\r\n        flex-direction: column;\r\n        box-sizing: border-box;\r\n        overflow: hidden;\r\n        background-color: var(--at-white);\r\n        color: var(--awf-sidepanel-font-color-inner);\r\n        box-shadow: 0 4px var(--box-shadow-blur-radius) #00000040;\r\n        border: 0;\r\n        visibility: hidden;\r\n        transition: transform var(--transition-duration) var(--transition-timing-function);\r\n        z-index: var(--awf-elevation-z3);\r\n    }\r\n\r\n    :host([opened]) {\r\n        border: 1px solid var(--at-gray-light);\r\n        visibility: visible;\r\n    }\r\n\r\n    :host([opened][alignment='left']) {\r\n        transform: translateX(calc(var(--awf-sidepanel-width-inner) + var(--box-shadow-blur-radius)));\r\n    }\r\n\r\n    :host([opened][alignment='right']) {\r\n        transform: translateX(calc(-1 * (var(--awf-sidepanel-width-inner) + var(--box-shadow-blur-radius))));\r\n    }\r\n\r\n    :host([alignment='left']) {\r\n        left: calc(-1 * (var(--awf-sidepanel-width-inner) + var(--box-shadow-blur-radius)));\r\n    }\r\n\r\n    :host([alignment='right']) {\r\n        right: calc(-1 * (var(--awf-sidepanel-width-inner) + var(--box-shadow-blur-radius)));\r\n    }\r\n\r\n    .header {\r\n        flex-grow: 0;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        min-height: 40px;\r\n        box-sizing: border-box;\r\n        white-space: nowrap;\r\n        border-bottom: 1px solid var(--awf-sidepanel-header-border-bottom-color-inner);\r\n        background: var(--awf-sidepanel-header-background-color-inner);\r\n    }\r\n\r\n    slot[name='title'] {\r\n        display: flex;\r\n        min-width: 0;\r\n        height: 100%;\r\n        align-items: center;\r\n        justify-content: left;\r\n        flex: 1 1 0%;\r\n    }\r\n\r\n    slot[name='title'] > .simple-header {\r\n        padding-left: 16px;\r\n        font-size: 1.375rem;\r\n        font-weight: 400;\r\n        overflow: hidden;\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n        flex: 1;\r\n    }\r\n\r\n    .close-button {\r\n        padding: 4px;\r\n    }\r\n\r\n    .awf-sidepanel-content {\r\n        width: 100%;\r\n        min-width: inherit;\r\n        box-sizing: border-box;\r\n        overflow: auto;\r\n        flex-grow: 1;\r\n    }\r\n\r\n    ::slotted([slot='footer']) {\r\n        border-top: 1px solid var(--awf-sidepanel-footer-border-top-color-inner);\r\n        background: var(--awf-sidepanel-footer-background-color-inner);\r\n        min-height: 40px;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    ::slotted(awf-button) {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        padding: 4px;\r\n    }\r\n\r\n    ::slotted(awf-button),\r\n    awf-button {\r\n        --awf-button-icon-only-background: var(--awf-sidepanel-button-background-inner);\r\n        --awf-button-icon-only-hover-background: var(--awf-sidepanel-button-hover-background-inner);\r\n        --awf-button-icon-only-active-background: var(--awf-sidepanel-button-active-background-inner);\r\n        --awf-button-icon-only-active-foreground: var(--awf-sidepanel-button-active-font-color-inner);\r\n        --awf-button-background: var(--awf-sidepanel-button-background-inner);\r\n        --awf-button-border: 1px solid var(--awf-sidepanel-button-background-inner);\r\n        --awf-button-font-color: var(--awf-sidepanel-button-font-color-inner);\r\n        --awf-button-hover-background: var(--awf-sidepanel-button-hover-background-inner);\r\n        --awf-button-hover-border: 1px solid var(--awf-sidepanel-button-hover-background-inner);\r\n        --awf-button-hover-font-color: var(--awf-sidepanel-button-hover-font-color-inner);\r\n        --awf-button-active-background: var(--awf-sidepanel-button-active-background-inner);\r\n        --awf-button-active-border: 1px solid var(--awf-sidepanel-button-active-background-inner);\r\n        --awf-button-active-font-color: var(--awf-sidepanel-button-active-font-color-inner);\r\n    }\r\n\r\n    /* Scrollbar */\r\n    /* Width */\r\n    ::-webkit-scrollbar {\r\n        background: transparent;\r\n        width: 10px;\r\n        height: 10px;\r\n    }\r\n\r\n    /* Track */\r\n    ::-webkit-scrollbar-track {\r\n        background: transparent;\r\n        background-clip: padding-box;\r\n        border: 2px solid transparent;\r\n        border-radius: 19px;\r\n    }\r\n\r\n    /* Handle thumb */\r\n    ::-webkit-scrollbar-thumb {\r\n        background: #c1c6c899;\r\n        background-clip: padding-box;\r\n        border: 2px solid transparent;\r\n        border-radius: 19px;\r\n    }\r\n\r\n    /* Handle on hover */\r\n    ::-webkit-scrollbar-thumb:hover {\r\n        background: #a1a7af99;\r\n        background-clip: padding-box;\r\n        border: 2px solid transparent;\r\n        border-radius: 19px;\r\n    }\r\n\r\n    /* Handle on active state */\r\n    ::-webkit-scrollbar-thumb:active {\r\n        background: #848e9999;\r\n        background-clip: padding-box;\r\n        border: 2px solid transparent;\r\n        border-radius: 19px;\r\n    }\r\n\r\n    /* Firefox scrollbar */\r\n    * {\r\n        scrollbar-color: #c1c6c899 transparent;\r\n        scrollbar-width: thin;\r\n    }\r\n`;\r\n//# sourceMappingURL=sidepanel.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agDeleteCross } from '@agilent/web-icons/core';\r\nimport { html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { dispatchCustomEvent, isInEventPath } from '../../common/utils/util';\r\nimport { AwfButton } from '../button/button';\r\nimport { SIDEPANEL_CSS_VARIABLES } from './sidepanel.css-variables.styles';\r\nimport { SIDEPANEL_STYLES } from './sidepanel.styles';\r\n// eslint-disable-next-line no-shadow\r\nexport var PanelAlignment;\r\n(function (PanelAlignment) {\r\n    PanelAlignment[\"LEFT\"] = \"left\";\r\n    PanelAlignment[\"RIGHT\"] = \"right\";\r\n})(PanelAlignment || (PanelAlignment = {}));\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/structure/sidepanels)\r\n */\r\nlet AwfSidePanel = class AwfSidePanel extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * A boolean property that indicates whether the side panel is opened or closed.\r\n         */\r\n        this.opened = false;\r\n        /**\r\n         * The alignment of the side panel on the page: <code>left</code> or <code>right</code>.\r\n         */\r\n        this.alignment = PanelAlignment.LEFT;\r\n        /**\r\n         * The title in the header of the side panel.\r\n         */\r\n        this.header = '';\r\n        /**\r\n         * The identifier to trigger/toggle the sidepanel.\r\n         */\r\n        this.identifier = 'side-panel';\r\n        this.dispatchCustomEvent = dispatchCustomEvent.bind(this);\r\n        this.handleClick = (event) => {\r\n            if (isInEventPath(event, this.tagName)) {\r\n                return;\r\n            }\r\n            if (isInEventPath(event, `[${this.identifier}-trigger]`)) {\r\n                this.open();\r\n                return;\r\n            }\r\n            if (isInEventPath(event, `[${this.identifier}-toggle]`)) {\r\n                this.toggle();\r\n                return;\r\n            }\r\n            this.close();\r\n        };\r\n    }\r\n    /**\r\n     * Opens the side panel if it is closed and closes the side panel if it is open.\r\n     */\r\n    toggle() {\r\n        this.opened ? this.close() : this.open();\r\n    }\r\n    /**\r\n     * Opens the side panel.\r\n     */\r\n    open() {\r\n        this.opened = true;\r\n    }\r\n    /**\r\n     * Closes the side panel.\r\n     */\r\n    close() {\r\n        this.opened = false;\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        document.addEventListener('click', this.handleClick);\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        document.removeEventListener('click', this.handleClick);\r\n    }\r\n    render() {\r\n        return html `\r\n            <div class=\"header\">\r\n                <slot name=\"title\">\r\n                    <div class=\"simple-header\">${this.header}</div>\r\n                </slot>\r\n                <slot name=\"context\"></slot>\r\n                <awf-button aria-label=\"close\" class=\"close-button\" @click=${this.close}>\r\n                    <awf-icon raw=${agDeleteCross} slot=\"icon\"></awf-icon>\r\n                </awf-button>\r\n            </div>\r\n            <div class=\"awf-sidepanel-content\">\r\n                <slot name=\"content\"></slot>\r\n            </div>\r\n            <slot name=\"footer\"></slot>\r\n        `;\r\n    }\r\n    updated(changes) {\r\n        if (changes.has('opened')) {\r\n            if (this.opened) {\r\n                this.disableTrigger();\r\n                this.dispatchCustomEvent(AwfEvent.OPEN);\r\n            }\r\n            else {\r\n                this.enableTrigger();\r\n                this.dispatchCustomEvent(AwfEvent.CLOSE);\r\n            }\r\n        }\r\n    }\r\n    enableTrigger() {\r\n        const trigger = document.querySelector(`[${this.identifier}-trigger]`);\r\n        if (trigger instanceof AwfButton) {\r\n            trigger.disabled = false;\r\n        }\r\n    }\r\n    disableTrigger() {\r\n        const trigger = document.querySelector(`[${this.identifier}-trigger]`);\r\n        if (trigger instanceof AwfButton) {\r\n            trigger.disabled = true;\r\n        }\r\n    }\r\n};\r\nAwfSidePanel.styles = [COMMON_STYLES, SIDEPANEL_CSS_VARIABLES, SIDEPANEL_STYLES];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSidePanel.prototype, \"opened\", void 0);\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfSidePanel.prototype, \"alignment\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfSidePanel.prototype, \"header\", void 0);\r\nAwfSidePanel = __decorate([\r\n    customElement('awf-sidepanel', true)\r\n], AwfSidePanel);\r\nexport { AwfSidePanel };\r\n//# sourceMappingURL=sidepanel.js.map","/*\r\n * © Agilent Technologies, Inc. 2024.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { moveElementsIntoSlot } from '../../common/utils/util';\r\nimport { AwfButton } from '../../atoms/button/button';\r\nexport function slotChange() {\r\n    const selector = 'slot:not([name])';\r\n    const target = this.shadowRoot.querySelector(selector);\r\n    if (target) {\r\n        moveElementsIntoSlot(target, '[actions]', 'actions');\r\n    }\r\n}\r\nexport function getButtonText(button) {\r\n    const [textNode] = Array.from(button.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);\r\n    return textNode.textContent;\r\n}\r\nexport function getEventType(text) {\r\n    return text.replace(' ', '').toLowerCase();\r\n}\r\nexport function handleActionButtonClick(event) {\r\n    if (event.target instanceof AwfButton) {\r\n        const text = getButtonText(event.target);\r\n        if (text) {\r\n            const type = getEventType(text);\r\n            const customEvent = new CustomEvent(type, { bubbles: true, composed: true });\r\n            this.dispatchEvent(customEvent);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=modal-utils.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2024.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agDeleteCross } from '@agilent/web-icons/core';\r\nimport { html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { BUTTON_CSS_VARIABLES } from '../../atoms/button/button.css-variables.styles.js';\r\nimport '../../atoms/button/button.js';\r\nimport '../../atoms/icon/icon.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element.js';\r\nimport { AwfEvent } from '../../common/events/events.enum.js';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles.js';\r\nimport { moveElementsIntoSlot } from '../../common/utils/util.js';\r\nimport { MODAL_DIALOG_CSS_VARIABLES } from '../modal/modal-dialog.css-variables.styles.js';\r\nimport { handleActionButtonClick } from '../modal/modal-utils.js';\r\nimport { MODAL_DIALOG_STYLES } from './modal-dialog.styles.js';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/structure/dialogs-standard)\r\n*/\r\nlet AwfModalDialog = class AwfModalDialog extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The title to be displayed in the modal dialog.\r\n        */\r\n        this.header = '';\r\n        /**\r\n         * A boolean property that indicates whether the close button in the header is shown or not.\r\n         * By default, the close button is not shown.\r\n         */\r\n        this.showCloseButton = false;\r\n    }\r\n    /**\r\n     * Selector for all elements focusable inside the modal dialog.\r\n     * @ignore\r\n     */\r\n    render() {\r\n        return html `\r\n            <div class=\"dialog\">\r\n                <div class=\"header\">\r\n                    <div class=\"title\">${this.header}</div>\r\n                    <div class=\"header-options\">\r\n                        <slot name=\"custom-header-options\"></slot>\r\n                        <awf-button\r\n                            aria-label=\"close\"\r\n                            class=\"${this.showCloseButton ? 'close-button' : 'close-button-hidden'}\"\r\n                            @click=${this.handleClose}\r\n                        >\r\n                            <awf-icon raw=${agDeleteCross} slot=\"icon\"></awf-icon>\r\n                        </awf-button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"content\"><slot @slotchange=${this.slotChange}></slot></div>\r\n                <div class=\"actions\"><slot name=\"actions\" @click=${handleActionButtonClick}></slot></div>\r\n            </div>\r\n        `;\r\n    }\r\n    handleClose() {\r\n        this.dispatchEvent(new CustomEvent(AwfEvent.CLOSE, {\r\n            composed: true,\r\n            bubbles: true,\r\n            cancelable: true,\r\n        }));\r\n    }\r\n    slotChange() {\r\n        const selector = 'slot:not([name])';\r\n        const target = this.shadowRoot.querySelector(selector);\r\n        if (target) {\r\n            this.setActionsSlot();\r\n            moveElementsIntoSlot(target, '[actions]', 'actions');\r\n        }\r\n    }\r\n    setActionsSlot() {\r\n        const actionsElement = this.shadowRoot.querySelector('.actions');\r\n        const slottedElements = this.shadowRoot.querySelector(`slot[name=actions]`)?.assignedNodes();\r\n        const displayValue = slottedElements.length === 0 ? 'none' : 'flex';\r\n        actionsElement?.style.setProperty('display', displayValue);\r\n    }\r\n};\r\nAwfModalDialog.styles = [COMMON_STYLES, BUTTON_CSS_VARIABLES, MODAL_DIALOG_CSS_VARIABLES, MODAL_DIALOG_STYLES];\r\n__decorate([\r\n    property()\r\n], AwfModalDialog.prototype, \"header\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfModalDialog.prototype, \"showCloseButton\", void 0);\r\nAwfModalDialog = __decorate([\r\n    customElement('awf-modal-dialog', true)\r\n], AwfModalDialog);\r\nexport { AwfModalDialog };\r\n//# sourceMappingURL=modal-dialog.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2024.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element.js';\r\nimport { AwfEvent } from '../../common/events/events.enum.js';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles.js';\r\nimport { MODAL_DIALOG_CSS_VARIABLES } from './modal-dialog.css-variables.styles.js';\r\nimport { MODAL_STYLES } from './modal.styles.js';\r\nconst focusableElementsSelector = [\r\n    'a[href]',\r\n    'area[href]',\r\n    'input:not([disabled])',\r\n    'select:not([disabled])',\r\n    'textarea:not([disabled])',\r\n    'button:not([disabled])',\r\n    'iframe',\r\n    'object',\r\n    'embed',\r\n    '*[tabindex]:not([tabindex=\"-1\"])',\r\n    '*[contenteditable]'\r\n].join(',');\r\nlet AwfModal = class AwfModal extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Controls whether the modal is open or closed\r\n         */\r\n        this.open = false;\r\n        this._trapFocusHandler = this.trapFocusHandler.bind(this);\r\n        this._handleEscape = this.handleEscape.bind(this);\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        document.addEventListener('keydown', this._trapFocusHandler);\r\n        document.addEventListener('keydown', this._handleEscape);\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        document.removeEventListener('keydown', this._trapFocusHandler);\r\n        document.removeEventListener('keydown', this._handleEscape);\r\n    }\r\n    render() {\r\n        return html `\r\n            <div class=\"wrapper\">\r\n                <div class=\"background\">\r\n                    <slot name=\"content\"></slot>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n    openModal() {\r\n        this.open = true;\r\n        return this.open;\r\n    }\r\n    closeModal() {\r\n        this.open = false;\r\n        return !this.open;\r\n    }\r\n    filterAndSortElementArray(elements) {\r\n        const closeButton = document\r\n            .querySelector('* awf-modal')\r\n            ?.shadowRoot?.querySelector('* awf-modal-dialog')\r\n            ?.shadowRoot?.querySelector('div.header > awf-button.close-button')\r\n            ?.shadowRoot?.querySelector('button');\r\n        const hiddenCloseButton = document\r\n            .querySelector('* awf-modal')\r\n            ?.shadowRoot?.querySelector('* awf-modal-dialog')\r\n            ?.shadowRoot?.querySelector('div.header > awf-button.close-button-hidden')\r\n            ?.shadowRoot?.querySelector('button');\r\n        const filteredElements = elements.filter((e) => e.matches(focusableElementsSelector));\r\n        const visibleElements = filteredElements.filter(ele => {\r\n            const style = window.getComputedStyle(ele);\r\n            return style.display !== 'none' && style.visibility !== 'hidden' && ele !== closeButton;\r\n        });\r\n        const sortedElements = [...visibleElements].sort((a, b) => {\r\n            const tabIndexA = a.getAttribute('tabindex');\r\n            const sortA = Number.isNaN(tabIndexA) || Number(tabIndexA) === 0 ? Number.MAX_VALUE : Number(tabIndexA);\r\n            const tabIndexB = b.getAttribute('tabindex');\r\n            const sortB = Number.isNaN(tabIndexB) || Number(tabIndexB) === 0 ? Number.MAX_VALUE : Number(tabIndexB);\r\n            return sortA - sortB;\r\n        });\r\n        if (closeButton) {\r\n            return [closeButton, ...sortedElements];\r\n        }\r\n        if (hiddenCloseButton) {\r\n            const index = sortedElements.indexOf(hiddenCloseButton);\r\n            if (index > -1) {\r\n                sortedElements.splice(index, 1);\r\n            }\r\n        }\r\n        return sortedElements;\r\n    }\r\n    getChildElements(element) {\r\n        const allElements = Array.from(element.shadowRoot?.children ?? []).concat(Array.from(element.children));\r\n        if (allElements.length === 0) {\r\n            return [element];\r\n        }\r\n        const nestedElements = allElements.reduce((prev, curr) => {\r\n            const elements = this.getChildElements(curr);\r\n            return [...prev, ...elements];\r\n        }, []);\r\n        return [element, ...nestedElements];\r\n    }\r\n    getSortedFocusableElements(container) {\r\n        const containerChildren = this.getChildElements(container);\r\n        return this.filterAndSortElementArray(containerChildren);\r\n    }\r\n    focusFirstElement() {\r\n        this.getSortedFocusableElements(this)[0]?.focus();\r\n    }\r\n    focusLastElement() {\r\n        this.getSortedFocusableElements(this).slice(-1)[0]?.focus();\r\n    }\r\n    trapFocusHandler(event) {\r\n        if (event.key !== 'Tab') {\r\n            return;\r\n        }\r\n        const shift = event.shiftKey;\r\n        setTimeout(() => {\r\n            if (!this.contains(document.activeElement)) {\r\n                if (shift) {\r\n                    this.focusLastElement();\r\n                }\r\n                else {\r\n                    this.focusFirstElement();\r\n                }\r\n            }\r\n        }, 0);\r\n    }\r\n    ;\r\n    handleEscape(event) {\r\n        if (event.key === 'Escape') {\r\n            this.dispatchEvent(new CustomEvent(AwfEvent.CLOSE, {\r\n                composed: true,\r\n                bubbles: true,\r\n                cancelable: true,\r\n            }));\r\n        }\r\n    }\r\n    ;\r\n};\r\nAwfModal.styles = [COMMON_STYLES, MODAL_STYLES, MODAL_DIALOG_CSS_VARIABLES];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfModal.prototype, \"open\", void 0);\r\nAwfModal = __decorate([\r\n    customElement('awf-modal', true)\r\n], AwfModal);\r\nexport { AwfModal };\r\n//# sourceMappingURL=modal.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2024.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { Point } from '../point';\r\nimport { DrawableItem } from './drawable-item';\r\nexport class LineItem extends DrawableItem {\r\n    get x1() {\r\n        return this._x1;\r\n    }\r\n    get y1() {\r\n        return this._y1;\r\n    }\r\n    get x2() {\r\n        return this._x2;\r\n    }\r\n    get y2() {\r\n        return this._y2;\r\n    }\r\n    get height() {\r\n        return this._y2 - this._y1;\r\n    }\r\n    get width() {\r\n        return this._x2 - this._x1;\r\n    }\r\n    constructor(style, x1, y1, x2, y2) {\r\n        super(style);\r\n        this._x1 = x1;\r\n        this._y1 = y1;\r\n        this._x2 = x2;\r\n        this._y2 = y2;\r\n    }\r\n    draw(context, ratio, isWidthRelative = true) {\r\n        this.ratio = ratio;\r\n        context.beginPath();\r\n        if (this.style.strokeColor != null && this.style.strokeColor !== undefined) {\r\n            context.strokeStyle = this.style.strokeColor;\r\n        }\r\n        if (this.style.strokeWidth != null && this.style.strokeWidth !== undefined) {\r\n            if (isWidthRelative) {\r\n                context.lineWidth = this.style.strokeWidth * this.ratio;\r\n            }\r\n            else {\r\n                context.lineWidth = this.style.strokeWidth;\r\n            }\r\n        }\r\n        context.lineTo(this.x1 * this.ratio, this.y1 * this.ratio);\r\n        context.lineTo(this.x2 * this.ratio, this.y2 * this.ratio);\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n    drawIcon(context, ratio, sampleStatus) {\r\n        if (sampleStatus.svg) {\r\n            const center = this.center();\r\n            context.drawImage(sampleStatus.svg, center.x, center.y, 16 * ratio, 16 * ratio);\r\n        }\r\n    }\r\n    canDrawIcon(ratio) {\r\n        return true;\r\n    }\r\n    setSize(sampleContainer) {\r\n        const minX = this.x1 > this.x2 ? this.x2 : this.x1;\r\n        const minY = this.y1 > this.y2 ? this.y2 : this.y1;\r\n        const maxX = this.x1 > this.x2 ? this.x1 : this.x2;\r\n        const maxY = this.y1 > this.y2 ? this.y1 : this.y2;\r\n        sampleContainer.width = maxX + 2;\r\n        sampleContainer.height = maxY + 2;\r\n        sampleContainer.initX = minX + 1 * this.ratio;\r\n        sampleContainer.initY = minY + 1 * this.ratio;\r\n    }\r\n    contains(x, y, offsetX, offsetY) {\r\n        return false;\r\n    }\r\n    center() {\r\n        return new Point(((this.x1 + this.x2) / 2) * this.ratio, ((this.y1 + this.y2) / 2) * this.ratio);\r\n    }\r\n}\r\n//# sourceMappingURL=line-item.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2024.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agGrabber } from '@agilent/web-icons/core';\r\nimport { html, LitElement } from 'lit';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport { firstValueFrom, Subject } from 'rxjs';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { createCustomEvent } from '../../common/utils/util';\r\nimport '../../molecules/modal-dialog/modal-dialog.js';\r\nimport '../../molecules/modal/modal.js';\r\nimport { ButtonType } from '../button/button';\r\nimport '../button/button.js';\r\nimport '../chip/chip.js';\r\nimport '../icon/icon.js';\r\nimport { ColorPalette } from './models/color-palette';\r\nimport { Point } from './models/point';\r\nimport { SampleContainer } from './models/sample-container';\r\nimport { SampleStatusList } from './models/sample-status/sample-status-list';\r\nimport { SampleTypes } from './models/sample-type/sample-types';\r\nimport { MultipleSelectionType } from './models/selection_type';\r\nimport { SlydiniEvent, SlydiniEventController, ZoomAction } from './slydini.event-controller';\r\nimport { slydiniHelper } from './slydini.helper.js';\r\nimport { SLYDINI_STYLES } from './slydini.styles';\r\nimport { ColorUtils } from './utils/color-utils';\r\nimport { convertTool } from './utils/convert-tool';\r\nimport { DrawFactory } from './utils/draw-factory';\r\nimport { isColor } from './utils/is-color';\r\nimport { getxmlParsedXmlNode } from './utils/parse-xml';\r\nimport { sampleContainerFactory } from './utils/sample-container-factory';\r\nimport { SelectionMode, SelectionOrder } from './utils/selection-controller';\r\nlet AwfSlydini = class AwfSlydini extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onColorValueChanged = this.handleColorValueChanged.bind(this);\r\n        this.onSampleTypeValueChanged = this.handleSampleTypeValueChanged.bind(this);\r\n        this.sampleTypes = new SampleTypes();\r\n        this.eventController = new SlydiniEventController();\r\n        this.sampleStatusList = new SampleStatusList();\r\n        this.colorPalette = new ColorPalette();\r\n        this.drag = false;\r\n        this.colorPaletteTag = null;\r\n        this.sampleTypesTag = null;\r\n        this.sampleStatusTag = null;\r\n        this.moveStartPosition = new Point(0, 0);\r\n        this.lastCanDropValue = false;\r\n        this.isInMultiselectTouchMode = false;\r\n        this.previousDiff = -1;\r\n        this.isZooming = false;\r\n        this.isTouch = false;\r\n        this.isExternalDrag = false;\r\n        this.isDraggingVials = false;\r\n        this.isDragLeavingCanvas = false;\r\n        this.drawingProperties = ['displayOutline', 'displayDecoration', 'displayLabel', 'orderingArrow', 'displayStatusIcon'];\r\n        this.containerProperties = ['xmlCode', 'xmlStyle', 'startOffset', 'containerRotation'];\r\n        this.selectionProperties = ['selectionMode', 'selectionOrder'];\r\n        this.sampleContainer = new SampleContainer();\r\n        this.componentReady = new Subject();\r\n        this.componentReady$ = this.componentReady.asObservable();\r\n        this.drawFactory = new DrawFactory();\r\n        /**\r\n         * When true, outline of the sample container is drawn.\r\n         */\r\n        this.displayOutline = true;\r\n        /**\r\n         * When true, decorations of the sample container are drawn.\r\n         */\r\n        this.displayDecoration = true;\r\n        /**\r\n         * When true, labels of the sample container are drawn.\r\n         */\r\n        this.displayLabel = true;\r\n        /**\r\n         * When true, allows single selection and multi-selection of vials.\r\n         */\r\n        this.vialSelection = true;\r\n        /**\r\n         * When true, allows selection to be cleared when clicking outside the vials.\r\n         */\r\n        this.clearSelectionClickingOutside = true;\r\n        /**\r\n         * Select the mode to select vials\r\n         */\r\n        this.selectionMode = SelectionMode.Row;\r\n        /**\r\n         * Select how to order the selected vials.\r\n         */\r\n        this.selectionOrder = SelectionOrder.Linear;\r\n        /**\r\n         *  Display an ordering arrow in the vials according to the order of selection.\r\n         */\r\n        this.orderingArrow = false;\r\n        /**\r\n         * When true, style from xml is applied.\r\n         */\r\n        this.xmlStyle = false;\r\n        /**\r\n         * When true, selected vials can be moved.\r\n         */\r\n        this.allowMoveSelection = false;\r\n        /**\r\n         * When true, container name is displayed.\r\n         */\r\n        this.displayContainerName = false;\r\n        /**\r\n         * Allow to display sample status icon\r\n         */\r\n        this.displayStatusIcon = true;\r\n        /**\r\n         * When true, zoom is available.\r\n         */\r\n        this.zoom = true;\r\n        /**\r\n         * Size of text in vials, percentage of the size of text to fill a vial in height\r\n         */\r\n        this.defaultSampleTextSize = 100;\r\n        /**\r\n         * When true, display confirmation dialog when moving vials.\r\n         */\r\n        this.displayConfirmationDialog = true;\r\n    }\r\n    static get styles() {\r\n        return [COMMON_STYLES, SLYDINI_STYLES];\r\n    }\r\n    get selectedVials() {\r\n        return this.sampleContainer.selectionController.selectedVials.map(v => v.details);\r\n    }\r\n    get vials() {\r\n        const list = [];\r\n        this.sampleContainer.vialsList.forEach(vial => list.push(vial.details));\r\n        list.sort((a, b) => a.identifier.localeCompare(b.identifier, 'en', { numeric: true }));\r\n        return list;\r\n    }\r\n    async firstUpdated() {\r\n        await document.fonts.ready;\r\n        this.sampleStatusList.addAllSampleStatus(await convertTool.loadIcons());\r\n        this.handleVialSelectionChange();\r\n        this.handleCustomColorPalette();\r\n        this.handleCustomSampleTypes();\r\n        this.handleCustomSampleStatus();\r\n        this.drawSampleContainer();\r\n        this.handleDisplayContainerName();\r\n        this.initCanvasZoomEventListener();\r\n        this.eventController.initEventListener(this, this.canvasTag);\r\n        this.resizeObserver = new ResizeObserver(this.resizeContainer.bind(this));\r\n        this.resizeObserver.observe(this.canvasTag);\r\n        if (!this.componentReady.closed) {\r\n            this.componentReady.next();\r\n            this.componentReady.unsubscribe();\r\n        }\r\n    }\r\n    initCanvasZoomEventListener() {\r\n        this.canvasTag.addEventListener('pointerleave', event => {\r\n            if (event.pointerType === 'mouse') {\r\n                this.removeEventListener('pointerup', this.handleMouseUp);\r\n                if (this.lastHoveredVial) {\r\n                    this.lastHoveredVial.hovered = false;\r\n                    this.dispatchEvent(createCustomEvent(SlydiniEvent.MOUSELEAVEVIAL, {\r\n                        mouseEvent: event,\r\n                        vial: this.lastHoveredVial.details,\r\n                    }));\r\n                    this.refreshContainer();\r\n                    this.lastHoveredVial = undefined;\r\n                }\r\n                document.addEventListener('mouseup', this.handleMouseUpWhenMouseLeave.bind(this));\r\n                if (this.zoom) {\r\n                    this.sampleContainer.zoomController.mouseLeave = true;\r\n                    this.removeEventListener('mousemove', this.handleZoomMouseMove);\r\n                }\r\n            }\r\n        });\r\n        this.canvasTag.addEventListener('pointerenter', event => {\r\n            if (event.pointerType === 'mouse') {\r\n                this.addEventListener('pointerup', this.handleMouseUp);\r\n                document.removeEventListener('mouseup', this.handleMouseUpWhenMouseLeave.bind(this));\r\n                if (this.zoom) {\r\n                    this.sampleContainer.zoomController.mouseLeave = false;\r\n                    this.addEventListener('mousemove', this.handleZoomMouseMove);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    resizeContainer() {\r\n        clearTimeout(this.resizeTimer);\r\n        this.resizeTimer = setTimeout(() => {\r\n            this.drawFactory.drawShapes(this, this.sampleContainer, this.canvasTag);\r\n            this.displayMoveIcon();\r\n        }, 100);\r\n    }\r\n    handleDropExternalVials(event) {\r\n        const currentVial = this.retrieveVialFromPointerPosition(event);\r\n        this.dispatchEvent(createCustomEvent(SlydiniEvent.EXTERNALDROPVIALS, {\r\n            vial: currentVial?.details,\r\n            dragEvent: event,\r\n        }));\r\n    }\r\n    handleDragStart(event) {\r\n        const customEvent = new CustomEvent(SlydiniEvent.STARTDRAGVIALS, {\r\n            composed: true,\r\n            bubbles: true,\r\n            cancelable: true,\r\n            detail: { vials: this.selectedVials },\r\n        });\r\n        this.removeEventListener('mousemove', this.handleMouseMove);\r\n        if (!this.dispatchEvent(customEvent)) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n        // Create transparent drag image for cursor\r\n        const canvas = document.createElement('canvas');\r\n        const dragImage = slydiniHelper.createTransparentDragImage(canvas);\r\n        this.isDraggingVials = true;\r\n        this.isDragLeavingCanvas = false;\r\n        this.moveStartPosition = new Point(event.x, event.y);\r\n        event.dataTransfer?.setData('text/vials', JSON.stringify(this.selectedVials));\r\n        event.dataTransfer?.setDragImage(dragImage, 0, 0);\r\n        canvas.remove();\r\n    }\r\n    handleDragEnd() {\r\n        this.isDraggingVials = false;\r\n        if (this.isDragLeavingCanvas) {\r\n            this.isDragLeavingCanvas = false;\r\n            this.removeEventListener('mousemove', this.handleMouseMove);\r\n            this.refreshContainer();\r\n        }\r\n    }\r\n    handleMouseUpWhenMouseLeave() {\r\n        this.removeEventListener('mousemove', this.handleMouseMove);\r\n        this.drag = false;\r\n        this.refreshContainer();\r\n    }\r\n    handleCustomColorPalette() {\r\n        this.colorPaletteTag = this.querySelector('awf-color-palette');\r\n        if (this.colorPaletteTag) {\r\n            this.colorPaletteTag.addEventListener(AwfEvent.VALUE_CHANGE, this.onColorValueChanged);\r\n            this.colorPaletteTag\r\n                .querySelectorAll('awf-color')\r\n                .forEach(color => this.updateColorPalette(color.name, color.value));\r\n        }\r\n    }\r\n    handleCustomSampleTypes() {\r\n        this.sampleTypesTag = this.querySelector('awf-sample-types');\r\n        if (this.sampleTypesTag) {\r\n            this.sampleTypesTag.addEventListener(AwfEvent.VALUE_CHANGE, this.onSampleTypeValueChanged);\r\n            this.sampleTypesTag\r\n                .querySelectorAll('awf-color')\r\n                .forEach(color => this.sampleTypes.updateSampleTypes(color.name, color.value));\r\n        }\r\n    }\r\n    handleCustomSampleStatus() {\r\n        this.sampleStatusTag = this.querySelector('awf-sample-status-list');\r\n        if (this.sampleStatusTag) {\r\n            this.sampleStatusTag.querySelectorAll('awf-sample-status').forEach(sampleStatus => {\r\n                const svg = sampleStatus.querySelector('svg');\r\n                const name = sampleStatus.getAttribute('name');\r\n                if (svg) {\r\n                    this.sampleStatusList.updateSampleStatus(name, svg.outerHTML);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    handleColorValueChanged(event) {\r\n        const customEvent = event;\r\n        this.updateColorPalette(customEvent.detail.name, customEvent.detail.value);\r\n        this.drawSampleContainer();\r\n    }\r\n    handleSelectAllViaControlA() {\r\n        this.sampleContainer.selectionController.selectAllVials(this.sampleContainer.vialsList);\r\n        this.refreshContainer();\r\n    }\r\n    handleSampleTypeValueChanged(event) {\r\n        const customEvent = event;\r\n        this.sampleTypes.updateSampleTypes(customEvent.detail.name, customEvent.detail.value);\r\n        this.drawSampleContainer();\r\n    }\r\n    handleMouseOver(event, dispatchEvents) {\r\n        if (!this.isTouch) {\r\n            const pointerEvent = event;\r\n            const currentVial = this.retrieveVialFromPointerPosition(pointerEvent);\r\n            if (currentVial !== this.lastHoveredVial) {\r\n                this.handleHoverStateChanged(pointerEvent, dispatchEvents, currentVial);\r\n            }\r\n            else if (this.lastHoveredVial && dispatchEvents) {\r\n                this.dispatchEvent(createCustomEvent(SlydiniEvent.MOUSEOVERVIAL, {\r\n                    mouseEvent: event,\r\n                    vial: this.lastHoveredVial.details,\r\n                }));\r\n            }\r\n        }\r\n    }\r\n    handleHoverStateChanged(event, dispatchEvents, currentVial) {\r\n        if (this.lastHoveredVial) {\r\n            this.lastHoveredVial.hovered = false;\r\n            if (dispatchEvents) {\r\n                this.dispatchEvent(createCustomEvent(SlydiniEvent.MOUSELEAVEVIAL, {\r\n                    mouseEvent: event,\r\n                    vial: this.lastHoveredVial.details,\r\n                }));\r\n            }\r\n        }\r\n        if (currentVial) {\r\n            currentVial.hovered = true;\r\n            if (dispatchEvents) {\r\n                this.dispatchEvent(createCustomEvent(SlydiniEvent.MOUSEENTERVIAL, {\r\n                    mouseEvent: event,\r\n                    vial: currentVial.details,\r\n                }));\r\n            }\r\n        }\r\n        this.refreshContainer();\r\n        this.lastHoveredVial = currentVial;\r\n    }\r\n    updated(_changedProperties) {\r\n        this.updateDrawingProperties(_changedProperties);\r\n        this.updateSelectionProperties(_changedProperties);\r\n        this.updateContainerProperties(_changedProperties);\r\n        this.updateContainerNameProperties(_changedProperties);\r\n    }\r\n    updateDrawingProperties(changedProperties) {\r\n        if (Array.from(changedProperties.keys()).some(e => this.drawingProperties.includes(e.toString()))) {\r\n            this.drawFactory.updateOptions(this);\r\n            this.drawFactory.draw(this, this.sampleContainer);\r\n        }\r\n        if (changedProperties.has('zoom')) {\r\n            this.eventController.initZoomEventListener(this);\r\n        }\r\n        if (changedProperties.has('defaultSampleTextSize')) {\r\n            this.sampleContainer.defaultSampleTextSize = this.defaultSampleTextSize;\r\n            this.refreshContainer();\r\n        }\r\n    }\r\n    updateSelectionProperties(changedProperties) {\r\n        if (changedProperties.has('vialSelection')) {\r\n            this.handleVialSelectionChange();\r\n        }\r\n        if (changedProperties.has('allowMoveSelection')) {\r\n            this.displayMoveIcon();\r\n        }\r\n    }\r\n    updateContainerProperties(changedProperties) {\r\n        if (Array.from(changedProperties.keys()).some(e => this.containerProperties.includes(e.toString()))) {\r\n            this.drawSampleContainer();\r\n        }\r\n        if (Array.from(changedProperties.keys()).some(e => this.selectionProperties.includes(e.toString()))) {\r\n            this.sampleContainer.selectionController.clearSelection(this.sampleContainer.vialsList);\r\n            this.sampleContainer.selectionController.selectionMode = this.selectionMode;\r\n            this.sampleContainer.selectionController.selectionOrder = this.selectionOrder;\r\n            this.refreshContainer();\r\n        }\r\n    }\r\n    updateContainerNameProperties(changedProperties) {\r\n        if (changedProperties.has('displayContainerName') ||\r\n            changedProperties.has('containerName') ||\r\n            changedProperties.has('containerNameVerticalPosition') ||\r\n            changedProperties.has('containerNameHorizontalPosition')) {\r\n            this.drawSampleContainer();\r\n        }\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        if (this.colorPaletteTag) {\r\n            this.colorPaletteTag.removeEventListener(AwfEvent.VALUE_CHANGE, this.onColorValueChanged);\r\n        }\r\n        if (this.sampleTypesTag) {\r\n            this.sampleTypesTag.removeEventListener(AwfEvent.VALUE_CHANGE, this.onSampleTypeValueChanged);\r\n        }\r\n        this.resizeObserver?.disconnect();\r\n    }\r\n    /**\r\n     * Sets the vial info.\r\n     * @param {VialInfo} vialInfo\r\n     * @returns true if identifier corresponds to a vial, false if not.\r\n     */\r\n    async setVialInfo(vialInfo) {\r\n        if (!this.componentReady.closed) {\r\n            await firstValueFrom(this.componentReady$);\r\n        }\r\n        const vial = this.sampleContainer.vialsList.find(v => v.identifier === vialInfo.identifier);\r\n        if (vial) {\r\n            vial.setInfo(vialInfo, this, this.sampleTypes, this.sampleContainer.selectionController);\r\n            this.refreshContainer();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Gets the vial info.\r\n     * @param {string} identifier\r\n     * @returns the vial info if identifier corresponds to a vial, undefined if not.\r\n     */\r\n    getVialInfo(identifier) {\r\n        return this.sampleContainer.vialsList.find(v => v.identifier === identifier)?.details;\r\n    }\r\n    handleDisplayContainerName() {\r\n        this.containerNameHeader.innerText = '';\r\n        if (this.containerName && this.containerName !== '') {\r\n            this.containerNameHeader.innerText = this.containerName;\r\n        }\r\n        else if (this.sampleContainer.dispatchXML?.displayName) {\r\n            this.containerNameHeader.innerText = this.sampleContainer.dispatchXML.displayName;\r\n        }\r\n        if (this.displayContainerName) {\r\n            this.containerNameHeader.style.display = 'block';\r\n            this.containerNameHeader.style.textAlign = this.containerNameHorizontalPosition ?? 'left';\r\n        }\r\n        else {\r\n            this.containerNameHeader.style.display = 'none';\r\n        }\r\n    }\r\n    displayMoveIcon() {\r\n        if (this.vialSelection && this.allowMoveSelection && this.selectedVials.length > 0 && !this.isTouch) {\r\n            const topRightVial = this.sampleContainer.selectionController.getTopRightSelectedVial();\r\n            const iconPosition = slydiniHelper.calculateIconPosition(topRightVial);\r\n            const backgroundColor = this.xmlStyle && this.sampleContainer.dispatchXML\r\n                ? this.sampleContainer.dispatchXML.sampleContainerFillColor\r\n                : this.colorPalette.defaultOutlineStyle.fillColor;\r\n            this.moveIcon.style.stroke = ColorUtils.isColorLight(backgroundColor) ? '' : ColorUtils.AGILENT_GRAY_PALE_COLOR;\r\n            const iconHeight = parseInt(getComputedStyle(this.moveIcon).getPropertyValue('height'), 10);\r\n            const iconWidth = parseInt(getComputedStyle(this.moveIcon).getPropertyValue('width'), 10);\r\n            this.moveIcon.style.top = `${iconPosition.y - this.sampleContainer.zoomController.zoomOffset.y - iconHeight / 2}px`;\r\n            this.moveIcon.style.left = `${iconPosition.x - this.sampleContainer.zoomController.zoomOffset.x - iconWidth / 2}px`;\r\n            this.moveIcon.style.display = '';\r\n            this.moveIcon.style.visibility = 'visible';\r\n        }\r\n        else {\r\n            this.moveIcon.style.display = 'none';\r\n            this.moveIcon.style.visibility = 'hidden';\r\n        }\r\n    }\r\n    handleVialSelectionChange() {\r\n        this.removeEventListener('pointerdown', this.handleMouseDown);\r\n        this.removeEventListener('pointerup', this.handleMouseUp);\r\n        if (this.vialSelection) {\r\n            this.addEventListener('pointerdown', this.handleMouseDown);\r\n            this.addEventListener('pointerup', this.handleMouseUp);\r\n        }\r\n        else {\r\n            this.clearSelectedVials();\r\n        }\r\n    }\r\n    handleMouseDown(event) {\r\n        this.mouseDownEvent = event;\r\n        this.drag = false;\r\n        if (this.mouseDownEvent.pointerType !== 'mouse') {\r\n            this.isTouch = true;\r\n            this.handleTouchPointerDown(event);\r\n        }\r\n        else {\r\n            this.isTouch = false;\r\n            if (this.mouseDownEvent.button === 0) {\r\n                this.addEventListener('mousemove', this.handleMouseMove);\r\n            }\r\n            else if (this.mouseDownEvent.button === 2) {\r\n                this.addEventListener('mousemove', this.handleRightClickMouseMove);\r\n                this.sampleContainer.zoomController.startOffset.x = this.sampleContainer.zoomController.zoomOffset.x;\r\n                this.sampleContainer.zoomController.startOffset.y = this.sampleContainer.zoomController.zoomOffset.y;\r\n            }\r\n        }\r\n    }\r\n    handleTouchPointerDown(event) {\r\n        this.eventController.eventCache.push(this.mouseDownEvent);\r\n        this.sampleContainer.zoomController.setMouseOffsetFromTouch(this.eventController.eventCache);\r\n        this.sampleContainer.zoomController.setStartOffset();\r\n        this.addEventListener('pointermove', this.handlePointerMove);\r\n        if (!this.isInMultiselectTouchMode && this.vialSelection && this.eventController.eventCache.length < 2) {\r\n            this.longPressTimer = setTimeout(() => this.onLongPress(), 1500);\r\n        }\r\n    }\r\n    handlePointerMove(event) {\r\n        if (!this.drag) {\r\n            this.drag = slydiniHelper.isDragging(event, this.mouseDownEvent, true);\r\n        }\r\n        const index = this.eventController.eventCache.findIndex(cachedEv => cachedEv.pointerId === event.pointerId);\r\n        this.eventController.eventCache[index] = event;\r\n        if (this.eventController.eventCache.length === 2) {\r\n            this.isZooming = true;\r\n            this.handlePinchedZoom();\r\n        }\r\n        if (this.drag) {\r\n            if (this.longPressTimer) {\r\n                clearTimeout(this.longPressTimer);\r\n            }\r\n            if (this.isInMultiselectTouchMode && this.eventController.eventCache.length < 2) {\r\n                event.preventDefault();\r\n                this.handleSelection(event, MultipleSelectionType.MultipleContinuous, true);\r\n            }\r\n            if (this.sampleContainer.zoomController.canScrollInZoom(this.drag, this.isInMultiselectTouchMode, this.eventController.eventCache)) {\r\n                this.sampleContainer.zoomController.zoomOffset.x =\r\n                    this.sampleContainer.zoomController.startOffset.x + (this.mouseDownEvent.offsetX - event.offsetX);\r\n                this.sampleContainer.zoomController.zoomOffset.y =\r\n                    this.sampleContainer.zoomController.startOffset.y + (this.mouseDownEvent.offsetY - event.offsetY);\r\n                this.refreshContainer();\r\n            }\r\n        }\r\n    }\r\n    onLongPress() {\r\n        this.longPressedVial = this.retrieveVialFromPointerPosition(this.mouseDownEvent);\r\n        if (this.longPressedVial) {\r\n            this.clearSelectedVials();\r\n            this.isInMultiselectTouchMode = true;\r\n            this.exitMultiselectChip.style.visibility = 'visible';\r\n            this.sampleContainer.selectionController.selectSingleVial(this.longPressedVial, false, true);\r\n            this.refreshContainer();\r\n        }\r\n    }\r\n    handleClearSelectionClickingOutside() {\r\n        if (this.clearSelectionClickingOutside && !this.eventController.isUserGrabbingOrMultiSelecting()) {\r\n            const offset = slydiniHelper.calculateContainerOffset(this.canvasTag, this.sampleContainer.zoomController.zoomOffset);\r\n            const cleared = this.sampleContainer.selectionController.clearSelectionIfOutsideVials(this.sampleContainer, new Point(this.mouseDownEvent.x, this.mouseDownEvent.y), offset);\r\n            if (cleared) {\r\n                this.refreshContainer();\r\n            }\r\n        }\r\n    }\r\n    clearSelectedVials() {\r\n        this.sampleContainer.selectionController.clearSelection(this.sampleContainer.vialsList);\r\n        this.refreshContainer();\r\n    }\r\n    handleMouseUp(event) {\r\n        this.removeEventListener('mousemove', this.handleMouseMove);\r\n        this.removeEventListener('mousemove', this.handleRightClickMouseMove);\r\n        this.removeEventListener('pointermove', this.handlePointerMove);\r\n        const pointer = event;\r\n        if (this.mouseDownEvent.pointerType !== 'mouse') {\r\n            this.handlePointerUp(pointer);\r\n        }\r\n        else if (slydiniHelper.isDragAndSelectVials(this.vialSelection, !this.drag, !this.isDraggingVials) && pointer.button === 0 && this.eventController.eventCache.length < 2) {\r\n            this.handleClearSelectionClickingOutside();\r\n            this.handleSelection(pointer, slydiniHelper.getSelectionType(pointer, this.eventController.isMacOs), false);\r\n        }\r\n        else if (pointer.button === 2) {\r\n            document.body.style.cursor = 'default';\r\n            if (!this.drag) {\r\n                this.dispatchRightClickEvent(pointer);\r\n            }\r\n        }\r\n    }\r\n    handlePointerUpForPinch() {\r\n        if (this.eventController.eventCache.length < 2) {\r\n            this.previousDiff = -1;\r\n        }\r\n        if (this.isZooming && this.eventController.eventCache.length < 1) {\r\n            this.isZooming = false;\r\n        }\r\n    }\r\n    handlePointerUp(event) {\r\n        this.eventController.removeEvent(event);\r\n        if (this.longPressTimer) {\r\n            clearTimeout(this.longPressTimer);\r\n        }\r\n        if (this.longPressedVial) {\r\n            this.longPressedVial = undefined;\r\n            return;\r\n        }\r\n        if (this.vialSelection && !this.drag && !this.isZooming) {\r\n            this.handleClearSelectionClickingOutside();\r\n            if (this.isInMultiselectTouchMode) {\r\n                const currentVial = this.retrieveVialFromPointerPosition(event);\r\n                if (currentVial) {\r\n                    this.sampleContainer.selectionController.selectSingleVial(currentVial);\r\n                    this.refreshContainer();\r\n                }\r\n            }\r\n            else {\r\n                this.handleSelection(event, slydiniHelper.getSelectionType(event, this.eventController.isMacOs), false);\r\n            }\r\n        }\r\n        this.drag = false;\r\n        this.handlePointerUpForPinch();\r\n    }\r\n    handleMouseMove(event) {\r\n        const pointer = event;\r\n        this.drag = slydiniHelper.isDragging(pointer, this.mouseDownEvent);\r\n        if (slydiniHelper.isDragAndSelectVials(this.vialSelection, this.drag, !this.isDraggingVials)) {\r\n            this.handleSelection(pointer, MultipleSelectionType.MultipleContinuous, this.eventController.isCtrlKeyDown);\r\n        }\r\n    }\r\n    handleRightClickMouseMove(event) {\r\n        const pointer = event;\r\n        this.drag = slydiniHelper.isDragging(pointer, this.mouseDownEvent);\r\n        if (this.drag && this.sampleContainer.zoomController.zoomRatio > 0) {\r\n            document.body.style.cursor = 'grabbing';\r\n            this.sampleContainer.zoomController.zoomOffset.x =\r\n                this.sampleContainer.zoomController.startOffset.x + (this.mouseDownEvent.x - pointer.x);\r\n            this.sampleContainer.zoomController.zoomOffset.y =\r\n                this.sampleContainer.zoomController.startOffset.y + (this.mouseDownEvent.y - pointer.y);\r\n            this.refreshContainer();\r\n        }\r\n    }\r\n    handleSelection(event, selectionType, keepPreviousSelection) {\r\n        const offset = slydiniHelper.calculateContainerOffset(this.canvasTag, this.sampleContainer.zoomController.zoomOffset);\r\n        const eventPoint = new Point(event.x, event.y);\r\n        if (this.drag) {\r\n            const mouseDownVial = this.retrieveVialFromPointerPosition(this.mouseDownEvent);\r\n            if (mouseDownVial && this.sampleContainer.selectionController.lastSelectedVial !== mouseDownVial) {\r\n                this.sampleContainer.selectionController.lastSelectedVial = mouseDownVial;\r\n            }\r\n        }\r\n        if (this.retrieveVialFromPointerPosition(event)) {\r\n            this.sampleContainer.selectionController.selectVial(this.sampleContainer, eventPoint, offset, selectionType, keepPreviousSelection);\r\n            this.drawFactory.draw(this, this.sampleContainer);\r\n        }\r\n        this.exitMultiselectChip.label = this.selectedVials.length.toString();\r\n        this.displayMoveIcon();\r\n    }\r\n    handleMoveSelectedVials(event) {\r\n        this.moveIcon.style.display = 'none';\r\n        this.moveIcon.style.visibility = 'hidden';\r\n        const vialAtCurrentPosition = this.sampleContainer.selectionController.getVialAtCurrentPositionWhenMoving(this.sampleContainer, new Point(event.x, event.y), this.moveStartPosition);\r\n        const deltaX = (event.x - this.moveStartPosition.x) / this.sampleContainer.globalRatio;\r\n        const deltaY = (event.y - this.moveStartPosition.y) / this.sampleContainer.globalRatio;\r\n        this.drawFactory.draw(this, this.sampleContainer, true, deltaX, deltaY, vialAtCurrentPosition);\r\n        if (vialAtCurrentPosition !== this.lastMovePosition) {\r\n            this.lastMovePosition = vialAtCurrentPosition;\r\n            this.lastCanDropValue = this.sampleContainer.selectionController.lastCanDropValue && vialAtCurrentPosition !== undefined;\r\n            this.dispatchDragEvent(vialAtCurrentPosition, this.sampleContainer.selectionController.destinationVials);\r\n        }\r\n        if (event.dataTransfer?.types.includes('text/vials')) {\r\n            event.dataTransfer.dropEffect = this.lastCanDropValue ? 'move' : 'none';\r\n        }\r\n    }\r\n    dispatchDragEvent(currentPosition, destinationVials) {\r\n        if (currentPosition) {\r\n            const customEvent = new CustomEvent(SlydiniEvent.DRAGVIALS, {\r\n                composed: true,\r\n                bubbles: true,\r\n                cancelable: true,\r\n                detail: {\r\n                    sourceVials: this.selectedVials,\r\n                    destinationVials: destinationVials.map(v => v.details),\r\n                },\r\n            });\r\n            if (!this.dispatchEvent(customEvent)) {\r\n                this.lastCanDropValue = false;\r\n            }\r\n        }\r\n    }\r\n    dispatchDropEvent() {\r\n        this.dispatchEvent(createCustomEvent(SlydiniEvent.DROPVIALS, {\r\n            sourceVials: this.selectedVials,\r\n            destinationVials: this.sampleContainer.selectionController.destinationVials.map(v => v.details),\r\n        }));\r\n    }\r\n    dispatchRightClickEvent(event) {\r\n        const currentVial = this.retrieveVialFromPointerPosition(event);\r\n        if (currentVial) {\r\n            if (!currentVial.selected) {\r\n                this.dispatchEvent(createCustomEvent(SlydiniEvent.RIGHTCLICKVIAL, { vial: currentVial.details, mouseEvent: event }));\r\n            }\r\n            else {\r\n                this.dispatchEvent(createCustomEvent(SlydiniEvent.RIGHTCLICKSELECTION, {\r\n                    vial: currentVial.details,\r\n                    selection: this.selectedVials,\r\n                    mouseEvent: event,\r\n                }));\r\n            }\r\n        }\r\n        else {\r\n            this.dispatchEvent(createCustomEvent(SlydiniEvent.RIGHTCLICKCONTAINER, { mouseEvent: event }));\r\n        }\r\n    }\r\n    handleDropSelection() {\r\n        if (this.lastCanDropValue) {\r\n            if (this.displayConfirmationDialog) {\r\n                if (this.sampleContainer.selectionController.checkDestinationVialsAreEmpty() ||\r\n                    this.sampleContainer.selectionController.isMovingToSamePosition) {\r\n                    this.selectVialsAfterMoving();\r\n                }\r\n                else {\r\n                    this.removeEventListener('pointerdown', this.handleMouseDown);\r\n                    this.moveSelectionDialogContainer.openModal();\r\n                }\r\n            }\r\n            else {\r\n                this.dispatchDropEvent();\r\n                this.refreshContainer();\r\n            }\r\n        }\r\n        else {\r\n            this.refreshContainer();\r\n        }\r\n    }\r\n    handleScroll(event) {\r\n        let delta = 0;\r\n        if (this.sampleContainer.ctx) {\r\n            if (event.type === 'keydown') {\r\n                if (this.eventController.zoomAction === ZoomAction.ZoomIn) {\r\n                    delta = -120;\r\n                }\r\n                else if (this.eventController.zoomAction === ZoomAction.ZoomOut) {\r\n                    delta = 120;\r\n                }\r\n            }\r\n            if (event.type === 'DOMMouseScroll' || event.type === 'mousewheel') {\r\n                const wheelEvent = event;\r\n                delta = wheelEvent.deltaY;\r\n                this.sampleContainer.zoomController.setMouseOffset(wheelEvent.offsetX, wheelEvent.offsetY);\r\n            }\r\n            this.sampleContainer.zoomController.executeZoom(delta, this.canvasTag, this.sampleContainer.ratioDefault);\r\n            this.refreshContainer();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    handlePinchedZoom() {\r\n        const currentDiff = Math.abs(this.eventController.eventCache[0].offsetX - this.eventController.eventCache[1].offsetX);\r\n        if (this.previousDiff > 0) {\r\n            let delta = 10;\r\n            if (currentDiff > this.previousDiff) {\r\n                delta = -delta;\r\n            }\r\n            this.sampleContainer.zoomController.executeZoom(delta, this.canvasTag, this.sampleContainer.ratioDefault);\r\n            this.refreshContainer();\r\n        }\r\n        this.previousDiff = currentDiff;\r\n    }\r\n    handleZoomMouseMove(event) {\r\n        const pointer = event;\r\n        this.sampleContainer.zoomController.setMouseOffset(pointer.offsetX, pointer.offsetY);\r\n    }\r\n    selectVialsAfterMoving() {\r\n        this.dispatchDropEvent();\r\n        this.sampleContainer.selectionController.selectDestinationVials();\r\n        this.refreshContainer();\r\n    }\r\n    render() {\r\n        const invalidXmlFileMessage = 'File cannot be loaded';\r\n        const moveSelectionWarningMessage = ' Samples are already defined in this location. Do you want to continue and replace them?';\r\n        const moveSelectionModalElement = html `<awf-modal class=\"moveSelectionDialogContainer\"><awf-modal-dialog header=\"Confirmation\" class=\"moveSelectionDialog\" slot=\"content\">\r\n                ${moveSelectionWarningMessage}\r\n                <awf-button class=\"cancel-button\" actions @click=${this.onCancelMoveSelectionDialog} type=${ButtonType.Secondary}\r\n                    >Cancel</awf-button\r\n                >\r\n                <awf-button class=\"confirm-button\" actions @click=${this.onConfirmMoveSelectionDialog} type=${ButtonType.Primary}\r\n                    >Confirm</awf-button\r\n                >\r\n            </awf-modal-dialog></awf-modal>`;\r\n        const xmlValidationModalElement = html `<awf-modal class=\"xmlValidationDialogContainer\">\r\n                <awf-modal-dialog class=\"xmlValidationDialog\" showclosebutton @close=${this.onCloseModalDialog}  slot=\"content\"\r\n            >${invalidXmlFileMessage}</awf-modal-dialog></awf-modal>`;\r\n        const moveIconElement = html `<awf-icon draggable=\"true\" class=\"moveIcon\" raw=${agGrabber}></awf-icon>`;\r\n        const exitMultiselectChip = html `<awf-chip class=\"exit-multiselect\" label=${this.selectedVials.length} removeable> </awf-chip>`;\r\n        if (this.containerNameVerticalPosition === 'top') {\r\n            return html `\r\n                <h3 class=\"container-name\"></h3>\r\n                <div id=\"sample-container\">\r\n                    <canvas></canvas>${moveIconElement}${exitMultiselectChip}\r\n                </div>\r\n                ${xmlValidationModalElement} ${moveSelectionModalElement}`;\r\n        }\r\n        else {\r\n            return html `\r\n                <div id=\"sample-container\">\r\n                    <canvas></canvas>${moveIconElement}${exitMultiselectChip}\r\n                </div>\r\n                <h3 class=\"container-name\"></h3>\r\n                ${xmlValidationModalElement} ${moveSelectionModalElement}`;\r\n        }\r\n    }\r\n    handleExitMultiselect() {\r\n        this.isInMultiselectTouchMode = false;\r\n        this.exitMultiselectChip.style.visibility = 'hidden';\r\n        if (this.eventController.eventCache.length === 1) {\r\n            this.eventController.removeEvent(this.eventController.eventCache[0]);\r\n        }\r\n        this.addEventListener('pointerup', this.handleMouseUp);\r\n    }\r\n    onCloseModalDialog() {\r\n        this.modal.closeModal();\r\n    }\r\n    onCancelMoveSelectionDialog() {\r\n        this.moveSelectionDialogContainer.closeModal();\r\n        this.addEventListener('pointerdown', this.handleMouseDown);\r\n        this.refreshContainer();\r\n    }\r\n    onConfirmMoveSelectionDialog() {\r\n        this.moveSelectionDialogContainer.closeModal();\r\n        this.addEventListener('pointerdown', this.handleMouseDown);\r\n        this.selectVialsAfterMoving();\r\n    }\r\n    updateColorPalette(name, value) {\r\n        if (isColor(value)) {\r\n            if (name === ColorPalette.CONTAINER_NAME_COLOR) {\r\n                this.containerNameHeader.style.color = value;\r\n            }\r\n            else if (this.colorPalette.colorPaletteMap.has(name)) {\r\n                this.colorPalette.colorPaletteMap.set(name, value);\r\n            }\r\n        }\r\n    }\r\n    refreshContainer() {\r\n        this.drawFactory.draw(this, this.sampleContainer);\r\n        this.displayMoveIcon();\r\n        this.exitMultiselectChip.label = this.selectedVials.length.toString();\r\n    }\r\n    retrieveVialFromPointerPosition(event) {\r\n        const offset = slydiniHelper.calculateContainerOffset(this.canvasTag, this.sampleContainer.zoomController.zoomOffset);\r\n        return this.sampleContainer.selectionController.getVialFromCoordinates(this.sampleContainer, new Point(event.x, event.y), offset);\r\n    }\r\n    drawSampleContainer() {\r\n        this.sampleContainer.ctx?.clearRect(0, 0, this.sampleContainer.ctx.canvas.width, this.sampleContainer.ctx.canvas.height);\r\n        this.sampleContainer = new SampleContainer();\r\n        const { xmlParsed, xmlNode } = getxmlParsedXmlNode(this.xmlCode, document);\r\n        this.nodeXML = xmlNode ?? this.nodeXML;\r\n        const parseResult = slydiniHelper.parseXmlCode(xmlParsed, this.modal, this.modalDialog);\r\n        if (parseResult !== null) {\r\n            this.sampleContainer.colorPalette = this.colorPalette;\r\n            this.sampleContainer.sampleTypes = this.sampleTypes;\r\n            this.sampleContainer.sampleStatusList = this.sampleStatusList;\r\n            this.sampleContainer.init(parseResult, this);\r\n            sampleContainerFactory.fillSampleContainer(this.sampleContainer);\r\n            this.drawFactory.updateOptions(this);\r\n            this.drawFactory.drawShapes(this, this.sampleContainer, this.canvasTag);\r\n        }\r\n        this.displayMoveIcon();\r\n        this.handleDisplayContainerName();\r\n    }\r\n};\r\n__decorate([\r\n    state()\r\n], AwfSlydini.prototype, \"onColorValueChanged\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"displayOutline\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"displayDecoration\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"displayLabel\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"vialSelection\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"clearSelectionClickingOutside\", void 0);\r\n__decorate([\r\n    property({ type: SelectionMode, reflect: true })\r\n], AwfSlydini.prototype, \"selectionMode\", void 0);\r\n__decorate([\r\n    property({ type: SelectionOrder, reflect: true })\r\n], AwfSlydini.prototype, \"selectionOrder\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"orderingArrow\", void 0);\r\n__decorate([\r\n    property({ type: String, reflect: true })\r\n], AwfSlydini.prototype, \"xmlCode\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"xmlStyle\", void 0);\r\n__decorate([\r\n    property({ type: Number, reflect: true })\r\n], AwfSlydini.prototype, \"startOffset\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"allowMoveSelection\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"displayContainerName\", void 0);\r\n__decorate([\r\n    property({ type: String, reflect: true })\r\n], AwfSlydini.prototype, \"containerName\", void 0);\r\n__decorate([\r\n    property({ type: String, reflect: true })\r\n], AwfSlydini.prototype, \"containerNameVerticalPosition\", void 0);\r\n__decorate([\r\n    property({ type: String, reflect: true })\r\n], AwfSlydini.prototype, \"containerNameHorizontalPosition\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"displayStatusIcon\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"zoom\", void 0);\r\n__decorate([\r\n    property({ type: Number, reflect: true })\r\n], AwfSlydini.prototype, \"defaultSampleTextSize\", void 0);\r\n__decorate([\r\n    property({ type: Number, reflect: true })\r\n], AwfSlydini.prototype, \"containerRotation\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSlydini.prototype, \"displayConfirmationDialog\", void 0);\r\n__decorate([\r\n    query('awf-modal.xmlValidationDialogContainer')\r\n], AwfSlydini.prototype, \"modal\", void 0);\r\n__decorate([\r\n    query('awf-modal-dialog.xmlValidationDialog')\r\n], AwfSlydini.prototype, \"modalDialog\", void 0);\r\n__decorate([\r\n    query('awf-modal.moveSelectionDialogContainer')\r\n], AwfSlydini.prototype, \"moveSelectionDialogContainer\", void 0);\r\n__decorate([\r\n    query('awf-modal-dialog.moveSelectionDialog')\r\n], AwfSlydini.prototype, \"moveSelectionDialog\", void 0);\r\n__decorate([\r\n    query('h3.container-name')\r\n], AwfSlydini.prototype, \"containerNameHeader\", void 0);\r\n__decorate([\r\n    query('canvas')\r\n], AwfSlydini.prototype, \"canvasTag\", void 0);\r\n__decorate([\r\n    query('awf-chip.exit-multiselect')\r\n], AwfSlydini.prototype, \"exitMultiselectChip\", void 0);\r\n__decorate([\r\n    query('awf-icon.moveIcon')\r\n], AwfSlydini.prototype, \"moveIcon\", void 0);\r\nAwfSlydini = __decorate([\r\n    customElement('awf-slydini', true)\r\n], AwfSlydini);\r\nexport { AwfSlydini };\r\n//# sourceMappingURL=slydini.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const SPINNER_STYLES = css `\r\n    :host {\r\n        display: inline-block;\r\n        width: var(--awf-spinner-size-inner);\r\n        height: var(--awf-spinner-size-inner);\r\n    }\r\n\r\n    :host([onBackground='white'][navy]) {\r\n        --awf-spinner-border-background-color-inner: var(--at-gray-extra-pale);\r\n    }\r\n\r\n    :host([onBackground='periwinkle'][navy]) {\r\n        --awf-spinner-border-background-color-inner: var(--at-periwinkle-light);\r\n    }\r\n\r\n    :host([onBackground='blue-luminous'][navy]) {\r\n        --awf-spinner-border-background-color-inner: var(--at-white);\r\n    }\r\n\r\n    div {\r\n        width: var(--awf-spinner-size-inner);\r\n        height: var(--awf-spinner-size-inner);\r\n        border: var(--awf-spinner-border-width-inner) solid var(--awf-spinner-border-background-color-inner);\r\n        box-sizing: border-box;\r\n        border-top: var(--awf-spinner-border-width-inner) solid var(--awf-spinner-border-color-inner);\r\n        border-radius: 50%;\r\n        animation: spin 1.1s linear infinite, color-change 3.3s linear infinite;\r\n    }\r\n\r\n    :host([small]) div {\r\n        width: var(--awf-spinner-small-size-inner);\r\n        height: var(--awf-spinner-small-size-inner);\r\n        border: var(--awf-spinner-small-border-width-inner) solid var(--awf-spinner-border-background-color-inner);\r\n        border-top: var(--awf-spinner-small-border-width-inner) solid var(--awf-spinner-border-color-inner);\r\n    }\r\n\r\n    :host([navy]) div {\r\n        animation: spin 1.1s linear infinite;\r\n    }\r\n\r\n    @keyframes spin {\r\n        0% {\r\n            transform: rotate(0deg);\r\n        }\r\n        100% {\r\n            transform: rotate(360deg);\r\n        }\r\n    }\r\n\r\n    @keyframes color-change {\r\n        100%,\r\n        0%,\r\n        28% {\r\n            border-top-color: var(--at-blue);\r\n        }\r\n        33%,\r\n        62% {\r\n            border-top-color: var(--at-blue-midtone);\r\n        }\r\n        67%,\r\n        95% {\r\n            border-top-color: var(--at-blue-dark);\r\n        }\r\n    }\r\n`;\r\n//# sourceMappingURL=spinner.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { SPINNER_CSS_VARIABLES } from './spinner.css-variables.styles';\r\nimport { SPINNER_STYLES } from './spinner.styles';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/status-communication/spinner-loader)\r\n */\r\n// eslint-disable-next-line no-shadow\r\nexport var AwfSpinnerBackground;\r\n(function (AwfSpinnerBackground) {\r\n    AwfSpinnerBackground[\"WHITE\"] = \"white\";\r\n    AwfSpinnerBackground[\"PERIWINKLE\"] = \"periwinkle\";\r\n    AwfSpinnerBackground[\"BLUELUMINOUS\"] = \"blue-luminous\";\r\n})(AwfSpinnerBackground || (AwfSpinnerBackground = {}));\r\nlet AwfSpinner = class AwfSpinner extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * If true, the spinner uses dark navy as the only color for the animation.\r\n         * If false, the spinner is displayed in a lighter blue with a color change.\r\n         * Default is <code>false</code>,\r\n         */\r\n        this.navy = false;\r\n        /**\r\n         * Switches the spinner to the smaller form factor (40px).\r\n         * Default is <code>false</code>.\r\n         */\r\n        this.small = false;\r\n        /**\r\n         * Changes the circle color of the spinner to adapt it to <code>white</code>, <code>periwinkle</code> and <code>blue-luminous</code> backgrounds.\r\n         * Only available for dark navy spinners.\r\n         * Default is <code>white</code>.\r\n         */\r\n        this.onBackground = AwfSpinnerBackground.WHITE;\r\n    }\r\n    render() {\r\n        return html `<div></div>`;\r\n    }\r\n};\r\nAwfSpinner.styles = [COMMON_STYLES, SPINNER_CSS_VARIABLES, SPINNER_STYLES];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSpinner.prototype, \"navy\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfSpinner.prototype, \"small\", void 0);\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfSpinner.prototype, \"onBackground\", void 0);\r\nAwfSpinner = __decorate([\r\n    customElement('awf-spinner', true)\r\n], AwfSpinner);\r\nexport { AwfSpinner };\r\n//# sourceMappingURL=spinner.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const STEP_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-step-background-color-inner: var(--awf-step-background-color, var(--at-white));\r\n        --awf-step-border-color-inner: var(--awf-step-border-color, var(--at-gray));\r\n        --awf-step-font-size-inner: var(--awf-step-font-size, 0.875rem);\r\n        --awf-step-icon-size-inner: var(--awf-step-icon-size, 24px);\r\n        --awf-step-text-color-inner: var(--awf-step-text-color, var(--at-dark-navy));\r\n    }\r\n`;\r\n//# sourceMappingURL=step.css-variables.styles.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const STEP_STYLES = css `\r\n    :host {\r\n        --awf-icon-color: var(--at-dark-navy);\r\n        --awf-step-border-width-inner: calc(1.5 * var(--awf-stepper-height-inner, 32px) / 32);\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        flex: 1 1 0px;\r\n        height: 100%;\r\n        width: 100%;\r\n        max-width: 100%;\r\n        min-width: 0;\r\n        margin: 0 calc(-6 * var(--awf-stepper-height-inner, 32px) / 32);\r\n        color: var(--awf-step-text-color-inner);\r\n    }\r\n\r\n    :host(:first-of-type) {\r\n        margin-left: 0;\r\n        border-left: var(--awf-step-border-width-inner, 1.5px) solid var(--awf-step-border-color-inner);\r\n    }\r\n\r\n    :host(:first-of-type) .prefix {\r\n        display: none;\r\n    }\r\n\r\n    :host(:last-of-type) {\r\n        margin-right: 0;\r\n        border-right: var(--awf-step-border-width-inner, 1.5px) solid var(--awf-step-border-color-inner);\r\n    }\r\n\r\n    :host(:last-of-type) .postfix {\r\n        display: none;\r\n    }\r\n\r\n    .stretch-area {\r\n        position: relative;\r\n        display: flex;\r\n        flex-grow: 1;\r\n        height: 100%;\r\n        background: var(--awf-step-background-color-inner);\r\n    }\r\n\r\n    .content {\r\n        position: absolute;\r\n        display: flex;\r\n        flex-grow: 1;\r\n        height: 100%;\r\n        width: 100%;\r\n        line-height: 20px;\r\n        align-items: center;\r\n        gap: 8px;\r\n        box-sizing: border-box;\r\n        padding: 0 8px;\r\n    }\r\n\r\n    .background {\r\n        position: absolute;\r\n        display: flex;\r\n        flex: 1 1 0px;\r\n        height: 100%;\r\n        width: 100%;\r\n        max-width: 100%;\r\n        min-width: 0;\r\n        left: 0;\r\n        align-items: center;\r\n    }\r\n\r\n    .prefix {\r\n        display: flex;\r\n        flex: 0 0 auto;\r\n        height: 100%;\r\n        margin-right: -1px;\r\n    }\r\n\r\n    .postfix {\r\n        display: flex;\r\n        flex: 0 0 auto;\r\n        height: 100%;\r\n        margin-left: -1px;\r\n    }\r\n\r\n    svg {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n\r\n    awf-icon {\r\n        min-width: 16px;\r\n        max-width: 16px;\r\n        --awf-icon-size: 16px;\r\n    }\r\n\r\n    .text {\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n        font-size: var(--awf-step-font-size-inner);\r\n    }\r\n\r\n    ::slotted([slot='icon']) {\r\n        max-height: 100%;\r\n        max-width: var(--awf-step-icon-size-inner);\r\n        --awf-spinner-size: 16px;\r\n        --awf-spinner-border-width: 2px;\r\n        --awf-icon-size: var(--awf-step-icon-size-inner);\r\n        --awf-icon-color: var(--at-dark-navy);\r\n    }\r\n\r\n    :host([selected]) {\r\n        --awf-step-background-color: var(--at-blue-medium);\r\n        --awf-step-border-color: var(--at-blue-shade);\r\n        --awf-step-text-color: var(--at-dark-navy);\r\n    }\r\n\r\n    :host([previewed]:not([selected]):not(:hover)) {\r\n        --awf-step-background-color: var(--at-blue-soft);\r\n        --awf-step-border-color: var(--at-gray);\r\n        --awf-step-text-color: var(--at-dark-navy);\r\n    }\r\n    :host(:hover) {\r\n        --awf-step-background-color: var(--at-blue-soft);\r\n        --awf-step-border-color: var(--at-blue-shade);\r\n        --awf-step-text-color: var(--at-dark-navy);\r\n    }\r\n\r\n    :host([disabled]) {\r\n        --awf-step-background-color: var(--at-white);\r\n        --awf-step-border-color: var(--at-gray);\r\n        --awf-step-text-color: var(--at-gray);\r\n\r\n        pointer-events: none;\r\n    }\r\n\r\n    :host([disabled]) ::slotted([slot='icon']) {\r\n        --awf-icon-color: var(--at-gray);\r\n    }\r\n`;\r\n//# sourceMappingURL=step.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agSampleStatusIndicatorAcquiringInProgressSolid, agSampleStatusIndicatorErrorFilledRedSolid, agSampleStatusIndicatorSkippedSolid, agSampleStatusIndicatorSuccessFilledGreenSolid, agSampleStatusIndicatorWarningFilledYellowSolid, } from '@agilent/web-icons/static/small';\r\nimport { LitElement, html } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { moveElementsIntoSlot } from '../../common/utils/util';\r\nimport { STEPPER_CSS_VARIABLES } from '../../molecules/stepper/stepper.css-variables.styles';\r\nimport { STEP_CSS_VARIABLES } from './step.css-variables.styles';\r\nimport { STEP_STYLES } from './step.styles';\r\n// eslint-disable-next-line no-shadow\r\nexport var StepStatus;\r\n(function (StepStatus) {\r\n    StepStatus[\"COMPLETED\"] = \"completed\";\r\n    StepStatus[\"PROGRESSING\"] = \"progressing\";\r\n    StepStatus[\"WARNING\"] = \"warning\";\r\n    StepStatus[\"ERROR\"] = \"error\";\r\n    StepStatus[\"SKIPPED\"] = \"skipped\";\r\n})(StepStatus || (StepStatus = {}));\r\nexport const STEP_STATUS_ICON_MAPPING = new Map([\r\n    [StepStatus.COMPLETED, agSampleStatusIndicatorSuccessFilledGreenSolid],\r\n    [StepStatus.PROGRESSING, agSampleStatusIndicatorAcquiringInProgressSolid],\r\n    [StepStatus.WARNING, agSampleStatusIndicatorWarningFilledYellowSolid],\r\n    [StepStatus.ERROR, agSampleStatusIndicatorErrorFilledRedSolid],\r\n    [StepStatus.SKIPPED, agSampleStatusIndicatorSkippedSolid],\r\n]);\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/stepper)\r\n */\r\nlet AwfStep = class AwfStep extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * When true, then this step is selected and highlighted.\r\n         */\r\n        this.selected = false;\r\n        /**\r\n         * When true, then this step was already selected and previewed.\r\n         */\r\n        this.previewed = false;\r\n        /**\r\n         * When true, clicking on the step will have no effect.\r\n         */\r\n        this.disabled = false;\r\n    }\r\n    static get styles() {\r\n        return [COMMON_STYLES, STEPPER_CSS_VARIABLES, STEP_CSS_VARIABLES, STEP_STYLES];\r\n    }\r\n    render() {\r\n        return html ` <div class=\"prefix\">\r\n                <svg viewBox=\"0 0 11 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M0 24 H11 V0 H0 L9 12 L0 24 Z\" fill=\"var(--awf-step-background-color-inner)\" />\r\n                    <path d=\"M11 0.5 H1 L9.4 12 L1 23.5 H11\" stroke=\"var(--awf-step-border-color-inner)\" />\r\n                </svg>\r\n            </div>\r\n            <div class=\"stretch-area\">\r\n                <div class=\"content\">\r\n                    <slot name=\"icon\">${this.renderIcon()}</slot>\r\n                    <div class=\"text\">\r\n                        <slot @slotchange=${this.handleSlotChange}></slot>\r\n                    </div>\r\n                </div>\r\n                <div class=\"background\">\r\n                    <svg viewBox=\"0 0 16 24\" preserveAspectRatio=\"none\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M0 0 H16 M 0 24 H16 Z\" stroke=\"var(--awf-step-border-color-inner)\" stroke-width=\"2\" />\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n            <div class=\"postfix\">\r\n                <svg viewBox=\"0 0 11 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M1 0 L10 12 L1 24 H0 V0 H1 Z\" fill=\"var(--awf-step-background-color-inner)\" />\r\n                    <path d=\"M0 23.5 H1 L9.4 12 L1 0.5 L0 0.5\" stroke=\"var(--awf-step-border-color-inner)\" />\r\n                </svg>\r\n            </div>`;\r\n    }\r\n    /** @inheritdoc */\r\n    updated(changes) {\r\n        if (changes.has('disabled')) {\r\n            if (this.disabled) {\r\n                this.setAttribute('aria-disabled', 'true');\r\n            }\r\n            else {\r\n                this.removeAttribute('aria-disabled');\r\n            }\r\n        }\r\n    }\r\n    renderIcon() {\r\n        if (!this.status) {\r\n            return html ``;\r\n        }\r\n        const iconName = STEP_STATUS_ICON_MAPPING.get(this.status) ?? '';\r\n        return html `<awf-icon raw=${iconName}></awf-icon>`;\r\n    }\r\n    handleSlotChange() {\r\n        const selector = 'slot:not([name])';\r\n        const target = this.shadowRoot.querySelector(selector);\r\n        if (target) {\r\n            moveElementsIntoSlot(target, 'awf-icon', 'icon');\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfStep.prototype, \"status\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfStep.prototype, \"selected\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfStep.prototype, \"previewed\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfStep.prototype, \"disabled\", void 0);\r\nAwfStep = __decorate([\r\n    customElement('awf-step', true)\r\n], AwfStep);\r\nexport { AwfStep };\r\n//# sourceMappingURL=step.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { css, html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nlet AwfTabPanel = class AwfTabPanel extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * If true, then the tab-panel is visible, otherwise it is hidden.\r\n         */\r\n        this.selected = false;\r\n        /**\r\n         * Property to identify the panel.\r\n         * Has to be identical to the value of the corresponding awf-tab.\r\n         */\r\n        this.value = '';\r\n        /**\r\n         * Property is by default false.\r\n         * If true, then all tabs that don't match a panel value open this panel.\r\n         * If tab-set only contains 1 panel, then it is set to true.\r\n         * It can also be set manually.\r\n         */\r\n        this.defaultPanel = false;\r\n    }\r\n    render() {\r\n        return html ` <slot></slot> `;\r\n    }\r\n    firstUpdated() {\r\n        this.tabIndex = 0;\r\n        this.setAttribute('role', 'tab');\r\n    }\r\n    updated(changes) {\r\n        super.updated(changes);\r\n        if (changes.has('selected')) {\r\n            if (this.selected) {\r\n                this.removeAttribute('aria-hidden');\r\n                this.tabIndex = 0;\r\n            }\r\n            else {\r\n                this.setAttribute('aria-hidden', 'true');\r\n                this.tabIndex = -1;\r\n            }\r\n        }\r\n    }\r\n};\r\nAwfTabPanel.styles = [\r\n    COMMON_STYLES,\r\n    css `\r\n            :host {\r\n                display: flex;\r\n                padding: 10px;\r\n            }\r\n\r\n            :host(:not([selected])) {\r\n                display: none;\r\n            }\r\n        `\r\n];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfTabPanel.prototype, \"selected\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfTabPanel.prototype, \"value\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfTabPanel.prototype, \"defaultPanel\", void 0);\r\nAwfTabPanel = __decorate([\r\n    customElement('awf-tab-panel', true)\r\n], AwfTabPanel);\r\nexport { AwfTabPanel };\r\n//# sourceMappingURL=tab-panel.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const TAB__STYLES = css `\r\n    :host {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n        user-select: none;\r\n        box-sizing: border-box;\r\n        height: var(--awf-tab-height-inner);\r\n        max-width: 250px;\r\n\r\n        transition-property: background-color;\r\n        transition: var(--transition-duration) var(--transition-timing-function);\r\n    }\r\n\r\n    .content {\r\n        align-items: center;\r\n        box-sizing: border-box;\r\n        display: grid;\r\n        font-size: var(--awf-tab-font-size-inner);\r\n        grid-template-columns: auto 1fr auto;\r\n        height: 100%;\r\n        padding: var(--awf-tab-padding-inner);\r\n        width: 100%;\r\n    }\r\n\r\n    :host(:not([disabled])) .content {\r\n        cursor: pointer;\r\n    }\r\n\r\n    :host([disabled]) {\r\n        --awf-icon-color: var(--at-gray);\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    :host([disabled]) ::slotted(:not([slot])) {\r\n        color: var(--at-gray);\r\n    }\r\n\r\n    ::slotted(:not([slot])) {\r\n        color: var(--at-dark-navy);\r\n        cursor: inherit;\r\n        grid-column: 2;\r\n        line-height: 24px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    :host([label]) ::slotted([slot=prefix]) {\r\n        padding: 0 8px 0 0;\r\n    }\r\n\r\n    :host([selected]:not([disabled])) {\r\n        background-color: var(--at-blue-medium);\r\n    }\r\n\r\n    ::slotted([slot=prefix]) {\r\n        grid-column: 1;\r\n    }\r\n\r\n    ::slotted([slot=suffix]) {\r\n        padding-left: 8px;\r\n        grid-column: 3;\r\n    }\r\n\r\n    ::slotted([slot=prefix][showOnHover]),\r\n    ::slotted([slot=suffix][showOnHover]) {\r\n        visibility: hidden;\r\n    }\r\n\r\n    :host(:hover) ::slotted([slot=prefix][showOnHover]),\r\n    :host(:hover) ::slotted([slot=suffix][showOnHover]) {\r\n        visibility: visible;\r\n    }\r\n\r\n`;\r\n//# sourceMappingURL=tab.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { TAB_CSS_VARIABLES } from './tab.css-variables.styles';\r\nimport { TAB__STYLES } from './tab.styles';\r\nlet AwfTab = class AwfTab extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * If true, then the tab is selected.\r\n         */\r\n        this.selected = false;\r\n        /**\r\n         * Property to identify the tab.\r\n         * Has to be identical to the value of the corresponding awf-tab-panel.\r\n         */\r\n        this.value = '';\r\n        /**\r\n         * If true, then the tab is disabled and can't be selected.\r\n         */\r\n        this.disabled = false;\r\n    }\r\n    static get styles() {\r\n        return [COMMON_STYLES, TAB_CSS_VARIABLES, TAB__STYLES];\r\n    }\r\n    render() {\r\n        return html ` <div class=\"content\">\r\n            <slot name=\"prefix\"></slot>\r\n            <slot></slot>\r\n            <slot name=\"suffix\"></slot>\r\n        </div>`;\r\n    }\r\n    /** @inheritdoc */\r\n    firstUpdated() {\r\n        this.setAttribute('role', 'tab');\r\n    }\r\n    /** @inheritdoc */\r\n    updated(changes) {\r\n        if (changes.has('selected')) {\r\n            this.setAttribute('aria-selected', `${this.selected}`);\r\n            this.tabIndex = this.selected ? 0 : -1;\r\n        }\r\n        if (changes.has('disabled')) {\r\n            if (this.disabled) {\r\n                this.setAttribute('aria-disabled', 'true');\r\n            }\r\n            else {\r\n                this.removeAttribute('aria-disabled');\r\n            }\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfTab.prototype, \"selected\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfTab.prototype, \"value\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfTab.prototype, \"disabled\", void 0);\r\nAwfTab = __decorate([\r\n    customElement('awf-tab', true)\r\n], AwfTab);\r\nexport { AwfTab };\r\n//# sourceMappingURL=tab.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { html, LitElement } from 'lit';\r\nimport { property, queryAssignedElements } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { listenPropertyChangeWithCallback } from '../../common/utils/listen-property-change';\r\nimport { reflectAttributes } from '../../common/utils/util';\r\nimport { TOGGLE_STYLES } from './toggle.styles';\r\nlet AwfToggle = class AwfToggle extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Set this property to true when the toggle component is placed in an element with a colored background.\r\n         */\r\n        this.dark = false;\r\n        /**\r\n         * The position of the label.\r\n         */\r\n        this.labelPosition = 'left';\r\n        /** @ignore */\r\n        this.checked = false;\r\n        /** @ignore */\r\n        this.disabled = false;\r\n    }\r\n    render() {\r\n        return html `<slot @slotchange=${this.slotChange}></slot>`;\r\n    }\r\n    slotChange() {\r\n        const [input] = this.inputNodes;\r\n        const [label] = this.labelNodes;\r\n        if (!input) {\r\n            return;\r\n        }\r\n        if (input !== this.input) {\r\n            this.input = input;\r\n            input.type = 'checkbox';\r\n            input.id || (input.id = 'checkbox');\r\n            this.reflectAttributes(input);\r\n        }\r\n        this.moveLabelIfNeeded(input, label);\r\n    }\r\n    moveLabelIfNeeded(input, label) {\r\n        if (!label) {\r\n            label = document.createElement('label');\r\n            label.setAttribute('for', input?.id);\r\n        }\r\n        if (input.nextElementSibling !== label) {\r\n            input.after(label);\r\n        }\r\n    }\r\n    reflectAttributes(input) {\r\n        this.mutationObserver?.disconnect();\r\n        this.mutationObserver = reflectAttributes(input, this, ['checked', 'disabled']);\r\n        const reflectCheckedAttribute = () => {\r\n            if (input.checked) {\r\n                this.setAttribute('checked', '');\r\n            }\r\n            else {\r\n                this.removeAttribute('checked');\r\n            }\r\n        };\r\n        // Reflect both programmatic changes of the checked property as well as user-related changes\r\n        listenPropertyChangeWithCallback(input, reflectCheckedAttribute, 'checked');\r\n        input.addEventListener('change', reflectCheckedAttribute);\r\n        input.addEventListener('focus', () => this.classList.add('focused'));\r\n        input.addEventListener('blur', () => this.classList.remove('focused'));\r\n    }\r\n};\r\nAwfToggle.styles = [COMMON_STYLES, TOGGLE_STYLES];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfToggle.prototype, \"dark\", void 0);\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfToggle.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfToggle.prototype, \"checked\", void 0);\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfToggle.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'label' })\r\n], AwfToggle.prototype, \"labelNodes\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'input' })\r\n], AwfToggle.prototype, \"inputNodes\", void 0);\r\nAwfToggle = __decorate([\r\n    customElement('awf-toggle', true)\r\n], AwfToggle);\r\nexport { AwfToggle };\r\n//# sourceMappingURL=toggle.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const WIDGET_CONTAINER_STYLES = css `\r\n    :host {\r\n        background-color: var(--at-white);\r\n        width: 100%;\r\n        height: var(--awf-widget-container-height-inner);\r\n        box-sizing: border-box;\r\n        border: 1px solid var(--at-gray-soft);\r\n    }\r\n\r\n    .header {\r\n        height: 40px;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        box-sizing: border-box;\r\n        border-bottom: 4px solid var(--module-status-color, transparent);\r\n        font-size: 16px;\r\n        padding: var(--awf-widget-container-header-padding-inner);\r\n    }\r\n\r\n    :host(:not([status])) .header {\r\n        border-bottom: 1px solid var(--awf-widget-container-border-color-inner);\r\n    }\r\n\r\n    slot[name='context'] {\r\n        font-size: 14px;\r\n    }\r\n\r\n    .body {\r\n        width: 100%;\r\n        height: calc(var(--awf-widget-container-height-inner) - 40px);\r\n        padding: var(--awf-widget-container-content-padding-inner);\r\n        box-sizing: border-box;\r\n    }\r\n`;\r\n//# sourceMappingURL=widget-container.styles.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element.js';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles.js';\r\nimport { STATUS_COLOR_MAPPING } from '../../common/utils/status.enum.js';\r\nimport { WIDGET_CONTAINER_CSS_VARIABLES } from './widget-container.css-variables.styles.js';\r\nimport { WIDGET_CONTAINER_STYLES } from './widget-container.styles.js';\r\nlet AwfWidgetContainer = class AwfWidgetContainer extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * If true, the header of the container will not be shown.\r\n         */\r\n        this.noHeader = false;\r\n    }\r\n    render() {\r\n        this.determineStatusColor();\r\n        return html `${this.getHeader()}\r\n            <div class=\"body\"><slot></slot></div>`;\r\n    }\r\n    updated() {\r\n        this.determineGridArea();\r\n    }\r\n    determineStatusColor() {\r\n        if (this.status) {\r\n            const color = STATUS_COLOR_MAPPING.get(this.status) ?? 'var(--at-violet)';\r\n            this.style.setProperty('--module-status-color', color);\r\n        }\r\n    }\r\n    getHeader() {\r\n        if (this.noHeader) {\r\n            return html ``;\r\n        }\r\n        let headerContent = html `<slot name=\"header\"></slot>`;\r\n        if (this.header) {\r\n            headerContent = html `${this.header}`;\r\n        }\r\n        return html `<div class=\"header\">\r\n            ${headerContent}\r\n            <slot name=\"context\"></slot>\r\n        </div>`;\r\n    }\r\n    determineGridArea() {\r\n        const columnStart = this.getStart('column');\r\n        const columnEnd = this.getEnd('columnSpan');\r\n        const rowStart = this.getStart('row');\r\n        const rowEnd = this.getEnd('rowSpan');\r\n        this.style.gridRowStart = rowStart;\r\n        this.style.gridRowEnd = rowEnd;\r\n        this.style.gridColumnStart = columnStart;\r\n        this.style.gridColumnEnd = columnEnd;\r\n    }\r\n    getStart(prop) {\r\n        return this[prop] ? `${this[prop]}` : 'auto';\r\n    }\r\n    getEnd(prop) {\r\n        return this[prop] ? `span ${this[prop]}` : 'auto';\r\n    }\r\n};\r\nAwfWidgetContainer.styles = [COMMON_STYLES, WIDGET_CONTAINER_CSS_VARIABLES, WIDGET_CONTAINER_STYLES];\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfWidgetContainer.prototype, \"row\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfWidgetContainer.prototype, \"column\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfWidgetContainer.prototype, \"rowSpan\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfWidgetContainer.prototype, \"columnSpan\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfWidgetContainer.prototype, \"header\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfWidgetContainer.prototype, \"noHeader\", void 0);\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfWidgetContainer.prototype, \"status\", void 0);\r\nAwfWidgetContainer = __decorate([\r\n    customElement('awf-widget-container', true)\r\n], AwfWidgetContainer);\r\nexport { AwfWidgetContainer };\r\n//# sourceMappingURL=widget-container.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css, html, LitElement } from 'lit';\r\nimport { property, queryAssignedElements } from 'lit/decorators.js';\r\nimport { AwfAccordionPanel } from '../../atoms/accordion-panel/accordion-panel';\r\nimport { ACCORDION_PANEL_CSS_VARIABLES } from '../../atoms/accordion-panel/accordion-panel.css-variables.styles';\r\nimport '../../atoms/accordion-panel/accordion-panel.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { dispatchCustomEvent } from '../../common/utils/util';\r\nlet AwfAccordion = class AwfAccordion extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * When true, the accordions expand one at a time, collapsing the previously expanded one.\r\n         */\r\n        this.single = false;\r\n        this.dispatchCustomEvent = dispatchCustomEvent.bind(this);\r\n    }\r\n    /**\r\n     * Returns true if the panel at the given index is expanded. If the index is out of bounds, it returns false.\r\n     *\r\n     * @param index of the panel.\r\n     */\r\n    isExpanded(index) {\r\n        const child = this.panels[index];\r\n        if (child != null) {\r\n            return child.expanded;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Toggles the expanded state of the panel at the given index. If the index is out of bounds, nothing happens.\r\n     *\r\n     * @param index of the panel to toggle the expanded state of.\r\n     */\r\n    toggle(index) {\r\n        const child = this.panels[index];\r\n        if (child != null) {\r\n            child.toggle();\r\n        }\r\n    }\r\n    /**\r\n     * Expands the panel at the given index. If the index is out of bounds, nothing happens.\r\n     *\r\n     * @param index of the panel to expand.\r\n     */\r\n    expand(index) {\r\n        const child = this.panels[index];\r\n        if (child != null) {\r\n            child.expand();\r\n        }\r\n    }\r\n    /**\r\n     * Expands all children accordion panels. If <code>single</code> is <code>true</code>, only the first one is expanded.\r\n     */\r\n    expandAll() {\r\n        if (this.single) {\r\n            this.expand(0);\r\n        }\r\n        else {\r\n            this.panels.forEach(child => child.expand());\r\n        }\r\n    }\r\n    /**\r\n     * Collapses the panel at the given index. If the index is out of bounds, nothing happens.\r\n     *\r\n     * @param index of the panel to collapse.\r\n     */\r\n    collapse(index) {\r\n        const child = this.panels[index];\r\n        if (child != null) {\r\n            child.collapse();\r\n        }\r\n    }\r\n    /**\r\n     * Collapses all child accordion panels.\r\n     */\r\n    collapseAll() {\r\n        this.panels.forEach(child => child.collapse());\r\n    }\r\n    render() {\r\n        return html ` <slot @open=${this.handleOpenEvent} @close=${this.panelChanged}></slot> `;\r\n    }\r\n    handleOpenEvent({ target }) {\r\n        if (this.single && target instanceof AwfAccordionPanel) {\r\n            this.panels.forEach(panel => panel.expanded = panel === target);\r\n        }\r\n        this.panelChanged();\r\n    }\r\n    panelChanged() {\r\n        this.dispatchCustomEvent('panelChanged');\r\n    }\r\n};\r\nAwfAccordion.styles = [COMMON_STYLES, ACCORDION_PANEL_CSS_VARIABLES, css `\r\n        :host {\r\n            display: block;\r\n            border-bottom: var(--awf-accordion-panel-item-separator-border-inner);\r\n        }\r\n    `];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfAccordion.prototype, \"single\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'awf-accordion-panel', flatten: true })\r\n], AwfAccordion.prototype, \"panels\", void 0);\r\nAwfAccordion = __decorate([\r\n    customElement('awf-accordion', true)\r\n], AwfAccordion);\r\nexport { AwfAccordion };\r\n//# sourceMappingURL=accordion.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css, html, LitElement } from 'lit';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nlet AwfButtonGroup = class AwfButtonGroup extends LitElement {\r\n    static get styles() {\r\n        return [COMMON_STYLES, css `\r\n            :host {\r\n                display: grid;\r\n                grid-auto-columns: max-content;\r\n                grid-auto-flow: column;\r\n                grid-gap: 16px;\r\n            }\r\n        `];\r\n    }\r\n    render() {\r\n        return html `<slot></slot>`;\r\n    }\r\n};\r\nAwfButtonGroup = __decorate([\r\n    customElement('awf-button-group', true)\r\n], AwfButtonGroup);\r\nexport { AwfButtonGroup };\r\n//# sourceMappingURL=button-group.js.map","/*\r\n * © Agilent Technologies, Inc. 2022.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const CAROUSEL_STYLES = css `\r\n    :host {\r\n        display: block;\r\n        width: var(--awf-carousel-width-inner);\r\n        padding: 0 35px;\r\n        position: relative;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .slider {\r\n        align-items: stretch;\r\n        display: flex;\r\n        width: auto;\r\n        box-sizing: border-box;\r\n        overflow: hidden;\r\n        user-select: none;\r\n        touch-action: pan-y;\r\n        height: var(--awf-carousel-page-height-inner, 100%);\r\n    }\r\n\r\n    .slides {\r\n        display: flex;\r\n        background-color: var(--awf-carousel-background-color-inner);\r\n    }\r\n\r\n    .button-next,\r\n    .button-prev {\r\n        border-radius: 50%;\r\n        cursor: pointer;\r\n        height: 32px;\r\n        position: absolute;\r\n        top: calc(var(--awf-carousel-page-height-inner) / 2 - 16px);\r\n        width: 32px;\r\n        z-index: var(--awf-elevation-z2);\r\n    }\r\n\r\n    .button-prev {\r\n        left: 0;\r\n    }\r\n\r\n    .button-next {\r\n        right: 0;\r\n    }\r\n\r\n    .button-prev:hover,\r\n    .button-next:hover {\r\n        background-color: var(--at-blue-soft);\r\n    }\r\n\r\n    :host([hideArrows]) .button-prev,\r\n    :host([hideArrows]) .button-next {\r\n        display: none;\r\n    }\r\n\r\n    .button-prev.disabled,\r\n    .button-next.disabled {\r\n        cursor: default;\r\n        pointer-events: none;\r\n    }\r\n\r\n    .button-prev.disabled awf-icon,\r\n    .button-next.disabled awf-icon {\r\n        --awf-icon-color: var(--at-gray);\r\n    }\r\n\r\n    awf-icon {\r\n        --awf-icon-color: var(--at-blue);\r\n        width: 32px;\r\n        height: 32px;\r\n    }\r\n\r\n    .bullet-container {\r\n        width: auto;\r\n        margin-top: 8px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    :host([hideBullets]) .bullet-container {\r\n        display: none;\r\n    }\r\n\r\n    .bullet {\r\n        border: none;\r\n        width: 8px;\r\n        height: 8px;\r\n        background: var(--at-gray-soft);\r\n        border-radius: 50%;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .bullet:not(:first-of-type) {\r\n        margin-left: 4px;\r\n    }\r\n\r\n    .bullet.active {\r\n        background: var(--at-gray-dark);\r\n    }\r\n`;\r\n//# sourceMappingURL=carousel.styles.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { agPageNext } from '@agilent/web-icons/core/page-next.js';\r\nimport { agPagePrevious } from '@agilent/web-icons/core/page-previous.js';\r\nimport KeenSlider from 'keen-slider';\r\nimport { LitElement, html } from 'lit';\r\nimport { property, query, queryAll, queryAssignedElements } from 'lit/decorators.js';\r\nimport { repeat } from 'lit/directives/repeat.js';\r\nimport '../../atoms/button/button.js';\r\nimport '../../atoms/icon/icon.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { createCustomEvent } from '../../common/utils/util';\r\nimport { CAROUSEL_CSS_VARIABLES } from './carousel.css-variables.styles';\r\nimport { CAROUSEL_STYLES } from './carousel.styles';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/structure/carousel)\r\n */\r\nlet AwfCarousel = class AwfCarousel extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Defines the number of carousel pages per slide.\r\n         */\r\n        this.itemsPerSlide = 1;\r\n        /**\r\n         * Defines the spacing between the carousel pages.\r\n         */\r\n        this.spacing = 1;\r\n        /**\r\n         * If true, then the slides are in a continous loop.\r\n         */\r\n        this.loop = false;\r\n        /**\r\n         * If true, then the navigation arrows are hidden.\r\n         */\r\n        this.hideArrows = false;\r\n        /**\r\n         * If true, then the pagination bullets are hidden.\r\n         */\r\n        this.hideBullets = false;\r\n        /**\r\n         * If `true` - one bullet is displayed by page.\r\n         */\r\n        this.bulletPerPage = false;\r\n        /**\r\n         * Number of slides to move by.\r\n         */\r\n        this.moveBy = 1;\r\n        /**\r\n         * Index from which to display slides.\r\n         */\r\n        this.startIndex = 0;\r\n    }\r\n    get actualItemsPerSlide() {\r\n        return Math.min(this.itemsPerSlide, this.slides.length);\r\n    }\r\n    render() {\r\n        return html `\r\n            <div class=\"slider\">\r\n                <slot class=\"slides\" @slotchange=${this.slotchange}></slot>\r\n                <awf-button class=\"button-prev\" @click=${this.previous} aria-label=\"previous\">\r\n                    <awf-icon slot=\"icon\" raw=${agPagePrevious}></awf-icon>\r\n                </awf-button>\r\n                <awf-button class=\"button-next\" @click=${this.next} aria-label=\"next\">\r\n                    <awf-icon slot=\"icon\" raw=${agPageNext}></awf-icon>\r\n                </awf-button>\r\n            </div>\r\n            ${this.renderBullets()}\r\n        `;\r\n    }\r\n    firstUpdated() {\r\n        this.instantiateSwiper();\r\n    }\r\n    updated(changes) {\r\n        if (this.swiper) {\r\n            if (changes.has('loop') || changes.has('itemsPerSlide') || changes.has('spacing')) {\r\n                this.swiper.update(this.getSliderOptions());\r\n                this.updateBulletsVisibility();\r\n                this.updateArrowsVisibility();\r\n            }\r\n            this.updateArrowDisabledState();\r\n            this.updateBulletActiveState();\r\n        }\r\n    }\r\n    renderBullets() {\r\n        return html `<div class=\"bullet-container\">\r\n            ${repeat(this.getSlideIndices(), this.renderBullet.bind(this))}\r\n        </div>`;\r\n    }\r\n    renderBullet(index) {\r\n        return html `<div class=\"bullet\" value=${index} @click=${() => this.swiper?.moveToIdx(index)}></div>`;\r\n    }\r\n    slotchange() {\r\n        this.swiper?.update();\r\n        this.requestUpdate();\r\n        this.updateBulletsVisibility();\r\n        this.updateArrowsVisibility();\r\n    }\r\n    previous() {\r\n        if (!this.swiper) {\r\n            return;\r\n        }\r\n        const slideIndex = this.swiper.track.details.rel;\r\n        let goto = null;\r\n        if (!this.loop && !this.bulletPerPage && this.actualItemsPerSlide > 1) {\r\n            const slideIndices = this.getSlideIndices();\r\n            if (slideIndices[slideIndices.length - 1] === slideIndex) {\r\n                goto = slideIndices[Math.max(slideIndices.length - 2, 0)];\r\n            }\r\n        }\r\n        if (goto === null) {\r\n            goto = slideIndex - this.moveBy;\r\n            if (this.loop) {\r\n                goto = this.swiper.track.absToRel(goto);\r\n            }\r\n            else if (goto < 0) {\r\n                goto = 0;\r\n            }\r\n        }\r\n        this.swiper.moveToIdx(goto);\r\n    }\r\n    next() {\r\n        if (!this.swiper) {\r\n            return;\r\n        }\r\n        const slideIndex = this.swiper.track.details.rel;\r\n        let goto = slideIndex + this.moveBy;\r\n        if (this.loop) {\r\n            goto = this.swiper.track.absToRel(goto);\r\n        }\r\n        else if (goto > this.slides.length - this.actualItemsPerSlide) {\r\n            goto = this.slides.length - this.actualItemsPerSlide;\r\n        }\r\n        this.swiper.moveToIdx(goto);\r\n    }\r\n    getSliderOptions() {\r\n        return {\r\n            selector: () => this.slides,\r\n            loop: this.loop,\r\n            slides: { perView: this.actualItemsPerSlide, spacing: this.spacing },\r\n            slideChanged: () => {\r\n                this.updateArrowDisabledState();\r\n                this.updateBulletActiveState();\r\n                this.dispatchActiveSlideChange();\r\n            },\r\n            initial: this.startIndex\r\n        };\r\n    }\r\n    instantiateSwiper() {\r\n        this.swiper = new KeenSlider(this.wrapper, this.getSliderOptions());\r\n    }\r\n    updateBulletsVisibility() {\r\n        const isVisible = this.slides.length > 1 && this.slides.length > this.actualItemsPerSlide;\r\n        this.bulletContainer.style.visibility = isVisible ? 'visible' : 'hidden';\r\n    }\r\n    updateArrowsVisibility() {\r\n        if (this.slides.length > 1 && this.slides.length > this.actualItemsPerSlide) {\r\n            this.prevButton.style.visibility = 'visible';\r\n            this.nextButton.style.visibility = 'visible';\r\n        }\r\n        else {\r\n            this.prevButton.style.visibility = 'hidden';\r\n            this.nextButton.style.visibility = 'hidden';\r\n        }\r\n    }\r\n    getSlideIndices() {\r\n        let slideIndices = this.slides.map((_, index) => index);\r\n        if (!this.bulletPerPage && this.isMultipleItemsPerSideWithoutLoop()) {\r\n            slideIndices = [];\r\n            for (let i = 0; i < this.slides.length; i += this.moveBy) {\r\n                if (i + this.actualItemsPerSlide <= this.slides.length) {\r\n                    slideIndices.push(i);\r\n                }\r\n                else if (slideIndices.indexOf(this.slides.length - this.actualItemsPerSlide) === -1) {\r\n                    slideIndices.push(this.slides.length - this.actualItemsPerSlide);\r\n                }\r\n            }\r\n        }\r\n        return slideIndices;\r\n    }\r\n    isMultipleItemsPerSideWithoutLoop() {\r\n        return this.actualItemsPerSlide > 1 && !this.loop;\r\n    }\r\n    updateArrowDisabledState() {\r\n        if (!this.swiper || !this.swiper.track.details) {\r\n            return;\r\n        }\r\n        const slideIndex = this.swiper.track.details.rel;\r\n        this.prevButton.classList.remove('disabled');\r\n        this.nextButton.classList.remove('disabled');\r\n        if (this.loop) {\r\n            return;\r\n        }\r\n        if (slideIndex === 0) {\r\n            this.prevButton.classList.add('disabled');\r\n        }\r\n        if (slideIndex >= this.slides.length - this.actualItemsPerSlide) {\r\n            this.nextButton.classList.add('disabled');\r\n        }\r\n    }\r\n    updateBulletActiveState() {\r\n        if (!this.swiper || !this.swiper.track.details) {\r\n            return;\r\n        }\r\n        let indices;\r\n        if (this.bulletPerPage || this.loop) {\r\n            indices = this.getActiveSlidesIndex(this.swiper);\r\n        }\r\n        else {\r\n            indices = [this.swiper.track.details.rel];\r\n        }\r\n        this.bullets.forEach((bullet) => {\r\n            bullet.classList.remove('active');\r\n            const bulletValue = bullet.getAttribute('value');\r\n            if (bulletValue && indices.indexOf(Number.parseInt(bulletValue)) > -1) {\r\n                bullet.classList.add('active');\r\n            }\r\n        });\r\n    }\r\n    getActiveSlidesIndex(swiper) {\r\n        const indices = [];\r\n        const start = swiper.track.details.rel;\r\n        for (let i = start; i < start + this.actualItemsPerSlide; i++) {\r\n            indices.push(swiper.track.absToRel(i));\r\n        }\r\n        return indices;\r\n    }\r\n    dispatchActiveSlideChange() {\r\n        if (!this.swiper || !this.swiper.track.details) {\r\n            return;\r\n        }\r\n        const displayedSlideIndices = [];\r\n        const start = this.swiper.track.details.rel;\r\n        for (let i = 0; i < this.actualItemsPerSlide; i++) {\r\n            displayedSlideIndices.push(this.swiper.track.absToRel(start + i));\r\n        }\r\n        this.dispatchEvent(createCustomEvent(AwfEvent.SLIDE_ACTIVE_CHANGE, displayedSlideIndices));\r\n    }\r\n};\r\nAwfCarousel.styles = [COMMON_STYLES, CAROUSEL_CSS_VARIABLES, CAROUSEL_STYLES];\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfCarousel.prototype, \"itemsPerSlide\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfCarousel.prototype, \"spacing\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfCarousel.prototype, \"loop\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfCarousel.prototype, \"hideArrows\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfCarousel.prototype, \"hideBullets\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfCarousel.prototype, \"bulletPerPage\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfCarousel.prototype, \"moveBy\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfCarousel.prototype, \"startIndex\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'awf-carousel-page' })\r\n], AwfCarousel.prototype, \"slides\", void 0);\r\n__decorate([\r\n    query('.slider')\r\n], AwfCarousel.prototype, \"wrapper\", void 0);\r\n__decorate([\r\n    query('.button-prev')\r\n], AwfCarousel.prototype, \"prevButton\", void 0);\r\n__decorate([\r\n    query('.button-next')\r\n], AwfCarousel.prototype, \"nextButton\", void 0);\r\n__decorate([\r\n    query('.bullet-container')\r\n], AwfCarousel.prototype, \"bulletContainer\", void 0);\r\n__decorate([\r\n    queryAll('.bullet')\r\n], AwfCarousel.prototype, \"bullets\", void 0);\r\nAwfCarousel = __decorate([\r\n    customElement('awf-carousel', true)\r\n], AwfCarousel);\r\nexport { AwfCarousel };\r\n//# sourceMappingURL=carousel.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const CHECKBOX_STYLES = css `\r\n    :host {\r\n        --awf-icon-color: var(--awf-checkbox-icon-color-inner);\r\n        --awf-icon-size: var(--awf-checkbox-icon-size-inner);\r\n\r\n        display: inline-flex;\r\n    }\r\n\r\n    :host(:focus-visible) {\r\n        outline: none;\r\n    }\r\n\r\n    :host(:not([disabled]):not([error]):focus-visible) {\r\n        --awf-checkbox-icon-border-color: var(--at-blue-shade);\r\n        --awf-checkbox-label-font-color-inner: var(--awf-label-hover-font-color-inner);\r\n    }\r\n\r\n    :host([disabled]) {\r\n        --awf-checkbox-icon-background-color: var(--at-gray-soft);\r\n        --awf-checkbox-icon-border-color: var(--awf-state-disabled-border);\r\n        --awf-checkbox-icon-color-inner: var(--awf-state-disabled-foreground);\r\n        --awf-checkbox-label-font-color-inner: var(--awf-state-disabled-foreground);\r\n    }\r\n\r\n    :host([error]) {\r\n        --awf-checkbox-icon-background-color: var(--at-red-extra-light);\r\n        --awf-checkbox-icon-border-color: var(--awf-validation-error-message-font-color);\r\n        --awf-checkbox-icon-color-inner: var(--awf-validation-error-message-font-color);\r\n        --awf-checkbox-label-font-color-inner: var(--awf-validation-error-message-font-color);\r\n    }\r\n\r\n    :host([error]:hover),\r\n    :host([error]:focus-visible) {\r\n        --awf-checkbox-icon-background-color: var(--awf-validation-error-focus-background-color);\r\n    }\r\n\r\n    :host #tooltipTrigger {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    :host .checkbox {\r\n        align-items: center;\r\n        cursor: pointer;\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n\r\n    :host([labelPosition='left']) .checkbox {\r\n        flex-direction: row-reverse;\r\n        justify-content: flex-end;\r\n    }\r\n\r\n    awf-icon {\r\n        background-color: var(--awf-checkbox-icon-background-color-inner);\r\n        border: 1px solid var(--awf-checkbox-icon-border-color-inner);\r\n        color: var(--awf-icon-color);\r\n        min-height: var(--awf-checkbox-icon-size-density-high, 9px);\r\n        min-width: var(--awf-checkbox-icon-size-density-high, 9px);\r\n        padding: var(--awf-checkbox-icon-padding-inner);\r\n    }\r\n\r\n    awf-icon:not([alone]) {\r\n        margin-bottom: .5rem;\r\n        margin-right: .5rem;\r\n        margin-top: .5rem;\r\n    }\r\n\r\n    :host([labelPosition='left']) awf-icon:not([alone]) {\r\n        margin-left: .5rem;\r\n        margin-right: 0;\r\n    }\r\n\r\n    :host(:not([disabled]):not([error]):hover) awf-icon {\r\n        --awf-checkbox-icon-background-color-inner: var(--at-blue-soft);\r\n    }\r\n\r\n    ::slotted(label) {\r\n        color: var(--awf-checkbox-label-font-color-inner);\r\n        cursor: pointer;\r\n        font-size: var(--awf-checkbox-label-font-size-inner);\r\n        font-style: var(--awf-checkbox-label-font-style-inner);\r\n        width: var(--awf-label-width);\r\n    }\r\n\r\n    :host([required]) ::slotted(label)::after {\r\n        content: ' *';\r\n        color: var(--awf-checkbox-label-font-color-inner);\r\n    }\r\n\r\n    ::slotted(input) {\r\n        display: none;\r\n    }\r\n\r\n    ::slotted([slot='error']),\r\n    .internalError {\r\n        color: var(--awf-validation-error-message-font-color);\r\n        line-height: 16px;\r\n    }\r\n\r\n    :host(:not([messageBelow])) ::slotted([slot='error']) {\r\n        display: none;\r\n    }\r\n\r\n    :host([disabled]) .checkbox,\r\n    :host([disabled]) ::slotted(label) {\r\n        cursor: not-allowed;\r\n    }\r\n`;\r\n//# sourceMappingURL=checkbox.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agCheckmark } from '@agilent/web-icons/core/small';\r\nimport { localized, msg } from '@lit/localize';\r\nimport { LitElement, html } from 'lit';\r\nimport { property, query, queryAssignedElements, state } from 'lit/decorators.js';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\r\nimport '../../atoms/icon/icon';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { LABEL_CSS_VARIABLES } from '../../common/label/label.css-variables.styles';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { LabelPosition } from '../../common/utils/label-position.enum';\r\nimport { listenPropertyChangeWithCallback } from '../../common/utils/listen-property-change';\r\nimport { MessageLevel } from '../../common/utils/message-level.enum';\r\nimport { CHECKBOX_CSS_VARIABLES } from './checkbox.css-variables.styles';\r\nimport { CHECKBOX_STYLES } from './checkbox.styles';\r\nconst ICON_SVG = [\r\n    html `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 12\"></svg>`,\r\n    html `\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 12\">\r\n            <path d=\"M2 6h8\" fill=\"none\" stroke=\"currentColor\" stroke-miterlimit=\"10\"></path>\r\n        </svg>\r\n    `,\r\n    html `${unsafeHTML(agCheckmark)}`,\r\n];\r\nlet AwfCheckbox = class AwfCheckbox extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The label position.\r\n         */\r\n        this.labelPosition = LabelPosition.Right;\r\n        /**\r\n         * When <code>true</code>, error messages are displayed below the checkbox.\r\n         * If <code>false</code>, error messages are displayed in a tooltip and there is no margin below the component.\r\n         */\r\n        this.messageBelow = false;\r\n        /**\r\n         * The icon to be displayed according to the selection state of the checkbox (checked, indeterminate, not selected).\r\n         */\r\n        this.iconSVG = 0;\r\n        this.checkboxOnly = true;\r\n        this._onKeyDown = this.onKeyDown.bind(this);\r\n        this._onInputChange = this.onInputChange.bind(this);\r\n        /**\r\n         * An observer to react on slotted input attributes modifications.\r\n         */\r\n        this.mutationObserver = new MutationObserver(() => this.mutationCallback());\r\n    }\r\n    /**\r\n     * The given HTML Input field that contains the value of the select.\r\n     *\r\n     * @inheritdoc FormValidationControllerHost\r\n     * HTML input.\r\n     * <br>\r\n     * <i><u>Note:</u> it is an expected property of this element defined as a <code>FormValidationControllerHost</code>.</i>\r\n     * @ignore\r\n     */\r\n    get field() {\r\n        const [input] = this.htmlInputElements;\r\n        if (!input) {\r\n            console.warn('Input not found!');\r\n        }\r\n        return input;\r\n    }\r\n    /**\r\n     * @inheritdoc LitElement\r\n     */\r\n    disconnectCallback() {\r\n        this.removeEventListener('keydown', this._onKeyDown);\r\n        if (this.field) {\r\n            this.field.removeEventListener('change', this._onInputChange);\r\n        }\r\n    }\r\n    /**\r\n     * @inheritdoc LitElement\r\n     */\r\n    render() {\r\n        return html `\r\n            <slot @slotchange=${this.onSlotChange}></slot>\r\n            <div id=\"tooltipTrigger\">\r\n                <div class=\"checkbox\">\r\n                    <awf-icon @click=${this.onIconClicked} ?alone=${this.checkboxOnly}> ${ICON_SVG[this.iconSVG]} </awf-icon>\r\n                    <slot name=\"label\" @click=${this.onSlotLabelClicked} @slotchange=${this.onSlotLabelChange}></slot>\r\n                </div>\r\n                ${this.renderErrorSlot()}\r\n            </div>\r\n            <awf-tooltip offset=\"5\" placement=\"bottom\" tip trigger=\"tooltipTrigger\"></awf-tooltip>\r\n        `;\r\n    }\r\n    onSlotChange() {\r\n        if (this.htmlInputElements.length === 0) {\r\n            return;\r\n        }\r\n        this.field.type = 'checkbox';\r\n        this.addEventListener('keydown', this._onKeyDown);\r\n        this.field.addEventListener('change', this._onInputChange);\r\n        listenPropertyChangeWithCallback(this.field, this._onInputChange, 'checked');\r\n        listenPropertyChangeWithCallback(this.field, this._onInputChange, 'indeterminate');\r\n        this.mutationObserver.disconnect();\r\n        this.mutationObserver.observe(this.field, {\r\n            attributeFilter: ['checked', 'disabled', 'indeterminate', 'required'],\r\n        });\r\n        this.mutationCallback();\r\n    }\r\n    onKeyDown(event) {\r\n        if (event.code === 'Space') {\r\n            this.onIconClicked(event);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    onInputChange() {\r\n        this.defineCheckmarkIcon();\r\n    }\r\n    mutationCallback() {\r\n        if (this.field.disabled) {\r\n            this.setAttribute('disabled', '');\r\n            this.tabIndex = -1;\r\n        }\r\n        else {\r\n            this.removeAttribute('disabled');\r\n            this.tabIndex = 0;\r\n        }\r\n        if (this.field.required) {\r\n            this.setAttribute('required', '');\r\n        }\r\n        else {\r\n            this.removeAttribute('required');\r\n            this.manageSlottedErrorMessage();\r\n        }\r\n        this.defineCheckmarkIcon();\r\n    }\r\n    onIconClicked(event) {\r\n        if (this.field.disabled) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n        if (this.field.indeterminate || this.field.hasAttribute('indeterminate')) {\r\n            this.field.checked = true;\r\n            this.field.indeterminate = false;\r\n            this.field.removeAttribute('indeterminate');\r\n        }\r\n        else {\r\n            this.field.checked = !this.field.checked;\r\n        }\r\n        this.defineCheckmarkIcon();\r\n        this.manageError();\r\n        this.field.dispatchEvent(new Event('change', { bubbles: true }));\r\n    }\r\n    onSlotLabelClicked(event) {\r\n        this.onIconClicked(event);\r\n        event.preventDefault();\r\n    }\r\n    onSlotLabelChange() {\r\n        this.checkboxOnly = this.slottedLabels.length === 0;\r\n    }\r\n    defineCheckmarkIcon() {\r\n        if (this.field.indeterminate || this.field.hasAttribute('indeterminate')) {\r\n            this.iconSVG = 1;\r\n        }\r\n        else if (this.field.checked) {\r\n            this.iconSVG = 2;\r\n        }\r\n        else {\r\n            this.iconSVG = 0;\r\n        }\r\n    }\r\n    renderErrorSlot() {\r\n        const errorSlot = html ` <slot name=\"error\" @slotchange=${this.manageSlottedErrorMessage}> </slot> `;\r\n        if (this.messageBelow) {\r\n            return html `\r\n                <div class=\"errors\">\r\n                    <div class=\"internalError\"></div>\r\n                    ${errorSlot}\r\n                </div>\r\n            `;\r\n        }\r\n        return html `${errorSlot}`;\r\n    }\r\n    manageSlottedErrorMessage() {\r\n        this.removeAttribute(MessageLevel.ERROR);\r\n        this.tooltip.removeAttribute(MessageLevel.ERROR);\r\n        this.tooltip.disabled = true;\r\n        this.tooltip.message = '';\r\n        if (this.slottedErrors.length) {\r\n            this.setAttribute(MessageLevel.ERROR, '');\r\n            this.tooltip.setAttribute(MessageLevel.ERROR, '');\r\n            if (this.messageBelow) {\r\n                this.slottedErrors.forEach((message, index) => {\r\n                    if (index < this.slottedErrors.length - 1) {\r\n                        message.style.display = 'none';\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this.tooltip.disabled = false;\r\n                this.tooltip.message = this.slottedErrors.map(error => error.innerText)[this.slottedErrors.length - 1];\r\n            }\r\n        }\r\n    }\r\n    manageError() {\r\n        if (!this.manageRequiredError()) {\r\n            if (this.messageBelow) {\r\n                this.internalErrorMessage.innerText = '';\r\n            }\r\n            this.manageSlottedErrorMessage();\r\n        }\r\n        this.tooltip.open = !!this.tooltip.message;\r\n    }\r\n    manageRequiredError() {\r\n        const managed = this.field.required && this.iconSVG === 0;\r\n        if (managed) {\r\n            this.setAttribute(MessageLevel.ERROR, '');\r\n            this.tooltip.setAttribute(MessageLevel.ERROR, '');\r\n            if (this.messageBelow) {\r\n                this.internalErrorMessage.innerText = msg('This field is required.');\r\n            }\r\n            else {\r\n                this.tooltip.disabled = false;\r\n                this.tooltip.message = msg('This field is required.');\r\n            }\r\n        }\r\n        return managed;\r\n    }\r\n};\r\n/**\r\n * The styles to be applied specifically on this element.\r\n *\r\n * @inheritdoc LitElement\r\n */\r\nAwfCheckbox.styles = [COMMON_STYLES, LABEL_CSS_VARIABLES, CHECKBOX_CSS_VARIABLES, CHECKBOX_STYLES];\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfCheckbox.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfCheckbox.prototype, \"messageBelow\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: '', selector: 'input', flatten: true })\r\n], AwfCheckbox.prototype, \"htmlInputElements\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: 'label' })\r\n], AwfCheckbox.prototype, \"slottedLabels\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: 'error', selector: 'div, span', flatten: true })\r\n], AwfCheckbox.prototype, \"slottedErrors\", void 0);\r\n__decorate([\r\n    query('.internalError')\r\n], AwfCheckbox.prototype, \"internalErrorMessage\", void 0);\r\n__decorate([\r\n    query('awf-tooltip')\r\n], AwfCheckbox.prototype, \"tooltip\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfCheckbox.prototype, \"iconSVG\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfCheckbox.prototype, \"checkboxOnly\", void 0);\r\nAwfCheckbox = __decorate([\r\n    localized(),\r\n    customElement('awf-checkbox', true)\r\n], AwfCheckbox);\r\nexport { AwfCheckbox };\r\n//# sourceMappingURL=checkbox.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-use-before-define */\r\nimport { css, html, LitElement } from 'lit';\r\nimport { property, queryAssignedElements } from 'lit/decorators.js';\r\nimport { AwfListOption } from '../../atoms/list-option/list-option';\r\nimport '../../atoms/list-option/list-option.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { dispatchCustomEvent } from '../../common/utils/util';\r\nlet AwfChecklist = class AwfChecklist extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * When true, mutiselection is enabled.\r\n         */\r\n        this.multi = false;\r\n        /**\r\n         * When true, the option cannot be deselected.\r\n         */\r\n        this.noDeselect = false;\r\n        this.dispatchCustomEvent = dispatchCustomEvent.bind(this);\r\n    }\r\n    deselectAll() {\r\n        this.options.forEach(option => (option.selected = false));\r\n    }\r\n    selectAll() {\r\n        this.options.forEach(option => (option.selected = true));\r\n    }\r\n    render() {\r\n        return html `<slot @listOptionClick=${this.handleOptionClick}\r\n                          @keyup=${this.handleKeyUp}\r\n                          @listOptionMouseEnter=${this.handleMouseEnter}></slot> `;\r\n    }\r\n    update(changedProperties) {\r\n        super.update(changedProperties);\r\n        if (changedProperties.has('multi') && !this.multi && this.options.length > 0) {\r\n            this.reduceToFirstSelection();\r\n        }\r\n    }\r\n    handleOptionClick(event) {\r\n        if (event.target instanceof AwfListOption) {\r\n            this.changeSelection(event.target);\r\n        }\r\n    }\r\n    handleKeyUp(event) {\r\n        const option = this.searchForOptionInEventPath(event) || this.options.find(opt => opt.hasAttribute('focused'));\r\n        if (event.key === 'ArrowDown') {\r\n            this.focusNextOption(option);\r\n        }\r\n        if (event.key === 'ArrowUp') {\r\n            this.focusPreviousOption(option);\r\n        }\r\n        if (option && (event.key === ' ' || event.key === 'Enter')) {\r\n            this.changeSelection(option);\r\n        }\r\n    }\r\n    handleMouseEnter(event) {\r\n        if (event.target instanceof AwfListOption) {\r\n            this.highlightOption(event.target);\r\n        }\r\n    }\r\n    searchForOptionInEventPath(event) {\r\n        const path = event.composedPath().map(target => target);\r\n        return path.find(e => e instanceof AwfListOption);\r\n    }\r\n    focusNextOption(option) {\r\n        const index = this.visibleOptions.indexOf(option);\r\n        let nextOption;\r\n        if (index < this.visibleOptions.length - 1) {\r\n            nextOption = this.visibleOptions[index + 1];\r\n        }\r\n        else {\r\n            nextOption = this.visibleOptions[0];\r\n        }\r\n        this.highlightOption(nextOption);\r\n        nextOption.focus();\r\n    }\r\n    focusPreviousOption(option) {\r\n        const index = this.visibleOptions.indexOf(option);\r\n        let previousOption;\r\n        if (index > 0) {\r\n            previousOption = this.visibleOptions[index - 1];\r\n        }\r\n        else {\r\n            previousOption = this.visibleOptions[this.options.length - 1];\r\n        }\r\n        this.highlightOption(previousOption);\r\n        previousOption.focus();\r\n    }\r\n    highlightOption(option) {\r\n        this.visibleOptions.forEach((opt) => opt.focused = opt === option);\r\n    }\r\n    deselectAllOptions() {\r\n        this.selectedOptions.forEach(option => {\r\n            option.selected = false;\r\n        });\r\n    }\r\n    reduceToFirstSelection() {\r\n        if (this.selectedOptions.length > 0) {\r\n            const selectedOption = this.selectedOptions[0];\r\n            this.selectedOptions.slice(1).forEach(option => (option.selected = false));\r\n            this.emitValue(selectedOption.value);\r\n        }\r\n    }\r\n    changeSelection(option) {\r\n        if (this.noDeselect && option.selected) {\r\n            return;\r\n        }\r\n        if (!this.multi && !option.selected) {\r\n            this.deselectAllOptions();\r\n        }\r\n        option.selected = !option.selected;\r\n        const value = this.getSelectedValues(option);\r\n        this.emitValue(value);\r\n    }\r\n    getSelectedOptions() {\r\n        const slot = this.shadowRoot?.querySelector('slot:not([name])');\r\n        return (slot?.assignedElements()).filter(({ selected }) => selected);\r\n    }\r\n    getSelectedValues(option) {\r\n        let value = option.selected ? option.value : undefined;\r\n        /* We don't use the global selectedOptions here as there seems to be a\r\n    race condition with the reflection of the selected attribute in\r\n    queryAssignedElements */\r\n        const selectedOptions = this.getSelectedOptions();\r\n        if (this.multi) {\r\n            value = selectedOptions.map(opt => opt.value);\r\n        }\r\n        return value;\r\n    }\r\n    emitValue(value) {\r\n        this.dispatchCustomEvent(AwfEvent.VALUE_CHANGE, value);\r\n    }\r\n};\r\nAwfChecklist.styles = [\r\n    COMMON_STYLES,\r\n    css `\r\n            :host {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n\r\n            ::slotted(awf-list-option) {\r\n                border-top: 1px solid var(--at-gray-soft);\r\n            }\r\n\r\n            ::slotted(awf-list-option:last-child) {\r\n                border-bottom: 1px solid var(--at-gray-soft);\r\n            }\r\n        `\r\n];\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfChecklist.prototype, \"multi\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfChecklist.prototype, \"noDeselect\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: `awf-list-option` })\r\n], AwfChecklist.prototype, \"options\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: `awf-list-option[selected]` })\r\n], AwfChecklist.prototype, \"selectedOptions\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: `awf-list-option:not([hidden])` })\r\n], AwfChecklist.prototype, \"visibleOptions\", void 0);\r\nAwfChecklist = __decorate([\r\n    customElement('awf-checklist', true)\r\n], AwfChecklist);\r\nexport { AwfChecklist };\r\n//# sourceMappingURL=checklist.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css, html, LitElement } from 'lit';\r\nimport { property, queryAssignedElements } from 'lit/decorators.js';\r\nimport { AwfChip } from '../../atoms/chip/chip';\r\nimport '../../atoms/chip/chip.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { dispatchCustomEvent } from '../../common/utils/util';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/chips)\r\n */\r\nlet AwfChoiceChips = class AwfChoiceChips extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * If true, then the choice-chips are disabled and can't be changed i.e. the slotted chips cannot be activated.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * Property to store the value of the active chip.\r\n         */\r\n        this.value = [];\r\n        this.dispatchCustomEvent = dispatchCustomEvent.bind(this);\r\n    }\r\n    render() {\r\n        return html ` <slot @click=${this.handleChipClick} @delete=${this.handleDeleteEvent}></slot> `;\r\n    }\r\n    updated(changes) {\r\n        super.updated(changes);\r\n        if (changes.has('disabled')) {\r\n            this.setChipsDisabledState();\r\n            this.disabled ? this.setAttribute('aria-disabled', 'true') : this.removeAttribute('aria-disabled');\r\n        }\r\n        if (changes.has('value')) {\r\n            this.setChipsActiveState();\r\n        }\r\n    }\r\n    handleChipClick(event) {\r\n        event.stopPropagation();\r\n        const { target } = event;\r\n        if (target instanceof AwfChip && !target.disabled) {\r\n            target.active = !target.active;\r\n            this.emitValue();\r\n        }\r\n    }\r\n    handleDeleteEvent(event) {\r\n        event.stopPropagation();\r\n        const { target } = event;\r\n        if (target instanceof AwfChip) {\r\n            this.dispatchCustomEvent(AwfEvent.DELETE, target.value);\r\n        }\r\n        if (target instanceof AwfChip && this.chips.includes(target)) {\r\n            const chip = target;\r\n            chip.remove();\r\n        }\r\n    }\r\n    setChipsDisabledState() {\r\n        this.chips.forEach(chip => {\r\n            chip.disabled = this.disabled;\r\n        });\r\n    }\r\n    setChipsActiveState() {\r\n        this.chips.forEach(chip => {\r\n            chip.active = !!this.value.find(value => value === chip.value);\r\n        });\r\n    }\r\n    emitValue() {\r\n        const values = this.chips.filter(({ active, disabled }) => active && !disabled).map(({ value }) => value);\r\n        this.dispatchCustomEvent(AwfEvent.VALUE_CHANGE, values);\r\n    }\r\n};\r\nAwfChoiceChips.styles = [\r\n    COMMON_STYLES,\r\n    css `\r\n            :host {\r\n                display: flex;\r\n                flex-wrap: wrap;\r\n                gap: 4px 4px;\r\n            }\r\n        `\r\n];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfChoiceChips.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfChoiceChips.prototype, \"value\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'awf-chip' })\r\n], AwfChoiceChips.prototype, \"chips\", void 0);\r\nAwfChoiceChips = __decorate([\r\n    customElement('awf-choice-chips', true)\r\n], AwfChoiceChips);\r\nexport { AwfChoiceChips };\r\n//# sourceMappingURL=choice-chips.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const DATE_RANGE_PICKER_STYLE = css `\r\n    .awf-date-range-picker {\r\n        border: solid 1px var(--awf-state-rest-border);\r\n        display: grid;\r\n        grid-template-rows: auto auto;\r\n        width: var(--awf-drp-width, fit-content);\r\n    }\r\n\r\n    .awf-header {\r\n        display: flex;\r\n    }\r\n\r\n    .awf-tab {\r\n        border-right: solid 1px var(--awf-state-rest-border);\r\n        cursor: default;\r\n        padding: 12px;\r\n        width: var(--awf-drp-tab-width-inner);\r\n        flex-grow: 1;\r\n    }\r\n\r\n    :host([datetime]) .awf-tab {\r\n        width: var(--awf-drp-time-tab-width-inner);\r\n    }\r\n\r\n    .awf-tab[disabled] {\r\n        color: var(--awf-state-disabled-foreground);\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    .awf-tab:not([selected]) {\r\n        border-bottom: solid 1px var(--awf-state-rest-border);\r\n    }\r\n\r\n    .awf-tab:not([selected]):not([disabled]) {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .awf-tab:not([selected]):not([disabled]):hover {\r\n        background-color: var(--awf-state-hover-background);\r\n    }\r\n\r\n    .awf-tab-title {\r\n        font-weight: bold;\r\n    }\r\n\r\n    .awf-buttons {\r\n        border-bottom: solid 1px var(--awf-state-rest-border);\r\n        display: grid;\r\n        grid-template-columns: repeat(2, var(--awf-drp-button-width-inner));\r\n    }\r\n\r\n    :host([datetime]) .awf-buttons {\r\n        grid-template-columns: repeat(2, var(--awf-drp-time-button-width-inner));\r\n    }\r\n\r\n    awf-button {\r\n        margin: auto;\r\n    }\r\n\r\n    .awf-gray-text {\r\n        color: var(--awf-state-disabled-foreground);\r\n    }\r\n\r\n    .awf-start-date,\r\n    .awf-end-date {\r\n        color: var(--awf-drp-date-label-color-inner);\r\n    }\r\n\r\n    awf-datepicker {\r\n        margin: 12px auto;\r\n        width: fit-content;\r\n    }\r\n\r\n    :host([datetime]) awf-datepicker {\r\n        margin: 12px;\r\n    }\r\n`;\r\n//# sourceMappingURL=date-range-picker.style.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agCheckmark, agReset } from '@agilent/web-icons/core';\r\nimport { localized, msg } from '@lit/localize';\r\nimport { LitElement, html } from 'lit';\r\nimport { query, state } from 'lit/decorators.js';\r\nimport '../../atoms/button/button.js';\r\nimport '../../atoms/datepicker/datepicker.js';\r\nimport '../../atoms/icon/icon.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { createCustomEvent } from '../../common/utils/util';\r\nimport { awfTranslateService } from '../../translate.service';\r\nimport { DATE_RANGE_PICKER_CSS_VARIABLES } from './date-range-picker.css-variables.styles';\r\nimport { DATE_RANGE_PICKER_STYLE } from './date-range-picker.style';\r\nlet AwfDateRangePicker = class AwfDateRangePicker extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** @ignore */\r\n        this.fromTabSelected = true;\r\n    }\r\n    requestFocus() {\r\n        this.datepicker.requestFocus();\r\n    }\r\n    /** @inheritdoc */\r\n    render() {\r\n        return html `\r\n            <div class=\"awf-date-range-picker\">\r\n                <div class=\"awf-header\">\r\n                    <div class=\"awf-tab\" @click=${this.goToStartDate} ?selected=${this.fromTabSelected}>\r\n                        <div class=\"awf-tab-title\">${msg('From')}</div>\r\n                        <div class=\"awf-gray-text\" ?hidden=${!!this.startDate}>${msg('Please Select')}</div>\r\n                        <div class=\"awf-start-date\" ?hidden=${!this.startDate}>${this.formatDate(this.startDate)}</div>\r\n                    </div>\r\n                    <div class=\"awf-tab\" @click=${this.goToEndDate} ?selected=${!this.fromTabSelected} ?disabled=${!this.startDate}>\r\n                        <div class=\"awf-tab-title\">${msg('To')}</div>\r\n                        <div class=\"awf-gray-text\" ?hidden=${!!this.endDate}>${msg('Please Select')}</div>\r\n                        <div class=\"awf-end-date\" ?hidden=${!this.endDate}>${this.formatDate(this.endDate)}</div>\r\n                    </div>\r\n                    <div class=\"awf-buttons\">\r\n                        <awf-button id=\"resetBtn\" @click=${this.reset}>\r\n                            <awf-icon raw=${agReset}></awf-icon>\r\n                        </awf-button>\r\n                        <awf-button id=\"validateBtn\" @click=${this.validateRange} ?disabled=${this.validateButtonDisabled()}>\r\n                            <awf-icon raw=${agCheckmark}></awf-icon>\r\n                        </awf-button>\r\n                    </div>\r\n                </div>\r\n                <awf-datepicker\r\n                    class=\"awf-datepicker\"\r\n                    .value=${this.startDate}\r\n                    .endValue=${this.endDate}\r\n                    .min=${!this.fromTabSelected ? this.startDate : undefined}\r\n                    ?dateRange=${!this.fromTabSelected}\r\n                    @valuechange=${this.onDateSelected}\r\n                ></awf-datepicker>\r\n            </div>\r\n        `;\r\n    }\r\n    goToStartDate() {\r\n        this.fromTabSelected = true;\r\n        this.endDate = undefined;\r\n    }\r\n    goToEndDate() {\r\n        this.fromTabSelected = !this.startDate;\r\n    }\r\n    formatDate(date) {\r\n        if (!date) {\r\n            return '';\r\n        }\r\n        const dateFormat = new Intl.DateTimeFormat(awfTranslateService.getLocale().replace('_', '-'), {\r\n            year: 'numeric',\r\n            month: 'short',\r\n            day: '2-digit',\r\n        });\r\n        return dateFormat.format(date);\r\n    }\r\n    validateRange() {\r\n        this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_CHANGE, { startDate: this.startDate, endDate: this.endDate }));\r\n    }\r\n    validateButtonDisabled() {\r\n        return !this.startDate || !this.endDate;\r\n    }\r\n    reset() {\r\n        this.startDate = undefined;\r\n        this.endDate = undefined;\r\n        this.fromTabSelected = true;\r\n        this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_CHANGE, { startDate: this.startDate, endDate: this.endDate }));\r\n    }\r\n    onDateSelected(event) {\r\n        if (event.detail instanceof Date) {\r\n            this.startDate = event.detail;\r\n        }\r\n        else {\r\n            this.startDate = event.detail.startDate;\r\n            this.endDate = event.detail.endDate;\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n};\r\nAwfDateRangePicker.styles = [COMMON_STYLES, DATE_RANGE_PICKER_CSS_VARIABLES, DATE_RANGE_PICKER_STYLE];\r\n__decorate([\r\n    state()\r\n], AwfDateRangePicker.prototype, \"startDate\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfDateRangePicker.prototype, \"endDate\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfDateRangePicker.prototype, \"fromTabSelected\", void 0);\r\n__decorate([\r\n    query('awf-datepicker')\r\n], AwfDateRangePicker.prototype, \"datepicker\", void 0);\r\nAwfDateRangePicker = __decorate([\r\n    localized(),\r\n    customElement('awf-date-range-picker', true)\r\n], AwfDateRangePicker);\r\nexport { AwfDateRangePicker };\r\n//# sourceMappingURL=date-range-picker.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const DATE_TIME_PICKER_STYLES = css `\r\n    :host {\r\n        display: block;\r\n        width: var(--awf-date-time-picker-width-inner);\r\n    }\r\n\r\n    .awf-date-time-picker {\r\n        display: grid;\r\n        grid-template-rows: auto auto;\r\n        grid-template-columns: auto auto;\r\n        grid-template-areas: \"controls controls\" \"datepicker timepicker\";\r\n    }\r\n\r\n    .awf-datepicker {\r\n        grid-area: datepicker;\r\n    }\r\n\r\n    .time-selection {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        grid-area: timepicker;\r\n    }\r\n\r\n    .time-picker {\r\n        display: flex;\r\n        align-items: center;\r\n        position: relative;\r\n    }\r\n    .time-picker::after {\r\n        content: '';\r\n        border: 1px solid var(--at-blue-shade);\r\n        background-color: var(--at-blue-medium);\r\n        height: var(--awf-datepicker-day-height-inner);\r\n        width:100%;\r\n        position: absolute;\r\n        z-index: 9;\r\n        top: calc(50% - (var(--awf-datepicker-day-height-inner) / 2 ) - 1px);\r\n    }\r\n\r\n    .time-picker ul {\r\n        height: calc(var(--awf-datepicker-day-height-inner) * 7);\r\n        list-style: none;\r\n        padding: 0;\r\n        margin: 0;\r\n        overflow: hidden;\r\n        position: relative;\r\n        z-index: 10;\r\n    }\r\n    \r\n    .time-picker ul.am-pm-picker {\r\n        height: calc(var(--awf-datepicker-day-height-inner) * 2);\r\n        overflow: inherit;\r\n    }\r\n\r\n    .time-picker ul.am-pm-picker::before, .time-picker ul.am-pm-picker::after {\r\n        display: none;\r\n    }\r\n\r\n    .time-picker ul::before {\r\n        content: \"\";\r\n        width: 100%;\r\n        height: calc(50% - (var(--awf-datepicker-day-height-inner) / 2 ) - 1px);\r\n        position: absolute;\r\n        left: 0px;\r\n        top: 0px;\r\n        background: linear-gradient(white, transparent);\r\n        z-index: 1;\r\n        pointer-events: none;\r\n    }\r\n\r\n    .time-picker ul::after {\r\n        content: \"\";\r\n        width: 100%;\r\n        height: calc(50% - (var(--awf-datepicker-day-height-inner) / 2 ) - 1px);\r\n        position: absolute;\r\n        left: 0px;\r\n        bottom: 0px;\r\n        background: linear-gradient(transparent, white);\r\n        z-index: 1;\r\n        pointer-events: none;\r\n    }\r\n\r\n    .time-picker ul li { \r\n        list-style: none;\r\n        height: var(--awf-datepicker-day-height-inner);\r\n        width: var(--awf-datepicker-day-height-inner);\r\n        line-height: var(--awf-datepicker-day-height-inner);\r\n        text-align: center;\r\n        user-select: none;\r\n    }\r\n\r\n    li.selected {\r\n        color: var(--at-dark-navy);\r\n    }\r\n\r\n    li.disabled { \r\n        color: var(--at-gray);\r\n    }\r\n\r\n    .time-format-toggle {\r\n        height: 31px;\r\n    }\r\n\r\n    .controls {\r\n        grid-area: controls;\r\n        margin-left: auto;\r\n        margin-bottom: 8px;\r\n        display: flex;\r\n        column-gap: 8px;\r\n    }\r\n`;\r\n//# sourceMappingURL=date-time-picker.style.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\n/**\r\n * Plugin used with keen slider to toggle dual values on click\r\n */\r\nexport class ToggleControls {\r\n    constructor(slider) {\r\n        this.slider = slider;\r\n        this.slider.on('created', () => {\r\n            slider.container.addEventListener('click', this.eventClick.bind(this));\r\n        });\r\n    }\r\n    eventClick(e) {\r\n        e.preventDefault();\r\n        const currentSlideId = this.slider.track.details.rel;\r\n        if (currentSlideId === 0) {\r\n            this.slider.next();\r\n        }\r\n        else {\r\n            this.slider.prev();\r\n        }\r\n    }\r\n}\r\nexport const ToggleControlsPlugin = function (slider) {\r\n    return new ToggleControls(slider);\r\n};\r\n//# sourceMappingURL=toggle-controls.plugin.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { localized, msg } from '@lit/localize';\r\nimport KeenSlider from 'keen-slider';\r\nimport { LitElement, html } from 'lit';\r\nimport { createRef, ref } from 'lit-html/directives/ref.js';\r\nimport { when } from 'lit-html/directives/when.js';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport { map } from 'lit/directives/map.js';\r\nimport { range } from 'lit/directives/range.js';\r\nimport { styleMap } from 'lit/directives/style-map.js';\r\nimport { Subscription } from 'rxjs';\r\nimport '../../atoms/button/button.js';\r\nimport { DATE_PICKER_CSS_VARIABLES } from '../../atoms/datepicker/datepicker.css-variables.styles';\r\nimport '../../atoms/datepicker/datepicker.js';\r\nimport '../../atoms/icon/icon.js';\r\nimport '../../atoms/toggle/toggle.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { createCustomEvent, toLeadingZeros } from '../../common/utils/util';\r\nimport { ClickControlsPlugin } from './click-controls.plugin';\r\nimport { DATE_TIME_PICKER_CSS_VARIABLES } from './date-time-picker.css-variables';\r\nimport { DATE_TIME_PICKER_STYLES } from './date-time-picker.style';\r\nimport { ToggleControlsPlugin } from './toggle-controls.plugin';\r\nimport { WheelControlsPlugin } from './wheel-controls.plugin';\r\nexport const DEBOUNCE_TIME_MS = 150;\r\nexport const AM_IDX = 0;\r\nexport const PM_IDX = 1;\r\nlet AwfDateTimePicker = class AwfDateTimePicker extends LitElement {\r\n    /**\r\n     * The initial date.\r\n     */\r\n    set value(val) {\r\n        if (val) {\r\n            this._value = new Date(val);\r\n        }\r\n        else {\r\n            this._value = new Date();\r\n        }\r\n        this.requestUpdate('value');\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    constructor() {\r\n        super();\r\n        this._value = new Date();\r\n        this.is12HoursFormat = true;\r\n        this.inputRef = createRef();\r\n        this.isPm = false;\r\n        this.subscriptions = new Subscription();\r\n        this.mutationObserver = new MutationObserver(() => this.onOverlayOpen());\r\n        if (!this.id) {\r\n            this.id = `awf-date-time-picker-${new Date().getTime()}`;\r\n        }\r\n    }\r\n    requestFocus() {\r\n        this.datePicker.requestFocus();\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.mutationObserver.observe(this, { attributeFilter: ['awf-overlay-open'] });\r\n    }\r\n    disconnectedCallback() {\r\n        this.subscriptions.unsubscribe();\r\n        this.mutationObserver.disconnect();\r\n        super.disconnectedCallback();\r\n    }\r\n    firstUpdated() {\r\n        this.initialValue = this.value;\r\n        if (!this.value) {\r\n            this.value = new Date();\r\n        }\r\n        this.instantiateSwipers();\r\n        this.subscriptions.add(awfTranslateService.onLangChange().subscribe(() => this.setTimeformatDefault(true)));\r\n        this.setTimeformatDefault(false);\r\n        this.updateSwippers();\r\n    }\r\n    updated(_changedProperties) {\r\n        if (_changedProperties.has('value')) {\r\n            this.setHours(this.value?.getHours());\r\n            this.setMinutes(this.value?.getMinutes());\r\n        }\r\n        if (_changedProperties.has('min') || _changedProperties.has('max')) {\r\n            this.updateSwippers();\r\n        }\r\n        super.updated(_changedProperties);\r\n    }\r\n    setTimeformatDefault(update) {\r\n        const is12HoursTimeFormat = msg('is12hoursTimeFormat');\r\n        this.is12HoursFormat = is12HoursTimeFormat !== 'false';\r\n        if (this.is12HoursFormat) {\r\n            this.inputRef.value.setAttribute('checked', '');\r\n        }\r\n        else {\r\n            this.inputRef.value.removeAttribute('checked');\r\n        }\r\n        if (update) {\r\n            this.updateSwippers();\r\n        }\r\n    }\r\n    /** @inheritdoc */\r\n    render() {\r\n        return html `\r\n            <div class=\"awf-date-time-picker\">\r\n                <awf-datepicker\r\n                    class=\"awf-datepicker\"\r\n                    .value=${this.value}\r\n                    .min=${this.min}\r\n                    .max=${this.max}\r\n                    @valuechange=${this.selectDate}\r\n                ></awf-datepicker>\r\n                <div class=\"time-selection\">\r\n                    <awf-toggle class=\"time-format-toggle\">\r\n                        <label for=\"${this.id}-checkbox\">${when(this.is12HoursFormat, () => msg('12 hours'), () => msg('24 hours'))}</label>\r\n                        <input id=\"${this.id}-checkbox\" type=\"checkbox\" ${ref(this.inputRef)} @change=${this.changeTimeFormat}>\r\n                    </awf-toggle>\r\n                    ${this.renderTimePicker()}\r\n                </div>\r\n                <div class=\"controls\">\r\n                    <awf-button @click=${this.reset}  aria-label=\"reset\">\r\n                        <awf-icon name=\"reset-24px\"></awf-icon>\r\n                    </awf-button>\r\n                    <awf-button @click=${this.validate} aria-label=\"validate\">\r\n                        <awf-icon name=\"checkmark-24px\"></awf-icon>\r\n                    </awf-button>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n    renderTimePicker() {\r\n        const amPmStyles = { display: this.is12HoursFormat ? 'block' : 'none' };\r\n        return html `\r\n        <div class=\"time-picker\">\r\n            <ul class=\"hours-picker\">\r\n                ${this.renderHours()}\r\n            </ul>\r\n\r\n            <ul class=\"minutes-picker\">\r\n                ${this.renderMinutes()}\r\n            </ul>\r\n            <ul class=\"am-pm-picker\" style=${styleMap(amPmStyles)}>\r\n                <li class=\"item-am ${this.isPm ? '' : 'selected'}\">AM</li>\r\n                <li class=\"item-pm ${this.isPm ? 'selected' : ''}\">PM</li>\r\n            </ul>\r\n        </div>\r\n        `;\r\n    }\r\n    renderHours() {\r\n        let hours = [];\r\n        if (this.is12HoursFormat) {\r\n            hours = range(1, 13);\r\n        }\r\n        else {\r\n            hours = range(24);\r\n        }\r\n        return html `${map(hours, hour => this.toListItem(toLeadingZeros(hour)))}`;\r\n    }\r\n    renderMinutes() {\r\n        return html `${map(range(60), minute => this.toListItem(toLeadingZeros(minute)))}`;\r\n    }\r\n    toListItem(value) {\r\n        return html `<li class=\"item-${value}\">${value}</li>`;\r\n    }\r\n    changeTimeFormat() {\r\n        this.is12HoursFormat = this.inputRef.value.checked;\r\n        const currentValue = new Date(this.value);\r\n        setTimeout(() => {\r\n            this.setHours(currentValue.getHours());\r\n            this.setMinutes(currentValue.getMinutes());\r\n        }, 5);\r\n    }\r\n    instantiateSwipers() {\r\n        this.hoursSwipper = this.createKeenSlider(this.hoursWrapper, { callback: this.onHoursChange.bind(this) });\r\n        this.minutesSwipper = this.createKeenSlider(this.minutesWrapper, { callback: this.onMinutesChange.bind(this) });\r\n        this.amPmSwipper = this.createKeenSlider(this.amPmWrapper, {\r\n            callback: this.onAmPmChange.bind(this),\r\n            perView: 2,\r\n            loop: false,\r\n            origin: 0,\r\n            plugins: [ToggleControlsPlugin]\r\n        });\r\n        this.setHours(this.value?.getHours());\r\n        this.setMinutes(this.value?.getMinutes());\r\n    }\r\n    createKeenSlider(container, options) {\r\n        const plugins = [WheelControlsPlugin, ClickControlsPlugin];\r\n        if (options.plugins) {\r\n            plugins.push(...options.plugins);\r\n        }\r\n        return new KeenSlider(container, {\r\n            selector: 'li',\r\n            loop: options.loop === undefined ? true : options.loop,\r\n            renderMode: 'performance',\r\n            slides: {\r\n                origin: options.origin || 'center',\r\n                perView: options.perView || 7,\r\n                spacing: 0,\r\n            },\r\n            vertical: true,\r\n            slideChanged: slider => this.onSlideChanged(slider, options.callback),\r\n        }, plugins);\r\n    }\r\n    onSlideChanged(slider, callback) {\r\n        const selectedElmts = slider.container.getElementsByClassName('selected');\r\n        Array.from(selectedElmts).forEach(item => item.classList.remove('selected'));\r\n        slider.update();\r\n        const selectedItem = slider.slides[slider.track.details.rel];\r\n        selectedItem.classList.add('selected');\r\n        callback(slider.track.details.rel);\r\n    }\r\n    selectDate(event) {\r\n        const date = event.detail;\r\n        this.value.setDate(date.getDate());\r\n        this.value.setMonth(date.getMonth());\r\n        this.value.setFullYear(date.getFullYear());\r\n        this.value.setSeconds(0);\r\n        event.stopPropagation();\r\n    }\r\n    onHoursChange(idx) {\r\n        let hours = idx;\r\n        if (this.is12HoursFormat) {\r\n            hours += 1;\r\n            if (this.isPm && hours < 12) {\r\n                hours += 12;\r\n            }\r\n            else if (!this.isPm && hours === 12) {\r\n                hours = 0;\r\n            }\r\n        }\r\n        this.value.setHours(hours);\r\n        this.updateSwippers();\r\n    }\r\n    setHours(hours) {\r\n        let idx = hours;\r\n        if (this.is12HoursFormat) {\r\n            this.isPm = hours >= 12;\r\n            if (hours >= 12) {\r\n                this.amPmSwipper?.moveToIdx(PM_IDX, true, { duration: 0 });\r\n            }\r\n            else {\r\n                this.amPmSwipper?.moveToIdx(AM_IDX, true, { duration: 0 });\r\n            }\r\n            idx = ((hours % 12) || 12) - 1;\r\n        }\r\n        this.hoursSwipper?.moveToIdx(idx, true, { duration: 0 });\r\n    }\r\n    setMinutes(minutes) {\r\n        this.minutesSwipper?.moveToIdx(minutes, true, { duration: 0 });\r\n    }\r\n    onMinutesChange(minutes) {\r\n        this.value.setMinutes(minutes);\r\n        this.updateSwippers();\r\n    }\r\n    onAmPmChange(index) {\r\n        this.isPm = index > 0;\r\n        this.onHoursChange(this.hoursSwipper.track.details.rel);\r\n        this.updateSwippers();\r\n    }\r\n    reset() {\r\n        this.value = this.initialValue ?? new Date();\r\n    }\r\n    validate() {\r\n        this.dispatchEvent(createCustomEvent('valuechange', this.value));\r\n    }\r\n    onOverlayOpen() {\r\n        if (this.hasAttribute('awf-overlay-open')) {\r\n            this.updateSwippers();\r\n        }\r\n    }\r\n    updateSwippers() {\r\n        setTimeout(() => {\r\n            this.hoursSwipper?.update();\r\n            this.minutesSwipper?.update();\r\n            this.amPmSwipper?.update();\r\n        }, 0);\r\n    }\r\n};\r\nAwfDateTimePicker.styles = [COMMON_STYLES, DATE_PICKER_CSS_VARIABLES, DATE_TIME_PICKER_CSS_VARIABLES, DATE_TIME_PICKER_STYLES];\r\n__decorate([\r\n    property()\r\n], AwfDateTimePicker.prototype, \"value\", null);\r\n__decorate([\r\n    property()\r\n], AwfDateTimePicker.prototype, \"min\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfDateTimePicker.prototype, \"max\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfDateTimePicker.prototype, \"is12HoursFormat\", void 0);\r\n__decorate([\r\n    query('awf-datepicker')\r\n], AwfDateTimePicker.prototype, \"datePicker\", void 0);\r\n__decorate([\r\n    query('.hours-picker')\r\n], AwfDateTimePicker.prototype, \"hoursWrapper\", void 0);\r\n__decorate([\r\n    query('.minutes-picker')\r\n], AwfDateTimePicker.prototype, \"minutesWrapper\", void 0);\r\n__decorate([\r\n    query('.am-pm-picker')\r\n], AwfDateTimePicker.prototype, \"amPmWrapper\", void 0);\r\nAwfDateTimePicker = __decorate([\r\n    localized(),\r\n    customElement('awf-date-time-picker', true)\r\n], AwfDateTimePicker);\r\nexport { AwfDateTimePicker };\r\n//# sourceMappingURL=date-time-picker.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const CLEAR_BUTTON_STYLE = css `\r\n    :host {\r\n        --awf-icon-size: var(--awf-clear-button-size-inner);\r\n        --awf-icon-color: var(--at-dark-navy);\r\n\r\n        visibility: hidden;\r\n    }\r\n\r\n    :host([visible]) {\r\n        visibility: visible;\r\n    }\r\n\r\n    .clear-button {\r\n        align-items: center;\r\n        background-color: transparent;\r\n        border: solid 1px transparent;\r\n        border-radius: 50%;\r\n        display: flex;\r\n        padding: 2px;\r\n    }\r\n\r\n    .clear-button:hover {\r\n        background-color: var(--awf-clear-button-hover-bg-color-inner);\r\n        fill: white;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .clear-button:active {\r\n        background-color: var(--awf-clear-button-active-bg-color-inner);\r\n    }\r\n\r\n    .clear-button:focus {\r\n        border: solid 1px var(--awf-state-focused-border);\r\n    }\r\n\r\n    .clear-button:focus-visible {\r\n        outline: none;\r\n    }\r\n\r\n    awf-icon {\r\n        min-height: var(--awf-clear-button-size-inner);\r\n        min-width: var(--awf-clear-button-size-inner);\r\n    }\r\n\r\n    svg {\r\n        background-color: transparent;\r\n        fill: currentcolor;\r\n        height: var(--awf-clear-button-size-inner);\r\n        width: var(--awf-clear-button-size-inner);\r\n    }\r\n`;\r\n//# sourceMappingURL=clear-button.style.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agDeleteCross } from '@agilent/web-icons/core';\r\nimport { localized, msg } from '@lit/localize';\r\nimport { LitElement, html } from 'lit';\r\nimport { createRef, ref } from 'lit-html/directives/ref.js';\r\nimport { property } from 'lit/decorators.js';\r\nimport '../../atoms/tooltip/tooltip.js';\r\nimport { customElement } from '../decorators/awf-custom-element';\r\nimport { CLEAR_BUTTON_CSS_VARIABLES } from './clear-button.css-variables.styles';\r\nimport { CLEAR_BUTTON_STYLE } from './clear-button.style';\r\nlet AwfClearButton = class AwfClearButton extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.tooltipRef = createRef();\r\n    }\r\n    disconnectedCallback() {\r\n        this.tooltipRef.value?.hideTooltip();\r\n        this.tooltipRef.value?.remove();\r\n        super.disconnectedCallback();\r\n    }\r\n    render() {\r\n        return html `\r\n            <button id=\"clearButton\" class=\"clear-button\" aria-label=${this.tooltipText ? this.tooltipText : msg('Clear')}>\r\n                <awf-icon raw=${agDeleteCross}></awf-icon>\r\n            </button>\r\n            <awf-tooltip\r\n                ${ref(this.tooltipRef)}\r\n                tip\r\n                trigger=\"clearButton\"\r\n                message=${this.tooltipText ? this.tooltipText : msg('Clear')}\r\n                appendToBody\r\n            ></awf-tooltip>\r\n        `;\r\n    }\r\n};\r\nAwfClearButton.styles = [CLEAR_BUTTON_CSS_VARIABLES, CLEAR_BUTTON_STYLE];\r\n__decorate([\r\n    property()\r\n], AwfClearButton.prototype, \"tooltipText\", void 0);\r\nAwfClearButton = __decorate([\r\n    localized(),\r\n    customElement('awf-clear-button', true)\r\n], AwfClearButton);\r\nexport { AwfClearButton };\r\n//# sourceMappingURL=clear-button.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const INPUT_DATE_STYLE = css `\r\n\r\n    ::slotted(input) {\r\n        grid-area: input;\r\n        width: var(--awf-input-width, 126px);\r\n    }\r\n\r\n    span {\r\n        align-items: center;\r\n        display: flex;\r\n        padding: 0;\r\n    }\r\n\r\n    .calendar-button {\r\n        display: var(--awf-input-date-calendar-display-inner);\r\n        --awf-button-height: calc(var(--awf-input-height-inner) - 2px);\r\n        --awf-icon-color: var(--at-dark-navy);\r\n    }\r\n\r\n    awf-clear-button {\r\n        display: inline-flex;\r\n        margin-right: 8px;\r\n    }\r\n\r\n    awf-input {\r\n        width: auto;\r\n    }\r\n\r\n    awf-clear-button[required] {\r\n        display: none;\r\n    }\r\n`;\r\n//# sourceMappingURL=input-date.style.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agCalendar } from '@agilent/web-icons/core';\r\nimport { localized, msg, str } from '@lit/localize';\r\nimport { LitElement, html } from 'lit';\r\nimport { property, query, queryAssignedElements, state } from 'lit/decorators.js';\r\nimport { createRef, ref } from 'lit/directives/ref.js';\r\nimport '../../atoms/button/button.js';\r\nimport '../../atoms/datepicker/datepicker.js';\r\nimport '../../atoms/icon/icon';\r\nimport { INPUT_CSS_VARIABLES } from '../../atoms/input/input.css-variables.styles';\r\nimport '../../atoms/input/input.js';\r\nimport '../../atoms/overlay/overlay.js';\r\nimport '../../common/clear-button/clear-button';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { FormValidationController } from '../../common/form-validation/form-validation.controller';\r\nimport { COMMON_STYLES, PLACEHOLDER_STYLE } from '../../common/style/common-styles';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller';\r\nimport { dateUtil } from '../../common/utils/date.util';\r\nimport { LabelPosition } from '../../common/utils/label-position.enum';\r\nimport { MessageLevel } from '../../common/utils/message-level.enum';\r\nimport { createCustomEvent } from '../../common/utils/util';\r\nimport { INPUT_DATE_CSS_VARIABLES } from './input-date.css-variables';\r\nimport { INPUT_DATE_STYLE } from './input-date.style';\r\nlet AwfInputDate = class AwfInputDate extends LitElement {\r\n    /** @ignore */\r\n    get field() {\r\n        return this.slottedInputs[0];\r\n    }\r\n    /**\r\n     * The value of the input as a Date object.\r\n     */\r\n    get value() {\r\n        return dateUtil.parseDate(this.field?.value) || undefined;\r\n    }\r\n    set value(value) {\r\n        if (this.field) {\r\n            this.field.value = dateUtil.formatDate(value);\r\n        }\r\n    }\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * The position of the label.\r\n         */\r\n        this.labelPosition = LabelPosition.Top;\r\n        /**\r\n         * When true, error messages are displayed below the input.\r\n         * If false, error messages are displayed in a tooltip and there is no margin below the component.\r\n         */\r\n        this.messageBelow = false;\r\n        /**\r\n         * If true, the datepicker will be attached to the body element.\r\n         */\r\n        this.appendToBody = false;\r\n        /** @ignore */\r\n        this.hasForm = false;\r\n        this.clearButtonVisible = false;\r\n        this.disabled = false;\r\n        this.required = false;\r\n        this._onInputChange = this.onInputChange.bind(this);\r\n        this._onInputFocus = this.onInputFocus.bind(this);\r\n        this._onInputKeydown = this.onInputKeydown.bind(this);\r\n        this._onInputTyped = this.onInputTyped.bind(this);\r\n        this._onDateSelected = this.onDateSelected.bind(this);\r\n        this.mutationObserver = new MutationObserver(this.onInputAttributeChange.bind(this));\r\n        this.formValidationController = new FormValidationController(this);\r\n        this.datepickerRef = createRef();\r\n        this.overlayRef = createRef();\r\n        this.showDateFormat = false;\r\n        this.eventDispatched = false;\r\n        new ElementStyleController(this, [PLACEHOLDER_STYLE]);\r\n    }\r\n    formAssociatedCallback(form) {\r\n        this.formValidationController.formAssociatedCallback(form);\r\n    }\r\n    /** @inheritdoc */\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.subscription = awfTranslateService.onLangChange().subscribe(() => {\r\n            if (this.showDateFormat) {\r\n                this.field.placeholder = msg('yyyy-mm-dd');\r\n            }\r\n        });\r\n    }\r\n    /** @inheritdoc */\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.field?.removeEventListener('change', this._onInputChange);\r\n        this.field?.removeEventListener('focus', this._onInputFocus);\r\n        this.field?.removeEventListener('keydown', this._onInputKeydown);\r\n        this.field?.removeEventListener('input', this._onInputTyped);\r\n        this.subscription?.unsubscribe();\r\n    }\r\n    /** @inheritdoc */\r\n    validateValue() {\r\n        let pass = this.awfInput.validateValue();\r\n        if (pass && !!this.field.value && !dateUtil.validateDateFormat(this.field.value)) {\r\n            this.setInternalMessage(MessageLevel.ERROR, msg('Invalid date format (yyyy-mm-dd)'));\r\n            pass = false;\r\n        }\r\n        const date = dateUtil.parseDate(this.field.value);\r\n        if (pass && date && !this.checkMinDate(date)) {\r\n            this.setInternalMessage(MessageLevel.ERROR, msg(str `The value must be higher than or equal to ${dateUtil.formatDate(this.min)}`));\r\n            pass = false;\r\n        }\r\n        if (pass && date && !this.checkMaxDate(date)) {\r\n            this.setInternalMessage(MessageLevel.ERROR, msg(str `The value must be less than or equal to ${dateUtil.formatDate(this.max)}`));\r\n            pass = false;\r\n        }\r\n        return pass;\r\n    }\r\n    /** @inheritdoc */\r\n    setInternalMessage(level, message) {\r\n        this.awfInput.setInternalMessage(level, message);\r\n    }\r\n    /** @inheritdoc */\r\n    clearInternalErrorMessage() {\r\n        this.awfInput.clearInternalErrorMessage();\r\n    }\r\n    /** @inheritdoc */\r\n    render() {\r\n        return html `\r\n            <awf-input\r\n                labelPosition=${this.labelPosition || LabelPosition.Top}\r\n                novalidate\r\n                @mouseenter=${this.onMouseEnter}\r\n                @mouseleave=${this.onMouseLeave}\r\n                ?messageBelow=${this.messageBelow}\r\n            >\r\n                <slot name=\"label\" slot=\"label\"></slot>\r\n                <slot></slot>\r\n                <slot name=\"error\" slot=\"error\"></slot>\r\n                <slot name=\"warning\" slot=\"warning\"></slot>\r\n                <span slot=\"suffix\">\r\n                    <awf-clear-button\r\n                        ?visible=${this.clearButtonVisible && !this.required && !this.disabled}\r\n                        ?required=${this.required}\r\n                        @click=${this.clear}\r\n                        @keydown=${this.onClearButtonKeydown}\r\n                    ></awf-clear-button>\r\n                    <awf-button\r\n                        class=\"calendar-button\"\r\n                        ?disabled=${this.disabled}\r\n                        @click=${this.toggleDatepicker}\r\n                        @keydown=${this.onCalendarIconKeydown}\r\n                        aria-label=\"calendar\"\r\n                    >\r\n                        <awf-icon raw=${agCalendar}></awf-icon>\r\n                    </awf-button>\r\n                </span>\r\n            </awf-input>\r\n            <awf-overlay\r\n                manualToggle\r\n                offset=\"1\"\r\n                placement=\"bottom-start\"\r\n                ?appendToBody=${this.appendToBody}\r\n                @open=${this.onOpen}\r\n                @close=${this.onClose}\r\n                ${ref(this.overlayRef)}\r\n            >\r\n                <awf-datepicker\r\n                    .value=${this.value || new Date()}\r\n                    .min=${this.min}\r\n                    .max=${this.max}\r\n                    ${ref(this.datepickerRef)}\r\n                ></awf-datepicker>\r\n            </awf-overlay>\r\n        `;\r\n    }\r\n    /** @inheritdoc */\r\n    firstUpdated(_changedProperties) {\r\n        const [input] = this.slottedInputs;\r\n        if (!input) {\r\n            throw new Error('Input not found!');\r\n        }\r\n        input.type = 'text';\r\n        if (!input.placeholder) {\r\n            input.placeholder = msg('yyyy-mm-dd');\r\n            this.showDateFormat = true;\r\n        }\r\n        input.addEventListener('change', this._onInputChange);\r\n        input.addEventListener('focus', this._onInputFocus);\r\n        input.addEventListener('keydown', this._onInputKeydown);\r\n        input.addEventListener('input', this._onInputTyped);\r\n        this.onInputAttributeChange();\r\n        this.mutationObserver.disconnect();\r\n        this.mutationObserver.observe(this.field, { attributeFilter: ['disabled', 'required'] });\r\n        this.datepickerRef.value?.addEventListener(AwfEvent.VALUE_CHANGE, this._onDateSelected);\r\n    }\r\n    updated(_changedProperties) {\r\n        if ((_changedProperties.has('min') || _changedProperties.has('max')) && this.validateValue()) {\r\n            this.clearInternalErrorMessage();\r\n        }\r\n    }\r\n    onInputChange() {\r\n        if (!this.eventDispatched) {\r\n            this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_CHANGE, this.value));\r\n        }\r\n    }\r\n    onInputTyped() {\r\n        this.eventDispatched = false;\r\n        const date = this.value;\r\n        if (!!date || !this.field.value) {\r\n            this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_CHANGE, date));\r\n            this.eventDispatched = true;\r\n        }\r\n    }\r\n    clear() {\r\n        this.eventDispatched = false;\r\n        this.field.value = '';\r\n        this.clearButtonVisible = false;\r\n        this.field.focus();\r\n        if (this.validateValue()) {\r\n            this.clearInternalErrorMessage();\r\n        }\r\n    }\r\n    onInputAttributeChange() {\r\n        this.disabled = this.field.disabled;\r\n        this.required = this.field.required;\r\n    }\r\n    onDateSelected(event) {\r\n        this.eventDispatched = !this.appendToBody;\r\n        this.value = event.detail;\r\n        this.overlayRef.value?.hide();\r\n    }\r\n    toggleDatepicker(event) {\r\n        if (!this.disabled && this.overlayRef.value) {\r\n            this.overlayRef.value.refElement = this.field;\r\n            this.overlayRef.value.toggle();\r\n        }\r\n        event.stopImmediatePropagation();\r\n    }\r\n    onInputFocus() {\r\n        this.overlayRef.value?.hide();\r\n    }\r\n    checkMaxDate(date) {\r\n        return !this.max || dateUtil.compareDates(date, this.max) <= 0;\r\n    }\r\n    checkMinDate(date) {\r\n        return !this.min || dateUtil.compareDates(date, this.min) >= 0;\r\n    }\r\n    onMouseEnter() {\r\n        if (!this.field.required && !this.field.disabled && !!this.field.value) {\r\n            this.clearButtonVisible = true;\r\n        }\r\n    }\r\n    onMouseLeave() {\r\n        this.clearButtonVisible = false;\r\n    }\r\n    onInputKeydown(event) {\r\n        if (event.code === 'Tab' && !!this.field.value) {\r\n            this.clearButtonVisible = true;\r\n        }\r\n    }\r\n    onClearButtonKeydown(event) {\r\n        if (event.code === 'Tab') {\r\n            this.clearButtonVisible = false;\r\n        }\r\n    }\r\n    onCalendarIconKeydown(event) {\r\n        if (event.code === 'ArrowDown') {\r\n            this.overlayRef.value?.toggle();\r\n        }\r\n        else if (event.code === 'Tab' && event.shiftKey && !!this.field.value) {\r\n            this.clearButtonVisible = true;\r\n        }\r\n    }\r\n    onOpen() {\r\n        this.calendarIcon.classList.add('activated');\r\n        setTimeout(() => {\r\n            this.datepickerRef.value?.requestFocus();\r\n            this.field.classList.add('slotted-input-hidden');\r\n        }, 100);\r\n    }\r\n    onClose() {\r\n        this.calendarIcon.classList.remove('activated');\r\n        setTimeout(() => {\r\n            this.field.classList.remove('slotted-input-hidden');\r\n            this.calendarIcon.requestFocus();\r\n        }, 100);\r\n    }\r\n};\r\nAwfInputDate.styles = [COMMON_STYLES, INPUT_CSS_VARIABLES, INPUT_DATE_CSS_VARIABLES, INPUT_DATE_STYLE];\r\n/** @ignore */\r\nAwfInputDate.formAssociated = true;\r\n__decorate([\r\n    property()\r\n], AwfInputDate.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfInputDate.prototype, \"min\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfInputDate.prototype, \"max\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputDate.prototype, \"messageBelow\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputDate.prototype, \"appendToBody\", void 0);\r\n__decorate([\r\n    query('awf-input')\r\n], AwfInputDate.prototype, \"awfInput\", void 0);\r\n__decorate([\r\n    query('awf-button.calendar-button')\r\n], AwfInputDate.prototype, \"calendarIcon\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'input', flatten: true })\r\n], AwfInputDate.prototype, \"slottedInputs\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputDate.prototype, \"clearButtonVisible\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputDate.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputDate.prototype, \"required\", void 0);\r\nAwfInputDate = __decorate([\r\n    localized(),\r\n    customElement('awf-input-date', true)\r\n], AwfInputDate);\r\nexport { AwfInputDate };\r\n//# sourceMappingURL=input-date.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agCalendar } from '@agilent/web-icons/core';\r\nimport { localized, msg } from '@lit/localize';\r\nimport { LitElement, html } from 'lit';\r\nimport { property, query, queryAssignedElements, state } from 'lit/decorators.js';\r\nimport { createRef, ref } from 'lit/directives/ref.js';\r\nimport '../../atoms/button/button.js';\r\nimport '../../atoms/icon/icon.js';\r\nimport { INPUT_CSS_VARIABLES } from '../../atoms/input/input.css-variables.styles';\r\nimport '../../atoms/overlay/overlay.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES, PLACEHOLDER_STYLE } from '../../common/style/common-styles';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller';\r\nimport { dateUtil } from '../../common/utils/date.util';\r\nimport { LabelPosition } from '../../common/utils/label-position.enum';\r\nimport { createCustomEvent } from '../../common/utils/util';\r\nimport '../date-range-picker/date-range-picker.js';\r\nimport '../input-date/input-date.js';\r\nimport { INPUT_DATE_RANGE_STYLES } from './input-date-range.style';\r\nlet AwfInputDateRange = class AwfInputDateRange extends LitElement {\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * The position of the label.\r\n         */\r\n        this.labelPosition = LabelPosition.Top;\r\n        /**\r\n         * If true, the datepicker will be attached to the body element.\r\n         */\r\n        this.appendToBody = false;\r\n        this.awfDateRangePickerRef = createRef();\r\n        const style = `\r\n            :not([labelPosition='left']) > input.slotted-input:not(:focus-within)::placeholder {\r\n                visibility: hidden;\r\n            }\r\n        `;\r\n        new ElementStyleController(this, [PLACEHOLDER_STYLE, style]);\r\n    }\r\n    /** @inheritdoc */\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.subscription = awfTranslateService.onLangChange().subscribe(() => {\r\n            this.shadowRoot.querySelector('label[for=input-from]').innerHTML = msg('From');\r\n            this.shadowRoot.querySelector('label[for=input-to]').innerHTML = msg('To');\r\n        });\r\n    }\r\n    /** @inheritdoc */\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.subscription.unsubscribe();\r\n    }\r\n    render() {\r\n        return html `\r\n            <div class=\"awf-layout\" id=\"overlayAnchor\">\r\n                <awf-input-date\r\n                    class=\"awf-from-input\"\r\n                    labelPosition=${this.labelPosition}\r\n                    @valuechange=${this.onStartDateChange}\r\n                    .max=${this.endDate}\r\n                >\r\n                    <slot name=\"from\"></slot>\r\n                    <label slot=\"label\" for=\"input-from\"></label>\r\n                </awf-input-date>\r\n                <awf-input-date\r\n                    class=\"awf-to-input\"\r\n                    labelPosition=${this.labelPosition}\r\n                    @valuechange=${this.onEndDateChange}\r\n                    .min=${this.startDate}\r\n                >\r\n                    <slot name=\"to\"></slot>\r\n                    <label slot=\"label\" for=\"input-to\"></label>\r\n                </awf-input-date>\r\n                <awf-button\r\n                    class=\"awf-calendar-button\"\r\n                    @click=${this.toggleDateRangePicker}\r\n                    @keydown=${this.onIconKeydown}\r\n                    aria-label=\"open calendar\"\r\n                >\r\n                    <awf-icon raw=${agCalendar}></awf-icon>\r\n                </awf-button>\r\n            </div>\r\n            <awf-overlay\r\n                ?appendToBody=${this.appendToBody}\r\n                manualToggle\r\n                offset=\"-51\"\r\n                placement=\"bottom-start\"\r\n                style=\"padding: 0\"\r\n                trigger=\"overlayAnchor\"\r\n                @open=${this.onDateRangePickerOpen}\r\n            >\r\n                <awf-date-range-picker @valuechange=${this.onDatesSelected} ${ref(this.awfDateRangePickerRef)}></awf-date-range-picker>\r\n            </awf-overlay>\r\n        `;\r\n    }\r\n    async firstUpdated(_changedProperties) {\r\n        const [fromInput] = this.fromInput;\r\n        const [toInput] = this.toInput;\r\n        if (!fromInput || !toInput) {\r\n            throw new Error('Input not found!');\r\n        }\r\n        fromInput.id = 'input-from';\r\n        fromInput.ariaLabel = 'input from';\r\n        toInput.id = 'input-to';\r\n        toInput.ariaLabel = 'input to';\r\n        this.shadowRoot.querySelector('label[for=input-from]').innerHTML = msg('From');\r\n        this.shadowRoot.querySelector('label[for=input-to]').innerHTML = msg('To');\r\n        await this.updateComplete;\r\n        if (fromInput.value) {\r\n            this.startDate = dateUtil.parseDate(fromInput.value);\r\n        }\r\n        if (toInput.value) {\r\n            this.endDate = dateUtil.parseDate(toInput.value);\r\n        }\r\n    }\r\n    updated(_changedProperties) {\r\n        if (_changedProperties.has('startDate') || _changedProperties.has('endDate')) {\r\n            if (this.toAwfInput.validateValue()) {\r\n                this.toAwfInput.clearInternalErrorMessage();\r\n            }\r\n            if (this.fromAwfInput.validateValue()) {\r\n                this.fromAwfInput.clearInternalErrorMessage();\r\n            }\r\n        }\r\n    }\r\n    toggleDateRangePicker() {\r\n        this.awfOverlay.toggle();\r\n    }\r\n    onDatesSelected(event) {\r\n        this.awfOverlay.hide();\r\n        this.startDate = event.detail.startDate;\r\n        this.endDate = event.detail.endDate;\r\n        this.fromAwfInput.value = this.startDate;\r\n        this.toAwfInput.value = this.endDate;\r\n        event.stopPropagation();\r\n        this.dispatchValuechange();\r\n    }\r\n    onStartDateChange(event) {\r\n        this.startDate = event.detail;\r\n        event.stopPropagation();\r\n        this.dispatchValuechange();\r\n    }\r\n    onEndDateChange(event) {\r\n        this.endDate = event.detail;\r\n        event.stopPropagation();\r\n        this.dispatchValuechange();\r\n    }\r\n    dispatchValuechange() {\r\n        this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_CHANGE, { startDate: this.startDate, endDate: this.endDate }));\r\n    }\r\n    onDateRangePickerOpen() {\r\n        if (this.awfDateRangePickerRef.value) {\r\n            const today = new Date();\r\n            this.awfDateRangePickerRef.value.startDate = this.startDate || new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n            if (this.startDate && this.endDate && this.startDate.getTime() < this.endDate.getTime()) {\r\n                this.awfDateRangePickerRef.value.endDate = this.endDate;\r\n            }\r\n            else {\r\n                this.awfDateRangePickerRef.value.endDate = undefined;\r\n            }\r\n            this.awfDateRangePickerRef.value.fromTabSelected = !this.startDate;\r\n            this.awfDateRangePickerRef.value.style.setProperty('--awf-drp-width', this.awfLayout.getBoundingClientRect().width + 'px');\r\n            this.awfDateRangePickerRef.value.requestFocus();\r\n            setTimeout(() => this.calendarIcon.classList.remove('activated'), 100);\r\n        }\r\n    }\r\n    async onIconKeydown(event) {\r\n        if (event.code === 'ArrowDown') {\r\n            this.awfOverlay.show();\r\n        }\r\n    }\r\n};\r\nAwfInputDateRange.styles = [COMMON_STYLES, INPUT_CSS_VARIABLES, INPUT_DATE_RANGE_STYLES];\r\n__decorate([\r\n    property()\r\n], AwfInputDateRange.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputDateRange.prototype, \"appendToBody\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputDateRange.prototype, \"startDate\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputDateRange.prototype, \"endDate\", void 0);\r\n__decorate([\r\n    query('awf-overlay')\r\n], AwfInputDateRange.prototype, \"awfOverlay\", void 0);\r\n__decorate([\r\n    query('awf-input-date.awf-from-input')\r\n], AwfInputDateRange.prototype, \"fromAwfInput\", void 0);\r\n__decorate([\r\n    query('awf-input-date.awf-to-input')\r\n], AwfInputDateRange.prototype, \"toAwfInput\", void 0);\r\n__decorate([\r\n    query('.awf-layout')\r\n], AwfInputDateRange.prototype, \"awfLayout\", void 0);\r\n__decorate([\r\n    query('awf-button.awf-calendar-button')\r\n], AwfInputDateRange.prototype, \"calendarIcon\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: 'from', selector: 'input', flatten: true })\r\n], AwfInputDateRange.prototype, \"fromInput\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ slot: 'to', selector: 'input', flatten: true })\r\n], AwfInputDateRange.prototype, \"toInput\", void 0);\r\nAwfInputDateRange = __decorate([\r\n    localized(),\r\n    customElement('awf-input-date-range', true)\r\n], AwfInputDateRange);\r\nexport { AwfInputDateRange };\r\n//# sourceMappingURL=input-date-range.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const SELECT_DROPDOWN_STYLES = css `\r\n    awf-overlay {\r\n        border: 1px solid var(--at-gray);\r\n        box-sizing: border-box;\r\n        filter: unset;\r\n        padding: 0;\r\n        margin-left:-1px;\r\n        --awf-checklist-max-height: 0;\r\n    }\r\n\r\n    awf-list-option {\r\n        border: 1px solid transparent;\r\n        cursor: pointer;\r\n        padding: var(--awf-dropdown-padding-ud-inner) var(--awf-dropdown-padding-lr-inner);\r\n        user-select: none;\r\n    }\r\n\r\n    awf-list-option[disabled] {\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    awf-list-option[focused] {\r\n        background-color: var(--awf-state-hover-background);\r\n    }\r\n\r\n    awf-overlay[keyboard-navigation] awf-list-option[focused] {\r\n        border-color: var(--at-blue-shade);\r\n    }\r\n\r\n    awf-overlay[keyboard-navigation] awf-list-option[focused]:not([selected]) {\r\n        background-color: transparent;\r\n    }\r\n\r\n    awf-checklist {\r\n        max-height: var(--awf-checklist-max-height);\r\n        overflow-y: auto;\r\n    }\r\n`;\r\n//# sourceMappingURL=select-dropdown.style.js.map","import { __decorate } from \"tslib\";\r\nimport { LitElement, html } from 'lit';\r\nimport { createRef, ref } from 'lit-html/directives/ref.js';\r\nimport { property, query, queryAll } from 'lit/decorators.js';\r\nimport '../../atoms/list-option/list-option.js';\r\nimport '../../atoms/overlay/overlay.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport '../../molecules/checklist/checklist.js';\r\nimport { SELECT_DROPDOWN_CSS_VARIABLES } from './select-dropdown.css-variables.styles';\r\nimport { SELECT_DROPDOWN_STYLES } from './select-dropdown.style';\r\nlet AwfSelectDropdown = class AwfSelectDropdown extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * If true, the dropdown will be attached to the body element.\r\n         */\r\n        this.appendToBody = false;\r\n        /**\r\n         * The dropdown position.\r\n         */\r\n        this.placement = 'auto';\r\n        this.overlayRef = createRef();\r\n        this.checklistRef = createRef();\r\n    }\r\n    moveListOptions() {\r\n        this.querySelectorAll('awf-list-option').forEach(element => this.checklist?.appendChild(element));\r\n    }\r\n    render() {\r\n        return html `\r\n            <awf-overlay manualToggle offset=\"-1\" placement=${this.placement} ${ref(this.overlayRef)}>\r\n                <awf-checklist noDeselect ${ref(this.checklistRef)} class=\"no-separation-border\"> </awf-checklist>\r\n            </awf-overlay>\r\n        `;\r\n    }\r\n    firstUpdated(_changedProperties) {\r\n        this.moveListOptions();\r\n    }\r\n};\r\nAwfSelectDropdown.styles = [COMMON_STYLES, SELECT_DROPDOWN_CSS_VARIABLES, SELECT_DROPDOWN_STYLES];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSelectDropdown.prototype, \"appendToBody\", void 0);\r\n__decorate([\r\n    property({ type: String, reflect: true })\r\n], AwfSelectDropdown.prototype, \"placement\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfSelectDropdown.prototype, \"focusedOption\", void 0);\r\n__decorate([\r\n    query('awf-overlay')\r\n], AwfSelectDropdown.prototype, \"overlay\", void 0);\r\n__decorate([\r\n    query('awf-checklist')\r\n], AwfSelectDropdown.prototype, \"checklist\", void 0);\r\n__decorate([\r\n    queryAll('awf-list-option')\r\n], AwfSelectDropdown.prototype, \"options\", void 0);\r\nAwfSelectDropdown = __decorate([\r\n    customElement('awf-select-dropdown', true)\r\n], AwfSelectDropdown);\r\nexport { AwfSelectDropdown };\r\n//# sourceMappingURL=select-dropdown.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agDropDownMoreDetailsColumnDescending, agLessDetailsColumnAscending } from '@agilent/web-icons/core';\r\nimport { localized, msg, str } from '@lit/localize';\r\nimport { LitElement, html } from 'lit';\r\nimport { createRef, ref } from 'lit-html/directives/ref.js';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport { repeat } from 'lit/directives/repeat.js';\r\nimport '../../atoms/icon/icon.js';\r\nimport { INPUT_CSS_VARIABLES } from '../../atoms/input/input.css-variables.styles';\r\nimport '../../atoms/input/input.js';\r\nimport { AwfListOption } from '../../atoms/list-option/list-option';\r\nimport '../../atoms/list-option/list-option.js';\r\nimport '../../common/clear-button/clear-button.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { FormValidationController } from '../../common/form-validation/form-validation.controller';\r\nimport { FLOATING_FORCED_ATTR } from '../../common/label/label.style';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { LabelPosition } from '../../common/utils/label-position.enum';\r\nimport './select-dropdown.js';\r\nimport { SelectMode } from './select-mode.enum';\r\nimport { SELECT_STYLES } from './select.styles';\r\nlet AwfSelect = class AwfSelect extends LitElement {\r\n    /**\r\n     * The given HTML Input field that contains the value of the select.\r\n     *\r\n     * @inheritdoc FormValidationControllerHost\r\n     * HTML input.\r\n     * <br>\r\n     * <i><u>Note:</u> it is an expected property of this element defined as a <code>FormValidationControllerHost</code>.</i>\r\n     * @ignore\r\n     */\r\n    get field() {\r\n        return this.htmlInputElement;\r\n    }\r\n    get label() {\r\n        if (this.awfInput) {\r\n            return this.awfInput.slottedLabel[0];\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * The list of <code>AwfListOption</code>, added to the options list, as an array.\r\n     */\r\n    get actualAwfListOptions() {\r\n        return Array.from(this.dropdown?.options || []);\r\n    }\r\n    /**\r\n     * The selected <code>AwfListOption</code>, if any.\r\n     */\r\n    get selectedAwfListOption() {\r\n        return this.actualAwfListOptions.find(option => option.selected);\r\n    }\r\n    get dropdown() {\r\n        return this.dropdownRef.value;\r\n    }\r\n    /**\r\n     * Creates a new AWF Select Web Component.\r\n     */\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * If true, the dropdown will be attached to the body element.\r\n         */\r\n        this.appendToBody = false;\r\n        /**\r\n         * <code>search</code>: the user is able to type text to search options.<br>\r\n         * <code>freetext</code>: the user is able to type text to search or add options.<br>\r\n         * <code>default</code> or not set: the user cannot type text.\r\n         */\r\n        this.mode = SelectMode.DEFAULT;\r\n        /**\r\n         * The label position.\r\n         */\r\n        this.labelPosition = LabelPosition.Top;\r\n        /**\r\n         * The dropdown position.\r\n         */\r\n        this.placement = 'auto';\r\n        /**\r\n         * When set to <code>true</code>, messages (errors, warnings, etc.) are displayed below the select.\r\n         * Otherwise (default), they are displayed in a tooltip and there is no margin below the component.\r\n         */\r\n        this.messageBelow = false;\r\n        /**\r\n         * When true, the component is disabled.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * When true, the component's value cannot be edited.\r\n         */\r\n        this.readonly = false;\r\n        /**\r\n         * When true, a value is required for this component.\r\n         * If the component is in a form, when the form is validated, the component will be in error state.\r\n         */\r\n        this.required = false;\r\n        /**\r\n         * The placeholder that is displayed when the label is on the left hand side.\r\n         */\r\n        this.placeholder = '';\r\n        /**\r\n         * Tells wether this AWF Select Web Component is part of a form (then set to <code>true</code>) or not.\r\n         *\r\n         * @inheritdoc FormValidationControllerHost\r\n         * Whether the host is in a form or not.\r\n         * <br>\r\n         * <i><u>Note:</u> it is an expected property of this element defined as a <code>FormValidationControllerHost</code>.</i>\r\n         * @ignore\r\n         */\r\n        this.hasForm = false;\r\n        /**\r\n         * The special entry, used when <code>freeText</code> is enabled (set to <code>true</code>), to add new options to this select.\r\n         */\r\n        this.addItem = new AwfListOption();\r\n        this.noItemFound = new AwfListOption();\r\n        /**\r\n         * The common AWF controller for the form validation.\r\n         * <br>\r\n         * It especially manages the <code>required</code> error message.\r\n         */\r\n        this.formValidationController = new FormValidationController(this);\r\n        this.dropdownRef = createRef();\r\n        /**\r\n         * The opened state of the dropdown.\r\n         */\r\n        this.stateDropdownOpened = false;\r\n        this.clearButtonVisible = false;\r\n        this.mutationObserver = new MutationObserver(this.onChildListChanged.bind(this));\r\n        this.addItem.value = '#@AddItem@#';\r\n        this.addItem.noCheckbox = true;\r\n        this.addItem.id = 'addItemOption';\r\n        this.noItemFound.value = '#@NoItemFound@#';\r\n        this.noItemFound.noCheckbox = true;\r\n        this.noItemFound.id = 'noItemFound';\r\n        this.noItemFound.disabled = true;\r\n    }\r\n    /** @inheritdoc LitElement */\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.addEventListener('focusin', this.onFocusIn);\r\n        this.addEventListener('focusout', this.onFocusOut);\r\n        this.addEventListener('mouseenter', this.onMouseEnter);\r\n        this.addEventListener('mouseleave', this.onMouseLeave);\r\n        this.mutationObserver.observe(this, { childList: true });\r\n    }\r\n    /** @inheritdoc LitElement */\r\n    disconnectCallback() {\r\n        super.disconnectedCallback();\r\n        this.removeEventListener('focusin', this.onFocusIn);\r\n        this.removeEventListener('focusout', this.onFocusOut);\r\n        this.removeEventListener('mouseenter', this.onMouseEnter);\r\n        this.removeEventListener('mouseleave', this.onMouseLeave);\r\n        this.mutationObserver.disconnect();\r\n    }\r\n    /**\r\n     * @inheritdoc LitElement\r\n     */\r\n    render() {\r\n        return html `\r\n            <awf-input\r\n                @click=${this.toggleOverlay}\r\n                labelPosition=${this.labelPosition}\r\n                ?messageBelow=${this.messageBelow}\r\n                ?stateDropdownOpened=${this.stateDropdownOpened}\r\n            >\r\n                <slot name=\"label\" slot=\"label\"></slot>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=${this.placeholder}\r\n                    ?disabled=${this.disabled}\r\n                    ?readonly=${this.readonly}\r\n                    ?required=${this.required}\r\n                    @keydown=${this.onKeyDown}\r\n                    @keyup=${this.onKeyUp}\r\n                    aria-label=${this.label?.textContent || 'Select input'}\r\n                />\r\n                <span slot=\"suffix\">\r\n                    <awf-clear-button\r\n                        ?visible=${this.clearButtonVisible && !this.required && !this.disabled && !this.readonly}\r\n                        @click=${this.clearValue}\r\n                    >\r\n                    </awf-clear-button>\r\n                    <awf-icon id=\"expandIcon\" raw=${agDropDownMoreDetailsColumnDescending} ?hidden=${this.stateDropdownOpened}></awf-icon>\r\n                    <awf-icon id=\"collapseIcon\" raw=${agLessDetailsColumnAscending} ?hidden=${!this.stateDropdownOpened}></awf-icon>\r\n                </span>\r\n                <slot name=\"error\" slot=\"error\"></slot>\r\n                <slot name=\"warning\" slot=\"warning\"></slot>\r\n            </awf-input>\r\n            <awf-select-dropdown\r\n                placement=${this.placement}\r\n                ?appendToBody=${this.appendToBody}\r\n                .focusedOption=${this.focusedOption}\r\n                @close=${this.onOverlayClose}\r\n                @open=${this.onOverlayOpen}\r\n                @valuechange=${this.onValueChange}\r\n                @click=${this.onChecklistClick}\r\n                @keyup=${() => this.dropdown?.overlay.setAttribute('keyboard-navigation', '')}\r\n                ${ref(this.dropdownRef)}>\r\n                ${repeat(Array.from(this.querySelectorAll('option')), (option) => option.value, this.renderOption.bind(this))}\r\n            </awf-select-dropdown>\r\n        `;\r\n    }\r\n    firstUpdated(_changedProperties) {\r\n        if (this.dropdown && this.appendToBody) {\r\n            document.body.appendChild(this.dropdown);\r\n        }\r\n    }\r\n    updated(_changedProperties) {\r\n        this.dropdown?.moveListOptions();\r\n        if (_changedProperties.has('value')) {\r\n            const selectedOption = this.actualAwfListOptions\r\n                .map(option => {\r\n                option.selected = option.value === this.value;\r\n                return option;\r\n            })\r\n                .find(option => option.selected);\r\n            this.field.value = selectedOption?.textContent || '';\r\n        }\r\n        if (_changedProperties.has('appendToBody') && this.dropdown) {\r\n            if (this.appendToBody) {\r\n                document.body.appendChild(this.dropdown);\r\n            }\r\n            else {\r\n                this.shadowRoot?.appendChild(this.dropdown);\r\n            }\r\n        }\r\n        if (this.dropdown?.overlay && (_changedProperties.has('disabled') || _changedProperties.has('readonly'))) {\r\n            this.dropdown.overlay.disabled = this.field.disabled || this.field.readOnly;\r\n        }\r\n    }\r\n    /** @inheritdoc FormValidationControllerHost  */\r\n    validateValue() {\r\n        return this.awfInput.validateValue();\r\n    }\r\n    /** @inheritdoc FormValidationControllerHost */\r\n    setInternalMessage(level, message) {\r\n        this.awfInput.setInternalMessage(level, message);\r\n    }\r\n    /** @inheritdoc FormValidationControllerHost */\r\n    clearInternalErrorMessage() {\r\n        this.awfInput.clearInternalErrorMessage();\r\n    }\r\n    /** @inheritdoc ElementInternals */\r\n    formAssociatedCallback(form) {\r\n        this.formValidationController.formAssociatedCallback(form);\r\n    }\r\n    toggleOverlay(event) {\r\n        if (!this.disabled && this.dropdown?.overlay) {\r\n            this.dropdown.overlay.refElement = this.field;\r\n            this.dropdown.overlay.toggle();\r\n        }\r\n        event.stopImmediatePropagation();\r\n    }\r\n    showOverlay() {\r\n        if (this.dropdown?.overlay) {\r\n            this.dropdown.overlay.refElement = this.field;\r\n            this.dropdown.overlay.show();\r\n        }\r\n    }\r\n    clearValue(event) {\r\n        this.value = null;\r\n        this.field.value = '';\r\n        this.clearButtonVisible = false;\r\n        this.dispatchEvent(new CustomEvent(AwfEvent.VALUE_CHANGE, { bubbles: true, detail: this.value }));\r\n        event.stopImmediatePropagation();\r\n    }\r\n    onChecklistClick() {\r\n        if (!this.dropdown?.overlay.open) {\r\n            this.field.focus();\r\n        }\r\n    }\r\n    onOverlayClose() {\r\n        this.stateDropdownOpened = false;\r\n        if (!this.field.value) {\r\n            this.actualAwfListOptions.forEach(option => (option.selected = false));\r\n        }\r\n        if (this.value) {\r\n            const selectedOption = Array.from(this.querySelectorAll('option')).find(option => option.value === this.value);\r\n            this.field.value = selectedOption?.textContent || '';\r\n            if (selectedOption) {\r\n                selectedOption.selected = true;\r\n            }\r\n        }\r\n        else {\r\n            this.field.value = '';\r\n        }\r\n        this.addItem.remove();\r\n        this.addItem.removeAttribute('focused');\r\n        this.noItemFound.remove();\r\n        this.dropdown?.overlay.removeAttribute('keyboard-navigation');\r\n        this.clearFilter();\r\n        this.dropdown?.overlay.style.setProperty('--awf-checklist-max-height', '0');\r\n    }\r\n    onOverlayOpen() {\r\n        this.setPlacement();\r\n        this.forceLabelPositionComputing();\r\n        this.stateDropdownOpened = true;\r\n        this.clearInternalErrorMessage();\r\n        this.resizeOverlay();\r\n        setTimeout(() => this.chooseFocusedElement().focus());\r\n    }\r\n    setPlacement() {\r\n        switch (this.placement) {\r\n            case 'top':\r\n            case 'top-start':\r\n                this.placement = 'top-start';\r\n                break;\r\n            case 'bottom':\r\n            case 'bottom-start':\r\n                this.placement = 'bottom-start';\r\n                break;\r\n            default:\r\n                this.placement = 'auto';\r\n                if (this.dropdown?.overlay) {\r\n                    this.dropdown.overlay.defaultPlacement = 'bottom-start';\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    forceLabelPositionComputing() {\r\n        this.awfInput.dispatchEvent(new Event('focusin', { bubbles: true }));\r\n    }\r\n    resizeOverlay() {\r\n        let width = this.awfInput.getBoundingClientRect().width;\r\n        if (this.labelPosition === LabelPosition.Left) {\r\n            width -= this.label?.getBoundingClientRect().width || 0;\r\n        }\r\n        if (this.dropdown?.overlay) {\r\n            this.dropdown.overlay.style.width = `${width}px`;\r\n        }\r\n    }\r\n    chooseFocusedElement() {\r\n        this.focusedOption = this.selectedAwfListOption || this.actualAwfListOptions[0];\r\n        let el = null;\r\n        if (this.mode === SelectMode.DEFAULT) {\r\n            el = this.focusedOption;\r\n        }\r\n        if (!el) {\r\n            el = this.field;\r\n        }\r\n        return el;\r\n    }\r\n    onMouseEnter() {\r\n        this.clearButtonVisible = !!this.value;\r\n    }\r\n    onMouseLeave() {\r\n        this.clearButtonVisible = false;\r\n    }\r\n    onFocusIn() {\r\n        this.label?.setAttribute(`${FLOATING_FORCED_ATTR}`, '');\r\n        this.clearButtonVisible = !!this.value;\r\n    }\r\n    onFocusOut() {\r\n        this.label?.removeAttribute(`${FLOATING_FORCED_ATTR}`);\r\n        this.clearButtonVisible = false;\r\n    }\r\n    onKeyDown(event) {\r\n        if ('Tab' !== event.key) {\r\n            event.stopPropagation();\r\n            if (this.mode === SelectMode.DEFAULT) {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n    onKeyUp(event) {\r\n        if ('Tab' !== event.key) {\r\n            event.stopPropagation();\r\n            if (this.mode === SelectMode.DEFAULT) {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n        if (['Enter'].includes(event.key)) {\r\n            if (this.dropdown?.overlay.open) {\r\n                this.dropdown.checklist?.handleKeyUp(event);\r\n                this.dropdown.overlay.hide();\r\n            }\r\n            else {\r\n                this.showOverlay();\r\n            }\r\n        }\r\n        else if (['ArrowDown', 'ArrowUp'].includes(event.key)) {\r\n            if (this.dropdown?.overlay.open && this.mode !== SelectMode.DEFAULT) {\r\n                this.dropdown.overlay?.setAttribute('keyboard-navigation', '');\r\n                this.dropdown.checklist?.handleKeyUp(event);\r\n                this.field.focus();\r\n            }\r\n            else {\r\n                this.showOverlay();\r\n            }\r\n        }\r\n        else if (event.key.length === 1 || 'Backspace' === event.key) {\r\n            this.onCharacterTyped();\r\n        }\r\n    }\r\n    onCharacterTyped() {\r\n        if (this.mode === SelectMode.SEARCH) {\r\n            this.handleSearchMode();\r\n        }\r\n        else if (this.mode === SelectMode.FREE_TEXT) {\r\n            this.handleFreeText();\r\n        }\r\n    }\r\n    handleFreeText() {\r\n        this.showOverlay();\r\n        const existingOption = this.actualAwfListOptions.find(option => option.textContent === this.field.value);\r\n        if (existingOption) {\r\n            this.filterOptions();\r\n            this.focusedOption = existingOption;\r\n            this.addItem.removeAttribute('focused');\r\n            this.addItem.remove();\r\n        }\r\n        else if (this.field.value) {\r\n            this.filterOptions();\r\n            this.shadowRoot?.querySelectorAll('awf-list-option').forEach((option) => {\r\n                option.focused = false;\r\n            });\r\n            this.dropdown?.overlay.removeAttribute('keyboard-navigation');\r\n            this.addItem.innerText = msg(str `Add item \"${this.field.value}\"`);\r\n            this.addItem.setAttribute('focused', '');\r\n            this.dropdown?.checklist.appendChild(this.addItem);\r\n            this.focusedOption = this.addItem;\r\n        }\r\n        else {\r\n            this.clearFilter();\r\n            this.addItem.removeAttribute('focused');\r\n            this.addItem.remove();\r\n            this.focusedOption = undefined;\r\n            this.value = undefined;\r\n        }\r\n    }\r\n    handleSearchMode() {\r\n        this.showOverlay();\r\n        this.filterOptions();\r\n        const firstMatch = this.actualAwfListOptions.find(option => option !== this.noItemFound && !option.hidden);\r\n        if (firstMatch) {\r\n            this.noItemFound.remove();\r\n            this.actualAwfListOptions.forEach(option => (option.focused = false));\r\n            firstMatch.focused = true;\r\n            this.focusedOption = firstMatch;\r\n        }\r\n        else {\r\n            this.noItemFound.innerText = msg('No item found');\r\n            this.dropdown?.checklist.appendChild(this.noItemFound);\r\n        }\r\n    }\r\n    filterOptions() {\r\n        this.dropdown?.checklist\r\n            ?.querySelectorAll('awf-list-option:not(#addItemOption):not(#noItemFound)')\r\n            .forEach((option) => {\r\n            option.hidden = !option.textContent?.includes(this.field.value);\r\n        });\r\n    }\r\n    clearFilter() {\r\n        this.dropdown?.checklist.querySelectorAll('awf-list-option[hidden]').forEach(option => (option.hidden = false));\r\n    }\r\n    onValueChange(event) {\r\n        event.stopPropagation();\r\n        this.valueSelected(event.detail);\r\n        this.dropdown?.overlay.hide();\r\n    }\r\n    valueSelected(value) {\r\n        this.value = value;\r\n        if (this.mode === SelectMode.FREE_TEXT && this.addItem.value === value) {\r\n            this.value = this.addNewOption().value;\r\n            this.addItem.selected = false;\r\n            this.addItem.remove();\r\n        }\r\n        const selected = Array.from(this.querySelectorAll('option')).find(option => option.value === this.value);\r\n        if (selected) {\r\n            this.field.value = selected.text;\r\n        }\r\n        else {\r\n            this.field.value = '';\r\n            this.value = null;\r\n        }\r\n        this.validateValue();\r\n        this.dispatchEvent(new CustomEvent(AwfEvent.VALUE_CHANGE, { detail: this.value }));\r\n        this.dispatchEvent(new Event('change'));\r\n    }\r\n    addNewOption() {\r\n        const option = document.createElement('option');\r\n        option.value = this.field.value;\r\n        option.text = this.field.value;\r\n        this.appendChild(option);\r\n        this.dispatchEvent(new CustomEvent(AwfEvent.ADD_VALUE, { detail: this.field.value }));\r\n        return option;\r\n    }\r\n    isFocused(optionValue) {\r\n        return this.focusedOption?.value === optionValue;\r\n    }\r\n    renderOption(option) {\r\n        // prettier-ignore\r\n        return html `<awf-list-option\r\n                        noCheckbox\r\n                        ?selected=${option.selected}\r\n                        ?focused=${this.isFocused(option.value)}\r\n                        ?disabled=${option.disabled}\r\n                        .value=${option.value}\r\n                        @keyup=${(e) => this.onOptionKeyUp(e, option)}\r\n                        @mouseenter=${this.onOptionMouseEnter}>${option.text}</awf-list-option>`;\r\n    }\r\n    onOptionKeyUp(event, option) {\r\n        if (['Enter', ' '].includes(event.key) && option.disabled) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n    onOptionMouseEnter() {\r\n        this.dropdown?.overlay.removeAttribute('keyboard-navigation');\r\n    }\r\n    onChildListChanged() {\r\n        const options = this.querySelectorAll('option');\r\n        if (options.length === 0) {\r\n            this.dropdown?.checklist?.querySelectorAll('awf-list-option').forEach(opt => opt.remove());\r\n            this.field.value = '';\r\n        }\r\n        if (this.value && !this.field.value) {\r\n            const option = this.querySelector(`option[value=${this.value}]`);\r\n            if (option) {\r\n                options.forEach(opt => opt.selected = false);\r\n                option.selected = true;\r\n                this.field.value = option.textContent || '';\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * The styles to be applied specifically on this element.\r\n *\r\n * @inheritdoc LitElement\r\n */\r\nAwfSelect.styles = [COMMON_STYLES, INPUT_CSS_VARIABLES, SELECT_STYLES];\r\n/**\r\n * Required member to allow form validation.\r\n *\r\n * @inheritdoc ElementInternals\r\n * @ignore\r\n */\r\nAwfSelect.formAssociated = true;\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSelect.prototype, \"appendToBody\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfSelect.prototype, \"mode\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfSelect.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property({ type: String, reflect: true })\r\n], AwfSelect.prototype, \"placement\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfSelect.prototype, \"messageBelow\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSelect.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSelect.prototype, \"readonly\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfSelect.prototype, \"required\", void 0);\r\n__decorate([\r\n    property({ type: String, reflect: true })\r\n], AwfSelect.prototype, \"placeholder\", void 0);\r\n__decorate([\r\n    property({ type: Object })\r\n], AwfSelect.prototype, \"value\", void 0);\r\n__decorate([\r\n    query('input')\r\n], AwfSelect.prototype, \"htmlInputElement\", void 0);\r\n__decorate([\r\n    query('awf-input')\r\n], AwfSelect.prototype, \"awfInput\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfSelect.prototype, \"stateDropdownOpened\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfSelect.prototype, \"focusedOption\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfSelect.prototype, \"clearButtonVisible\", void 0);\r\nAwfSelect = __decorate([\r\n    localized(),\r\n    customElement('awf-select', true)\r\n], AwfSelect);\r\nexport { AwfSelect };\r\n//# sourceMappingURL=select.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agCalendar } from '@agilent/web-icons/core';\r\nimport { localized, msg, str } from '@lit/localize';\r\nimport { LitElement, html } from 'lit';\r\nimport { property, query, queryAssignedElements, state } from 'lit/decorators.js';\r\nimport { createRef, ref } from 'lit/directives/ref.js';\r\nimport '../../atoms/icon/icon.js';\r\nimport { INPUT_CSS_VARIABLES } from '../../atoms/input/input.css-variables.styles';\r\nimport '../../atoms/input/input.js';\r\nimport '../../atoms/overlay/overlay.js';\r\nimport '../../atoms/tooltip/tooltip.js';\r\nimport '../../common/clear-button/clear-button.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { FormValidationController } from '../../common/form-validation/form-validation.controller';\r\nimport { COMMON_STYLES, PLACEHOLDER_STYLE } from '../../common/style/common-styles';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller';\r\nimport { dateUtil } from '../../common/utils/date.util';\r\nimport { LabelPosition } from '../../common/utils/label-position.enum';\r\nimport { MessageLevel } from '../../common/utils/message-level.enum';\r\nimport { createCustomEvent } from '../../common/utils/util';\r\nimport '../../molecules/date-time-picker/date-time-picker.js';\r\nimport '../../molecules/select/select.js';\r\nimport { INPUT_DATE_TIME_STYLE } from './input-date-time.style';\r\nlet AwfInputDateTime = class AwfInputDateTime extends LitElement {\r\n    /**\r\n     * The value of the input as a Date object.\r\n     */\r\n    get value() {\r\n        return this.field ? dateUtil.parseDateTime(this.field.value) : null;\r\n    }\r\n    set value(value) {\r\n        if (this.field) {\r\n            this.field.value = dateUtil.formatDate(value, true);\r\n        }\r\n    }\r\n    get field() {\r\n        return this.slottedInputs[0];\r\n    }\r\n    get _clearButtonVisible() {\r\n        let visible = !this.required;\r\n        visible && (visible = !this.disabled);\r\n        visible && (visible = !!this.field?.value);\r\n        visible && (visible = this.hovered || this.focused);\r\n        return visible;\r\n    }\r\n    get valueAsDate() {\r\n        return this.field ? dateUtil.parseDateTime(this.field.value) : null;\r\n    }\r\n    constructor() {\r\n        super();\r\n        /*\r\n         * If true, the datepicker will be attached to the body element.\r\n         */\r\n        this.appendToBody = false;\r\n        /**\r\n         * The position of the label.\r\n         */\r\n        this.labelPosition = LabelPosition.Top;\r\n        this.hasForm = false;\r\n        this.hovered = false;\r\n        this.focused = false;\r\n        /**\r\n         * If true, the date and time inputs are disabled.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * If true, the date and time are required.\r\n         */\r\n        this.required = false;\r\n        this.dateTimePickerRef = createRef();\r\n        this.overlayRef = createRef();\r\n        this.formValidationController = new FormValidationController(this);\r\n        this.mutationObserver = new MutationObserver(this.onInputAttributeChange.bind(this));\r\n        this._onFocus = () => this.focused = true;\r\n        this._onBlur = () => this.focused = false;\r\n        this._onChange = this.onChange.bind(this);\r\n        new ElementStyleController(this, [PLACEHOLDER_STYLE]);\r\n    }\r\n    formAssociatedCallback(form) {\r\n        this.formValidationController.formAssociatedCallback(form);\r\n    }\r\n    validateValue() {\r\n        let pass = this.awfInput.validateValue();\r\n        if (pass && !!this.field.value && !dateUtil.validateDateTimeFormat(this.field.value)) {\r\n            this.setInternalMessage(MessageLevel.ERROR, msg('Invalid date time format (yyyy-mm-dd hh:mm AM|PM)'));\r\n            pass = false;\r\n        }\r\n        if (pass && !this.checkMinDate()) {\r\n            this.setInternalMessage(MessageLevel.ERROR, msg(str `The value must be higher than or equal to ${dateUtil.formatDate(this.min, true)}`));\r\n            pass = false;\r\n        }\r\n        if (pass && !this.checkMaxDate()) {\r\n            this.setInternalMessage(MessageLevel.ERROR, msg(str `The value must be less than or equal to ${dateUtil.formatDate(this.max, true)}`));\r\n            pass = false;\r\n        }\r\n        return pass;\r\n    }\r\n    setInternalMessage(level, message) {\r\n        this.awfInput.setInternalMessage(level, message);\r\n    }\r\n    clearInternalErrorMessage() {\r\n        this.awfInput.clearInternalErrorMessage();\r\n    }\r\n    /** @inheritdoc LitElement */\r\n    render() {\r\n        return html `\r\n            <awf-input\r\n                labelPosition=${this.labelPosition || LabelPosition.Top}\r\n                @mouseenter=${this.onInputMouseEnter}\r\n                @mouseleave=${this.onInputMouseLeave}\r\n                @focus=${this._onFocus}\r\n                @blur=${this._onBlur}\r\n                novalidate\r\n            >\r\n                <slot slot=\"label\" name=\"label\"></slot>\r\n                <slot></slot>\r\n                <span slot=\"suffix\">\r\n                    <awf-clear-button\r\n                        ?hidden=${this.required || this.disabled}\r\n                        ?visible=${this._clearButtonVisible}\r\n                        @click=${this.clearDate}>\r\n                    </awf-clear-button>\r\n                    <awf-button\r\n                        class=\"calendar-button\"\r\n                        ?disabled=${this.disabled}\r\n                        @click=${this.toggleDateTimepicker}\r\n                        @keydown=${this.onCalendarIconKeydown}\r\n                        @focus=${this._onFocus}\r\n                        @blur=${this._onBlur}\r\n                        aria-label=\"calendar\"\r\n                    >\r\n                        <awf-icon raw=${agCalendar}></awf-icon>\r\n                    </awf-button>\r\n                </span>\r\n                <slot name=\"error\" slot=\"error\"></slot>\r\n                <slot name=\"warning\" slot=\"warning\"></slot>\r\n            </awf-input>\r\n            <awf-overlay\r\n                manualToggle\r\n                offset=\"1\"\r\n                placement=\"bottom-start\"\r\n                ?appendToBody=${this.appendToBody}\r\n                @open=${this.onOpen}\r\n                @close=${this.onClose}\r\n                ${ref(this.overlayRef)}\r\n            >\r\n                <awf-date-time-picker\r\n                    .value=${this.value || new Date()}\r\n                    .min=${this.min}\r\n                    .max=${this.max}\r\n                    ${ref(this.dateTimePickerRef)}\r\n                    @valuechange=${this.onDateSelected}>\r\n                </awf-date-time-picker>\r\n            </awf-overlay>\r\n            `;\r\n    }\r\n    firstUpdated(_changedProperties) {\r\n        const [input] = this.slottedInputs;\r\n        if (!input) {\r\n            throw new Error('Input not found!');\r\n        }\r\n        input.type = 'text';\r\n        input.addEventListener('change', this._onChange);\r\n        input.addEventListener('focus', this._onFocus);\r\n        input.addEventListener('blur', this._onBlur);\r\n        this.onInputAttributeChange();\r\n        this.mutationObserver.disconnect();\r\n        this.mutationObserver.observe(this.field, { attributeFilter: ['disabled', 'placeholder', 'required'] });\r\n    }\r\n    /** @inheritdoc LitElement */\r\n    updated(_changedProperties) {\r\n        if (_changedProperties.has('value')) {\r\n            if (this.value) {\r\n                this.field.value = dateUtil.formatDate(this.value, true);\r\n                this.field.dispatchEvent(new Event('focusin', { bubbles: true }));\r\n            }\r\n            else {\r\n                this.field.value = '';\r\n            }\r\n        }\r\n    }\r\n    clearDate() {\r\n        this.field.value = '';\r\n        this.field.focus();\r\n    }\r\n    onInputMouseEnter() {\r\n        this.hovered = true;\r\n    }\r\n    onInputMouseLeave() {\r\n        this.hovered = false;\r\n    }\r\n    onCalendarIconKeydown(event) {\r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n        if (event.code === 'ArrowDown') {\r\n            event.target.click();\r\n        }\r\n    }\r\n    toggleDateTimepicker(event) {\r\n        if (!this.disabled && this.overlayRef.value) {\r\n            this.overlayRef.value.refElement = this.field;\r\n            this.overlayRef.value.toggle();\r\n        }\r\n        event.stopImmediatePropagation();\r\n    }\r\n    onOpen() {\r\n        setTimeout(() => {\r\n            this.dateTimePickerRef.value?.requestFocus();\r\n            this.calendarIcon.classList.remove('activated');\r\n            this.field.classList.add('slotted-input-hidden');\r\n        }, 100);\r\n    }\r\n    onClose() {\r\n        setTimeout(() => {\r\n            this.field.classList.remove('slotted-input-hidden');\r\n            this.calendarIcon.requestFocus();\r\n        }, 100);\r\n    }\r\n    onDateSelected(event) {\r\n        event.stopPropagation();\r\n        this.overlayRef.value?.hide();\r\n        this.formValidationController.markAsDirty();\r\n        this.field.value = dateUtil.formatDate(event.detail, true);\r\n        setTimeout(() => this.field.dispatchEvent(new Event('focusin', { bubbles: true })));\r\n    }\r\n    onChange(event) {\r\n        event.stopPropagation();\r\n        this.field.dispatchEvent(createCustomEvent(AwfEvent.VALUE_CHANGE, this.valueAsDate));\r\n    }\r\n    checkMaxDate() {\r\n        const date = this.valueAsDate;\r\n        return !this.max || !date || dateUtil.compareDates(date, this.max, true) <= 0;\r\n    }\r\n    checkMinDate() {\r\n        const date = this.valueAsDate;\r\n        return !this.min || !date || dateUtil.compareDates(date, this.min, true) >= 0;\r\n    }\r\n    onInputAttributeChange() {\r\n        this.disabled = this.field.disabled;\r\n        this.required = this.field.required;\r\n        if (!this.field.placeholder) {\r\n            this.field.placeholder = msg('yyyy-mm-dd hh:mm AM|PM');\r\n        }\r\n    }\r\n};\r\nAwfInputDateTime.styles = [COMMON_STYLES, INPUT_CSS_VARIABLES, INPUT_DATE_TIME_STYLE];\r\nAwfInputDateTime.formAssociated = true;\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputDateTime.prototype, \"appendToBody\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfInputDateTime.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfInputDateTime.prototype, \"max\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfInputDateTime.prototype, \"min\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'input', flatten: true })\r\n], AwfInputDateTime.prototype, \"slottedInputs\", void 0);\r\n__decorate([\r\n    query('awf-input')\r\n], AwfInputDateTime.prototype, \"awfInput\", void 0);\r\n__decorate([\r\n    query('awf-button')\r\n], AwfInputDateTime.prototype, \"calendarIcon\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputDateTime.prototype, \"hovered\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputDateTime.prototype, \"focused\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputDateTime.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputDateTime.prototype, \"required\", void 0);\r\nAwfInputDateTime = __decorate([\r\n    localized(),\r\n    customElement('awf-input-date-time', true)\r\n], AwfInputDateTime);\r\nexport { AwfInputDateTime };\r\n//# sourceMappingURL=input-date-time.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { localized, msg, str } from '@lit/localize';\r\nimport { LitElement, html } from 'lit';\r\nimport { property, query, queryAssignedElements } from 'lit/decorators.js';\r\nimport { INPUT_CSS_VARIABLES } from '../../atoms/input/input.css-variables.styles';\r\nimport '../../atoms/input/input.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { FormValidationController } from '../../common/form-validation/form-validation.controller';\r\nimport { COMMON_STYLES, NUMBER_SPINNER_STYLE, PLACEHOLDER_STYLE } from '../../common/style/common-styles';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller';\r\nimport { LabelPosition } from '../../common/utils/label-position.enum';\r\nimport { createCustomEvent } from '../../common/utils/util';\r\nimport { InputNumberService } from './input-number.service';\r\nimport { INPUT_NUMBER_STYLES } from './input-number.style';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/input-fields)\r\n */\r\nlet AwfInputNumber = class AwfInputNumber extends LitElement {\r\n    /** @ignore */\r\n    get field() {\r\n        const [input] = this.slottedInputs;\r\n        if (!input) {\r\n            console.warn('Input not found!');\r\n        }\r\n        return input;\r\n    }\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * The position of the label.\r\n         */\r\n        this.labelPosition = LabelPosition.Top;\r\n        /**\r\n         * When true, error messages are displayed below the input.\r\n         * If true, error messages are displayed in a tooltip and there is no margin below the component.\r\n         */\r\n        this.messageBelow = false;\r\n        /**\r\n         * If not specified, the value of a numeric field will be aligned on the right.\r\n         * When 'left', the value of a numeric field will be aligned on the left.\r\n         */\r\n        this.textAlign = 'right';\r\n        /**\r\n         * If true, this input will automatically be focused when loaded.\r\n         */\r\n        this.forceFocus = false;\r\n        /**\r\n         * If true, the input number will be displayed in scientific notation on blur when it has more than 6 digits.\r\n         */\r\n        this.scientificNotation = false;\r\n        /**\r\n         * <p>\r\n         * The maximum number of digits displayed after the decimal separator:\r\n         * </p>\r\n         * <ul>\r\n         * <li>negative value to deactivate</li>\r\n         * <li>0 for integers</li>\r\n         * </ul>\r\n         */\r\n        this.precision = -1;\r\n        /*\r\n         * When <code>true</code>, the input number will only accept integers (whole number).\r\n         */\r\n        this.wholeNumber = false;\r\n        /**\r\n         * The maximum number of digits allowed in the integer part (before the decimal separator).\r\n         */\r\n        this.maxIntegerDigitCount = 0;\r\n        /**\r\n         * The maximum number of digits allowed in the fractional part (after the decimal separator).\r\n         */\r\n        this.maxFractionalDigitCount = 0;\r\n        /** @ignore */\r\n        this.hasForm = false;\r\n        this._onInput = this.onInput.bind(this);\r\n        this._onKeydown = this.onKeydown.bind(this);\r\n        this._onFocus = this.onFocus.bind(this);\r\n        this._onBlur = this.onBlur.bind(this);\r\n        this._onChange = this.onChange.bind(this);\r\n        /**\r\n         * The actual value history.\r\n         */\r\n        this.actualValue = {\r\n            current: '',\r\n            last: '',\r\n        };\r\n        this.manuallyEntered = false;\r\n        this.inputNumberService = new InputNumberService();\r\n        this.lastInputValue = '';\r\n        this.formValidationController = new FormValidationController(this);\r\n        new ElementStyleController(this, [PLACEHOLDER_STYLE, NUMBER_SPINNER_STYLE]);\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        if (this.field) {\r\n            this.field.removeEventListener('focus', this._onFocus);\r\n            this.field.removeEventListener('blur', this._onBlur);\r\n            this.field.removeEventListener('input', this._onInput);\r\n            this.field.removeEventListener('keydown', this._onKeydown);\r\n        }\r\n    }\r\n    /** @inheritdoc */\r\n    render() {\r\n        return html `\r\n            <awf-input labelPosition=${this.labelPosition} ?forceFocus=${this.forceFocus} ?messageBelow=${this.messageBelow} novalidate>\r\n                <slot name=\"prefix\" slot=\"prefix\"></slot>\r\n                <slot name=\"label\" slot=\"label\"></slot>\r\n                <slot @slotchange=${this.onSlotChange}></slot>\r\n                <slot name=\"suffix\" slot=\"suffix\"></slot>\r\n                <slot name=\"error\" slot=\"error\"></slot>\r\n                <slot name=\"warning\" slot=\"warning\"></slot>\r\n            </awf-input>\r\n        `;\r\n    }\r\n    formAssociatedCallback(form) {\r\n        this.formValidationController.formAssociatedCallback(form);\r\n    }\r\n    validateValue() {\r\n        let pass = this.awfInput.validateValue();\r\n        if (pass) {\r\n            pass = this.validateNumber();\r\n        }\r\n        return pass;\r\n    }\r\n    setInternalMessage(level, message) {\r\n        this.awfInput.setInternalMessage(level, message);\r\n    }\r\n    clearInternalErrorMessage() {\r\n        this.awfInput.clearInternalErrorMessage();\r\n    }\r\n    firstUpdated() {\r\n        this.checkDigitCounts();\r\n        this.actualValue.current = this.field.value;\r\n        this.field.value = this.computeDisplayedValue();\r\n    }\r\n    updated(_changedProperties) {\r\n        if (_changedProperties.has('precision')) {\r\n            this.field.value = this.computeDisplayedValue();\r\n        }\r\n    }\r\n    onChange() {\r\n        if (!this.manuallyEntered) {\r\n            this.actualValue.current = this.field.value;\r\n            if (this.validateValue()) {\r\n                this.clearInternalErrorMessage();\r\n            }\r\n        }\r\n        this.checkDigitCounts();\r\n        if (this.actualValue.current !== this.actualValue.last) {\r\n            this.actualValue.last = this.actualValue.current;\r\n            this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_CHANGE, this.actualValue.current));\r\n            if (!this.validateNumber()) {\r\n                if (this.isNotAnIntegerInScientificNotation()) {\r\n                    this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_NOT_AN_INTEGER, this.actualValue.current));\r\n                }\r\n                if (this.field.validity.rangeOverflow) {\r\n                    this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_OUT_OF_BOUNDS_MAX, { max: this.field.max, value: this.actualValue.current }));\r\n                }\r\n                if (this.field.validity.rangeUnderflow) {\r\n                    this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_OUT_OF_BOUNDS_MIN, { min: this.field.min, value: this.actualValue.current }));\r\n                }\r\n            }\r\n            if (this.field.value.startsWith('.')) {\r\n                this.field.value = '0' + this.field.value;\r\n            }\r\n        }\r\n        this.manuallyEntered = false;\r\n    }\r\n    onKeydown(event) {\r\n        this.lastInputValue = this.field.value;\r\n        if (this.shouldRejectCharacter(event.key)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    onInput() {\r\n        this.checkDigitCounts();\r\n        this.actualValue.current = this.awfInput.value;\r\n        this.lastInputValue = '';\r\n        if (!this.hasForm) {\r\n            this.validateNumber();\r\n        }\r\n    }\r\n    onFocus() {\r\n        if (this.field.value !== this.actualValue.current) {\r\n            this.field.value = this.actualValue.current;\r\n        }\r\n    }\r\n    onBlur() {\r\n        this.manuallyEntered = true;\r\n        this.actualValue.current = this.field.value;\r\n        this.field.value = this.computeDisplayedValue();\r\n    }\r\n    checkDigitCounts() {\r\n        if (this.maxIntegerDigitCount > 0) {\r\n            const integerPartLength = this.inputNumberService.computeIntegerPartLength(Number(this.field.value));\r\n            if (integerPartLength > this.maxIntegerDigitCount) {\r\n                this.field.value = this.lastInputValue;\r\n            }\r\n        }\r\n        if (this.maxFractionalDigitCount > 0) {\r\n            const fractionalPartLength = this.inputNumberService.computeFractionalPartLength(Number(this.field.value));\r\n            if (fractionalPartLength > this.maxFractionalDigitCount) {\r\n                this.field.value = this.lastInputValue;\r\n            }\r\n        }\r\n    }\r\n    computeDisplayedValue() {\r\n        if (this.actualValue.current === '') {\r\n            return '';\r\n        }\r\n        if (this.scientificNotation && this.shouldBeConverted(this.actualValue.current)) {\r\n            const fractionDigits = this.precision < 0 ? undefined : this.precision;\r\n            return Number(this.actualValue.current).toExponential(fractionDigits).replace('e', 'E');\r\n        }\r\n        if (!this.precision || this.precision < 0 || this.wholeNumber) {\r\n            return this.actualValue.current;\r\n        }\r\n        return Number(this.actualValue.current).toFixed(this.precision);\r\n    }\r\n    shouldBeConverted(value) {\r\n        if (value.toLocaleLowerCase().indexOf('e') > -1) {\r\n            return true;\r\n        }\r\n        const digits = value.match(/\\d/g);\r\n        return (digits?.length || 0) > 6;\r\n    }\r\n    shouldRejectCharacter(character) {\r\n        if (!this.scientificNotation) {\r\n            const forbidden = ['e', 'E'];\r\n            if (this.wholeNumber) {\r\n                forbidden.push('.', ',');\r\n            }\r\n            return forbidden.indexOf(character) > -1;\r\n        }\r\n        return false;\r\n    }\r\n    onSlotChange() {\r\n        if (this.field) {\r\n            this.field.type = 'number';\r\n            this.field.addEventListener('change', this._onChange);\r\n            this.field.addEventListener('focus', this._onFocus);\r\n            this.field.addEventListener('blur', this._onBlur);\r\n            this.field.addEventListener('input', this._onInput);\r\n            this.field.addEventListener('keydown', this._onKeydown);\r\n        }\r\n    }\r\n    validateNumber() {\r\n        let error = null;\r\n        if (this.isNotAnIntegerInScientificNotation()) {\r\n            error = msg('This input is not a whole number.');\r\n        }\r\n        else if (this.field.validity.rangeOverflow) {\r\n            error = msg(str `The value must be less than or equal to ${this.field.max}.`);\r\n        }\r\n        else if (this.field.validity.rangeUnderflow) {\r\n            error = msg(str `The value must be higher than or equal to ${this.field.min}.`);\r\n        }\r\n        if (error !== null) {\r\n            this.setInternalMessage('error', error);\r\n        }\r\n        return error === null;\r\n    }\r\n    isNotAnIntegerInScientificNotation() {\r\n        return this.scientificNotation && this.wholeNumber && !Number.isInteger(Number(this.actualValue.current));\r\n    }\r\n};\r\nAwfInputNumber.styles = [COMMON_STYLES, INPUT_CSS_VARIABLES, INPUT_NUMBER_STYLES];\r\n/**\r\n * @ignore\r\n */\r\nAwfInputNumber.formAssociated = true;\r\n__decorate([\r\n    property({ type: String, reflect: true })\r\n], AwfInputNumber.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputNumber.prototype, \"messageBelow\", void 0);\r\n__decorate([\r\n    property({ type: String, reflect: true })\r\n], AwfInputNumber.prototype, \"textAlign\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputNumber.prototype, \"forceFocus\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputNumber.prototype, \"scientificNotation\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfInputNumber.prototype, \"precision\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputNumber.prototype, \"wholeNumber\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'input', flatten: true })\r\n], AwfInputNumber.prototype, \"slottedInputs\", void 0);\r\n__decorate([\r\n    property({ type: Number, reflect: true })\r\n], AwfInputNumber.prototype, \"maxIntegerDigitCount\", void 0);\r\n__decorate([\r\n    property({ type: Number, reflect: true })\r\n], AwfInputNumber.prototype, \"maxFractionalDigitCount\", void 0);\r\n__decorate([\r\n    query('awf-input')\r\n], AwfInputNumber.prototype, \"awfInput\", void 0);\r\nAwfInputNumber = __decorate([\r\n    localized(),\r\n    customElement('awf-input-number', true)\r\n], AwfInputNumber);\r\nexport { AwfInputNumber };\r\n//# sourceMappingURL=input-number.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agAddPlus, agRemoveSubtractMinus } from '@agilent/web-icons/core';\r\nimport { LitElement, html } from 'lit';\r\nimport { property, query, queryAssignedElements, state } from 'lit/decorators.js';\r\nimport '../../atoms/button/button.js';\r\nimport '../../atoms/icon/icon.js';\r\nimport { INPUT_CSS_VARIABLES } from '../../atoms/input/input.css-variables.styles';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { FormValidationController } from '../../common/form-validation/form-validation.controller';\r\nimport { COMMON_STYLES, NUMBER_SPINNER_STYLE, PLACEHOLDER_STYLE } from '../../common/style/common-styles';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller';\r\nimport { LabelPosition } from '../../common/utils/label-position.enum';\r\nimport '../input-number/input-number.js';\r\nimport { INPUT_NUMBER_STYLES } from '../input-number/input-number.style';\r\nimport { INPUT_INCREMENT_STYLES } from './input-increment.style';\r\nconst MAXIMUM_DIGITS = 12;\r\nlet AwfInputIncrement = class AwfInputIncrement extends LitElement {\r\n    /**\r\n     * @ignore\r\n     */\r\n    get field() {\r\n        const [input] = this.slottedInputs;\r\n        if (!input) {\r\n            console.warn('Input not found!');\r\n        }\r\n        return input;\r\n    }\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * If true, this input will automatically be focused when loaded.\r\n         */\r\n        this.forceFocus = false;\r\n        /**\r\n         * The position of the label.\r\n         */\r\n        this.labelPosition = LabelPosition.Top;\r\n        /**\r\n         * When true, error messages are displayed below the input.\r\n         * If true, error messages are displayed in a tooltip and there is no margin below the component.\r\n         */\r\n        this.messageBelow = false;\r\n        /**\r\n         * <p>\r\n         * The maximum number of digits displayed after the decimal separator:\r\n         * </p>\r\n         * <ul>\r\n         * <li>negative value to deactivate</li>\r\n         * <li>0 for integers</li>\r\n         * </ul>\r\n         */\r\n        this.precision = -1;\r\n        /**\r\n         * If true, the input number will be displayed in scientific notation on blur when it has more than 6 digits.\r\n         */\r\n        this.scientificNotation = false;\r\n        /**\r\n         * @ignore\r\n         */\r\n        this.hasForm = false;\r\n        this.plusBtnDisabled = false;\r\n        this.minusBtnDisabled = false;\r\n        this._onChange = this.onChange.bind(this);\r\n        this.formValidationController = new FormValidationController(this);\r\n        new ElementStyleController(this, [PLACEHOLDER_STYLE, NUMBER_SPINNER_STYLE]);\r\n    }\r\n    disconnectedCallback() {\r\n        this.field.removeEventListener('change', this._onChange);\r\n    }\r\n    formAssociatedCallback(form) {\r\n        this.formValidationController.formAssociatedCallback(form);\r\n    }\r\n    validateValue() {\r\n        return this.awfInputNumber.validateValue();\r\n    }\r\n    setInternalMessage(level, message) {\r\n        this.awfInputNumber.setInternalMessage(level, message);\r\n    }\r\n    clearInternalErrorMessage() {\r\n        this.awfInputNumber.clearInternalErrorMessage();\r\n    }\r\n    render() {\r\n        return html `\r\n            <awf-input-number\r\n                ?forceFocus=${this.forceFocus}\r\n                labelPosition=${this.labelPosition}\r\n                ?messageBelow=${this.messageBelow}\r\n                precision=${this.precision}\r\n                ?scientificNotation=${this.scientificNotation}\r\n                novalidate\r\n            >\r\n                <awf-button slot=\"prefix\" @click=${this.decrement} class=\"decrement-button\" ?disabled=${this.minusBtnDisabled}>\r\n                    <awf-icon raw=${agRemoveSubtractMinus}></awf-icon>\r\n                </awf-button>\r\n                <slot name=\"label\" slot=\"label\"></slot>\r\n                <slot @slotchange=${this.onSlotChange}></slot>\r\n\r\n                <awf-button slot=\"suffix\" @click=${this.increment} class=\"increment-button\" ?disabled=${this.plusBtnDisabled}>\r\n                    <awf-icon raw=${agAddPlus}></awf-icon>\r\n                </awf-button>\r\n                <slot name=\"error\" slot=\"error\"></slot>\r\n                <slot name=\"warning\" slot=\"warning\"></slot>\r\n            </awf-input-number>\r\n        `;\r\n    }\r\n    onSlotChange() {\r\n        this.field.type = 'number';\r\n        this.field.addEventListener('change', this._onChange);\r\n        this.updateDisabledState();\r\n        this.observeInputDisabledChanges();\r\n    }\r\n    observeInputDisabledChanges() {\r\n        this.inputMutationObserver?.disconnect();\r\n        this.inputMutationObserver = new MutationObserver(this.updateDisabledState.bind(this));\r\n        this.inputMutationObserver.observe(this.field, { attributeFilter: ['disabled'] });\r\n    }\r\n    updateDisabledState() {\r\n        if (this.field.disabled) {\r\n            this.setAttribute('disabled', '');\r\n        }\r\n        else {\r\n            this.removeAttribute('disabled');\r\n        }\r\n        this.updatePlusMinusButtonStates();\r\n        this.field.dispatchEvent(new FocusEvent('focusout'));\r\n    }\r\n    increment() {\r\n        const step = this.field.step ? Number(this.field.step) : 1;\r\n        this.changeValue(step, step);\r\n        this.updatePlusMinusButtonStates();\r\n        this.notifyChange();\r\n    }\r\n    decrement() {\r\n        const step = this.field.step ? -Number(this.field.step) : -1;\r\n        this.changeValue(step, 0);\r\n        this.notifyChange();\r\n    }\r\n    changeValue(step, defaultValue) {\r\n        if (this.field.value) {\r\n            this.field.value = `${Number((Number(this.field.value) + step).toFixed(MAXIMUM_DIGITS))}`;\r\n        }\r\n        else {\r\n            this.field.value = `${defaultValue}`;\r\n        }\r\n    }\r\n    notifyChange() {\r\n        this.field.dispatchEvent(new InputEvent('input', { bubbles: true, composed: true, data: this.field.value }));\r\n        this.field.dispatchEvent(new FocusEvent('focusout', { bubbles: true, composed: true }));\r\n        this.field.dispatchEvent(new Event('change', { bubbles: true, composed: true }));\r\n    }\r\n    updatePlusMinusButtonStates() {\r\n        const inputValue = Number(this.field.value);\r\n        const step = this.field.step ? Number(this.field.step) : 1;\r\n        this.plusBtnDisabled = this.field.disabled || (!!this.field.max && inputValue + step > Number(this.field.max));\r\n        this.minusBtnDisabled = this.field.disabled || (!!this.field.min && inputValue - step < Number(this.field.min));\r\n    }\r\n    onChange() {\r\n        this.updatePlusMinusButtonStates();\r\n    }\r\n};\r\nAwfInputIncrement.styles = [COMMON_STYLES, INPUT_CSS_VARIABLES, INPUT_NUMBER_STYLES, INPUT_INCREMENT_STYLES];\r\n/**\r\n * @ignore\r\n */\r\nAwfInputIncrement.formAssociated = true;\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputIncrement.prototype, \"forceFocus\", void 0);\r\n__decorate([\r\n    property({ type: String })\r\n], AwfInputIncrement.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputIncrement.prototype, \"messageBelow\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfInputIncrement.prototype, \"precision\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputIncrement.prototype, \"scientificNotation\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputIncrement.prototype, \"plusBtnDisabled\", void 0);\r\n__decorate([\r\n    state()\r\n], AwfInputIncrement.prototype, \"minusBtnDisabled\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'input' })\r\n], AwfInputIncrement.prototype, \"slottedInputs\", void 0);\r\n__decorate([\r\n    query('awf-input-number')\r\n], AwfInputIncrement.prototype, \"awfInputNumber\", void 0);\r\nAwfInputIncrement = __decorate([\r\n    customElement('awf-input-increment', true)\r\n], AwfInputIncrement);\r\nexport { AwfInputIncrement };\r\n//# sourceMappingURL=input-increment.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { localized } from '@lit/localize';\r\nimport { css, html, LitElement } from 'lit';\r\nimport { property, query, queryAssignedElements } from 'lit/decorators.js';\r\nimport '../../atoms/input/input.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { FormValidationController } from '../../common/form-validation/form-validation.controller';\r\nimport { COMMON_STYLES, PLACEHOLDER_STYLE } from '../../common/style/common-styles';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller';\r\nimport { LabelPosition } from '../../common/utils/label-position.enum';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/input-fields)\r\n */\r\nlet AwfInputPassword = class AwfInputPassword extends LitElement {\r\n    /**\r\n     * @ignore\r\n     */\r\n    get field() {\r\n        const [input] = this.slottedInputs;\r\n        if (!input) {\r\n            console.warn('Input not found!');\r\n        }\r\n        return input;\r\n    }\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * The position of the label.\r\n         */\r\n        this.labelPosition = LabelPosition.Top;\r\n        /**\r\n         * When true, error messages are displayed below the input.\r\n         * If true, error messages are displayed in a tooltip and there is no margin below the component.\r\n         */\r\n        this.messageBelow = false;\r\n        /**\r\n         * If true, this input will automatically be focused when loaded.\r\n         */\r\n        this.forceFocus = false;\r\n        /**\r\n         * @ignore\r\n         */\r\n        this.hasForm = false;\r\n        this.formValidationController = new FormValidationController(this);\r\n        new ElementStyleController(this, [PLACEHOLDER_STYLE]);\r\n    }\r\n    /** @inheritdoc */\r\n    render() {\r\n        return html `\r\n            <awf-input labelPosition=${this.labelPosition} ?forceFocus=${this.forceFocus} ?messageBelow=${this.messageBelow} novalidate>\r\n                <slot name=\"prefix\" slot=\"prefix\"></slot>\r\n                <slot name=\"label\" slot=\"label\"></slot>\r\n                <slot @slotchange=${this.onSlotChange}></slot>\r\n                <slot name=\"suffix\" slot=\"suffix\"></slot>\r\n                <slot name=\"error\" slot=\"error\"></slot>\r\n                <slot name=\"warning\" slot=\"warning\"></slot>\r\n            </awf-input>\r\n        `;\r\n    }\r\n    formAssociatedCallback(form) {\r\n        this.formValidationController.formAssociatedCallback(form);\r\n    }\r\n    validateValue() {\r\n        return this.awfInput.validateValue();\r\n    }\r\n    setInternalMessage(level, message) {\r\n        this.awfInput.setInternalMessage(level, message);\r\n    }\r\n    clearInternalErrorMessage() {\r\n        this.awfInput.clearInternalErrorMessage();\r\n    }\r\n    onSlotChange() {\r\n        if (this.field) {\r\n            this.field.type = 'password';\r\n        }\r\n    }\r\n};\r\nAwfInputPassword.styles = [COMMON_STYLES, css `\r\n        :host {\r\n            display: inline-flex;\r\n        }\r\n    `];\r\n/**\r\n * @ignore\r\n */\r\nAwfInputPassword.formAssociated = true;\r\n__decorate([\r\n    property({ type: String })\r\n], AwfInputPassword.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputPassword.prototype, \"messageBelow\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputPassword.prototype, \"forceFocus\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'input' })\r\n], AwfInputPassword.prototype, \"slottedInputs\", void 0);\r\n__decorate([\r\n    query('awf-input')\r\n], AwfInputPassword.prototype, \"awfInput\", void 0);\r\nAwfInputPassword = __decorate([\r\n    localized(),\r\n    customElement('awf-input-password', true)\r\n], AwfInputPassword);\r\nexport { AwfInputPassword };\r\n//# sourceMappingURL=input-password.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport IMask from 'imask';\r\nimport { css, html, LitElement } from 'lit';\r\nimport { property, query, queryAssignedElements } from 'lit/decorators.js';\r\nimport '../../atoms/input/input.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { FormValidationController } from '../../common/form-validation/form-validation.controller';\r\nimport { COMMON_STYLES, PLACEHOLDER_STYLE } from '../../common/style/common-styles';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller';\r\nimport { LabelPosition } from '../../common/utils/label-position.enum';\r\nimport { createCustomEvent } from '../../common/utils/util';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/input-fields)\r\n */\r\nlet AwfInputText = class AwfInputText extends LitElement {\r\n    /**\r\n     * @ignore\r\n     */\r\n    get field() {\r\n        const [input] = this.slottedInputs;\r\n        if (!input) {\r\n            console.warn('Input not found!');\r\n        }\r\n        return input;\r\n    }\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * The position of the label.\r\n         */\r\n        this.labelPosition = LabelPosition.Top;\r\n        /**\r\n         * When true, error messages are displayed below the input.\r\n         * If true, error messages are displayed in a tooltip and there is no margin below the component.\r\n         */\r\n        this.messageBelow = false;\r\n        /**\r\n         * If true, this input will automatically be focused when loaded.\r\n         */\r\n        this.forceFocus = false;\r\n        /**\r\n         * @ignore\r\n         */\r\n        this.hasForm = false;\r\n        this._onChange = this.onChange.bind(this);\r\n        this.formValidationController = new FormValidationController(this);\r\n        new ElementStyleController(this, [PLACEHOLDER_STYLE]);\r\n    }\r\n    formAssociatedCallback(form) {\r\n        this.formValidationController.formAssociatedCallback(form);\r\n    }\r\n    validateValue() {\r\n        return this.awfInput.validateValue();\r\n    }\r\n    setInternalMessage(level, message) {\r\n        this.awfInput.setInternalMessage(level, message);\r\n    }\r\n    clearInternalErrorMessage() {\r\n        this.awfInput.clearInternalErrorMessage();\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.inputMask?.destroy();\r\n        if (this.field) {\r\n            this.field.removeEventListener('change', this._onChange);\r\n        }\r\n    }\r\n    /** @inheritdoc */\r\n    render() {\r\n        return html `\r\n            <awf-input labelPosition=${this.labelPosition} ?messageBelow=${this.messageBelow} ?forceFocus=${this.forceFocus} novalidate>\r\n                <slot name=\"prefix\" slot=\"prefix\"></slot>\r\n                <slot name=\"label\" slot=\"label\"></slot>\r\n                <slot @slotchange=${this.onSlotChange}></slot>\r\n                <slot name=\"suffix\" slot=\"suffix\"></slot>\r\n                <slot name=\"warning\" slot=\"warning\"></slot>\r\n                <slot name=\"error\" slot=\"error\"></slot>\r\n            </awf-input>\r\n        `;\r\n    }\r\n    firstUpdated(_changedProperties) {\r\n        this.field.addEventListener('change', this._onChange);\r\n    }\r\n    updated(_changedProperties) {\r\n        if (_changedProperties.has('mask')) {\r\n            this.inputMask?.destroy();\r\n            if (this.mask) {\r\n                this.inputMask = IMask(this.field, {\r\n                    mask: this.mask,\r\n                    lazy: false,\r\n                });\r\n            }\r\n            else {\r\n                this.inputMask = undefined;\r\n            }\r\n        }\r\n    }\r\n    onSlotChange() {\r\n        if (this.field) {\r\n            this.field.type = 'text';\r\n            this.field.autocapitalize = 'none';\r\n        }\r\n    }\r\n    /**\r\n     * Method to be called by the actual HTML <code>input</code> element as callback to the <code>@change</code> event.\r\n     */\r\n    onChange() {\r\n        this.dispatchEvent(createCustomEvent(AwfEvent.VALUE_CHANGE, this.field.value));\r\n    }\r\n};\r\nAwfInputText.styles = [COMMON_STYLES, css `\r\n        :host {\r\n            display: inline-flex;\r\n        }\r\n    `];\r\nAwfInputText.formAssociated = true;\r\n__decorate([\r\n    property()\r\n], AwfInputText.prototype, \"labelPosition\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputText.prototype, \"messageBelow\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfInputText.prototype, \"forceFocus\", void 0);\r\n__decorate([\r\n    property({ type: String })\r\n], AwfInputText.prototype, \"mask\", void 0);\r\n__decorate([\r\n    query('awf-input')\r\n], AwfInputText.prototype, \"awfInput\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'input', flatten: true })\r\n], AwfInputText.prototype, \"slottedInputs\", void 0);\r\nAwfInputText = __decorate([\r\n    customElement('awf-input-text', true)\r\n], AwfInputText);\r\nexport { AwfInputText };\r\n//# sourceMappingURL=input-text.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2024.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agDeleteTrash, agErrorOctagon, agHelpCircle, agInfoCircle, agSampleStatusIndicatorSuccess, agWarningTriangle } from '@agilent/web-icons/core';\r\nimport { LitElement, html } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { BUTTON_CSS_VARIABLES } from '../../atoms/button/button.css-variables.styles.js';\r\nimport '../../atoms/button/button.js';\r\nimport '../../atoms/icon/icon.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element.js';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles.js';\r\nimport { MODAL_DIALOG_CSS_VARIABLES } from '../modal/modal-dialog.css-variables.styles.js';\r\nimport { handleActionButtonClick, slotChange } from '../modal/modal-utils.js';\r\nimport { MESSAGE_BOX_STYLES } from './message-box.styles.js';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/status-communication/message-boxes-dialog)\r\n*/\r\nexport var AwfMessageBoxType;\r\n(function (AwfMessageBoxType) {\r\n    AwfMessageBoxType[\"INFORMATION\"] = \"information\";\r\n    AwfMessageBoxType[\"CONFIRMATION\"] = \"confirmation\";\r\n    AwfMessageBoxType[\"SUCCESS\"] = \"success\";\r\n    AwfMessageBoxType[\"DELETE\"] = \"delete\";\r\n    AwfMessageBoxType[\"WARNING\"] = \"warning\";\r\n    AwfMessageBoxType[\"ERROR\"] = \"error\";\r\n})(AwfMessageBoxType || (AwfMessageBoxType = {}));\r\nexport const VARIANT_ICON_MAPPING = new Map([\r\n    [AwfMessageBoxType.INFORMATION, agInfoCircle],\r\n    [AwfMessageBoxType.CONFIRMATION, agHelpCircle],\r\n    [AwfMessageBoxType.SUCCESS, agSampleStatusIndicatorSuccess],\r\n    [AwfMessageBoxType.DELETE, agDeleteTrash],\r\n    [AwfMessageBoxType.WARNING, agWarningTriangle],\r\n    [AwfMessageBoxType.ERROR, agErrorOctagon]\r\n]);\r\nlet AwfMessageBox = class AwfMessageBox extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The title to be displayed in the message box.\r\n        */\r\n        this.header = '';\r\n        /**\r\n         * The type of message box that will be displayed: <code>information</code>, <code>confirmation</code>, <code>success</code>, <code>delete</code>, <code>warning</code>, <code>error</code>,\r\n         */\r\n        this.type = AwfMessageBoxType.INFORMATION;\r\n    }\r\n    render() {\r\n        return html `\r\n            <div class=\"modal-content message-box\">\r\n                <div class=\"message-container\">\r\n                    <div class=\"header-icon\">\r\n                        <awf-icon raw=${this.getIcon()}></awf-icon>\r\n                    </div>\r\n                    <div class=\"header-title awf-semibold\">${this.header}</div>\r\n                    <div class=\"content\"><slot @slotchange=${slotChange}></slot></div>\r\n                </div>\r\n                <div class=\"actions\"><slot name=\"actions\" @click=${handleActionButtonClick}></slot></div>\r\n            </div>\r\n        `;\r\n    }\r\n    getIcon() {\r\n        return VARIANT_ICON_MAPPING.get(this.type) ?? '';\r\n    }\r\n};\r\nAwfMessageBox.styles = [COMMON_STYLES, BUTTON_CSS_VARIABLES, MODAL_DIALOG_CSS_VARIABLES, MESSAGE_BOX_STYLES];\r\n__decorate([\r\n    property()\r\n], AwfMessageBox.prototype, \"header\", void 0);\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfMessageBox.prototype, \"type\", void 0);\r\nAwfMessageBox = __decorate([\r\n    customElement('awf-message-box', true)\r\n], AwfMessageBox);\r\nexport { AwfMessageBox };\r\n//# sourceMappingURL=message-box.js.map","/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const META_MENU_STYLES = css `\r\n    :host {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        display: block;\r\n        height: 100vh;\r\n        width: 25vw;\r\n        min-width: 338px;\r\n        box-sizing: border-box;\r\n        visibility: hidden;\r\n    }\r\n\r\n    :host([opened]) {\r\n        visibility: visible;\r\n    }\r\n\r\n    awf-sidepanel {\r\n        --awf-sidepanel-font-color: var(--at-white);\r\n        --awf-sidepanel-icon-color: var(--at-white);\r\n        --awf-sidepanel-header-background-color: var(--at-blue-shade);\r\n        --awf-sidepanel-header-border-bottom-color: transparent;\r\n        --awf-sidepanel-button-background: var(--at-blue-shade);\r\n        --awf-sidepanel-button-font-color: var(--at-white);\r\n        --awf-sidepanel-button-hover-background: var(--at-blue-dark-tint);\r\n        --awf-sidepanel-button-hover-font-color: var(--at-white);\r\n        --awf-sidepanel-button-active-background: var(--at-blue-dark);\r\n        --awf-sidepanel-button-active-font-color: var(--at-white);\r\n        background-color: var(--at-blue-shade);\r\n        border: none;\r\n        width: inherit;\r\n        min-width: inherit;\r\n    }\r\n\r\n    .header {\r\n        display: flex;\r\n        align-items: center;\r\n        width: 100%;\r\n        min-height: 100%;\r\n        height: 100%;\r\n        flex: 0 1 100%;\r\n    }\r\n\r\n    .header .product-name {\r\n        height: 100%;\r\n        font-size: 18px;\r\n        line-height: 24px;\r\n        gap: 8px;\r\n    }\r\n\r\n    .header .product-name > :not(:first-child) {\r\n        padding-left: 8px;\r\n    }\r\n\r\n    .header .menu-icon {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        min-height: 40px;\r\n        height: 40px;\r\n        min-width: 40px;\r\n        width: 40px;\r\n        padding: 4px;\r\n    }\r\n\r\n    .header .menu-icon awf-icon {\r\n        --awf-icon-size: 24px;\r\n        --awf-icon-color: var(--at-white);\r\n    }\r\n\r\n    .product-name {\r\n        display: flex;\r\n        align-items: center;\r\n        overflow-x: hidden;\r\n        min-width: inherit;\r\n        max-width: inherit;\r\n        width: inherit;\r\n        gap: 4px;\r\n    }\r\n\r\n    .product-name > * {\r\n        display: block;\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    .product-name > :first-child {\r\n        font-weight: 600;\r\n    }\r\n\r\n    .product-name > :not(:first-child) {\r\n        border-left: 1px solid var(--at-white);\r\n        padding-left: 4px;\r\n    }\r\n\r\n    .product-name > :last-child {\r\n        overflow: hidden;\r\n    }\r\n\r\n    div[slot='content'] {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    div[slot='content'] slot[name='menu-content'] {\r\n        display: flex;\r\n        flex-direction: column;\r\n        padding: var(--awf-meta-menu-content-padding-inner);\r\n    }\r\n\r\n    ::slotted([slot='menu-content']:not(:first-child))::before {\r\n        content: '';\r\n        position: relative;\r\n        display: block;\r\n        border: 1px solid var(--at-gray-soft);\r\n        opacity: 40%;\r\n        margin: 10px 0;\r\n        pointer-events: none;\r\n    }\r\n\r\n    .footer {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: fit-content;\r\n        width: 100%;\r\n        padding: 12px 24px;\r\n        font-size: 10px;\r\n        line-height: 14px;\r\n        border-top: 1px solid #e1e3e566;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .footer:first-child {\r\n        padding-bottom: 4px;\r\n    }\r\n\r\n    .background {\r\n        position: fixed;\r\n        left: 0;\r\n        right: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background-color: var(--awf-meta-menu-screen-blurring-color-inner);\r\n        visibility: hidden;\r\n    }\r\n\r\n    awf-sidepanel[opened] ~ .background {\r\n        visibility: visible;\r\n    }\r\n`;\r\n//# sourceMappingURL=meta-menu.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agMetaMenuDot } from '@agilent/web-icons/core';\r\nimport { LitElement, html } from 'lit';\r\nimport { property, query } from 'lit/decorators.js';\r\nimport { PanelAlignment } from '../../atoms/sidepanel/sidepanel';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { META_MENU_CSS_VARIABLES } from './meta-menu.css-variables.styles';\r\nimport { META_MENU_STYLES } from './meta-menu.styles';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/structure/meta-navigation)\r\n */\r\nlet AwfMetaMenu = class AwfMetaMenu extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * A boolean property that indicates whether the meta-menu is opened or closed.\r\n         */\r\n        this.opened = false;\r\n        /**\r\n         * The name of the product in the meta-menu.\r\n         */\r\n        this.productName = '';\r\n        /**\r\n         * The version of the product in the meta-menu.\r\n         */\r\n        this.version = '';\r\n        /**\r\n         * The copyright-year of the product in the meta-menu.\r\n         */\r\n        this.copyrightYear = '';\r\n        this._handleOpen = this.handleOpen.bind(this);\r\n        this._handleClose = this.handleClose.bind(this);\r\n    }\r\n    /** @inheritdoc */\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.addEventListener(AwfEvent.OPEN, this._handleOpen);\r\n        this.addEventListener(AwfEvent.CLOSE, this._handleClose);\r\n    }\r\n    /** @inheritdoc */\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.removeEventListener(AwfEvent.OPEN, this._handleOpen);\r\n        this.removeEventListener(AwfEvent.CLOSE, this._handleClose);\r\n    }\r\n    render() {\r\n        return html `\r\n            <awf-sidepanel alignment=${PanelAlignment.LEFT}>\r\n                <div slot=\"title\" class=\"header\">\r\n                    <div class=\"menu-icon\">\r\n                        <awf-icon raw=${agMetaMenuDot}></awf-icon>\r\n                    </div>\r\n                    <div class=\"product-name\">${this.getHeaderTitle()}</div>\r\n                </div>\r\n                <div slot=\"content\">\r\n                    <slot name=\"menu-content\"></slot>\r\n                    <div class=\"footer\">\r\n                        <div class=\"product-name\">${this.getFooterTitle()}</div>\r\n                        <div>Version: ${this.version}</div>\r\n                        <div>© Agilent Technologies, Inc. ${this.copyrightYear} | www.agilent.com</div>\r\n                    </div>\r\n                </div>\r\n            </awf-sidepanel>\r\n            <div class=\"background\"></div>\r\n        `;\r\n    }\r\n    firstUpdated() {\r\n        this.sidepanel.identifier = 'meta-menu';\r\n    }\r\n    updated(changes) {\r\n        if (changes.has('opened')) {\r\n            this.opened ? this.sidepanel.open() : this.sidepanel.close();\r\n        }\r\n    }\r\n    /**\r\n     * Opens the meta-menu if it is closed and closes the meta-menu if it is open.\r\n     */\r\n    toggle() {\r\n        this.opened ? this.close() : this.open();\r\n    }\r\n    /**\r\n     * Opens the meta-menu.\r\n     */\r\n    open() {\r\n        this.opened = true;\r\n        this.sidepanel.open();\r\n    }\r\n    /**\r\n     * Closes the meta-menu.\r\n     */\r\n    close() {\r\n        this.opened = false;\r\n        this.sidepanel.close();\r\n    }\r\n    handleOpen() {\r\n        this.opened = true;\r\n    }\r\n    handleClose() {\r\n        this.opened = false;\r\n    }\r\n    getHeaderTitle() {\r\n        return this.buildTitle();\r\n    }\r\n    getFooterTitle() {\r\n        return this.buildTitle('Agilent ');\r\n    }\r\n    buildTitle(prepend) {\r\n        if (this.brand) {\r\n            return html `<span>${prepend}${this.brand}</span><span>${this.productName}</span>`;\r\n        }\r\n        return html `<span>${prepend}${this.productName}</span>`;\r\n    }\r\n};\r\nAwfMetaMenu.styles = [COMMON_STYLES, META_MENU_CSS_VARIABLES, META_MENU_STYLES];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfMetaMenu.prototype, \"opened\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfMetaMenu.prototype, \"brand\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfMetaMenu.prototype, \"productName\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfMetaMenu.prototype, \"version\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfMetaMenu.prototype, \"copyrightYear\", void 0);\r\n__decorate([\r\n    query('awf-sidepanel')\r\n], AwfMetaMenu.prototype, \"sidepanel\", void 0);\r\nAwfMetaMenu = __decorate([\r\n    customElement('awf-meta-menu', true)\r\n], AwfMetaMenu);\r\nexport { AwfMetaMenu };\r\n//# sourceMappingURL=meta-menu.js.map","import { css } from 'lit';\r\nexport const NAVIGATION_BAR_STYLES = css `\r\n    :host {\r\n        display: grid;\r\n        grid-template-columns: auto auto auto 1fr auto;\r\n        grid-template-areas: \"menuTrigger brand start filler end\";\r\n        width: 100%;\r\n        height: 48px;\r\n        background-color: var(--awf-navigation-bar-background-inner);\r\n        --awf-button-label-display: inline;\r\n        --awf-button-label-margin: 0 20px 0 0;\r\n        --awf-button-icon-margin: 0 12px;\r\n        --awf-button-height: 48px;\r\n    }\r\n\r\n    :host([vertical]) {\r\n        height: 100%;\r\n        width: 72px;\r\n        grid-template-columns: auto;\r\n        grid-template-rows: auto auto auto 1fr auto;\r\n        grid-template-areas: \"menuTrigger\" \"brand\" \"start\" \"filler\" \"end\";\r\n        flex-direction: column;\r\n        --awf-button-height: 72px;\r\n        --awf-button-label-display: none;\r\n        --awf-button-icon-margin: 0;\r\n        --awf-button-padding-right: 0;\r\n    }\r\n\r\n    :host([vertical][extended]) {\r\n        width: var(--awf-navigation-bar-extended-width-inner);\r\n        position: relative;\r\n        --awf-button-content-alignment: flex-start;\r\n        --awf-button-label-display: inline;\r\n        --awf-button-label-margin: 0 20px 0 0;\r\n        --awf-button-icon-margin: 0 12px;\r\n    }\r\n\r\n    :host([vertical][extended]) ::slotted([slot=menuTrigger]) {\r\n        position: absolute;\r\n        right: 0;\r\n    }\r\n\r\n    slot[name=menuTrigger] {\r\n        display: flex;\r\n        grid-area: menuTrigger;\r\n    }\r\n\r\n    slot[name=brand] {\r\n        display: flex;\r\n        grid-area: brand;\r\n    }\r\n\r\n    slot:not([name]) {\r\n        display: flex;\r\n        grid-area: start;\r\n    }\r\n\r\n    slot[name=end] {\r\n        display: flex;\r\n        grid-area: end;\r\n    }\r\n\r\n    :host([vertical]) slot {\r\n        flex-direction: column;\r\n    }\r\n\r\n    ::slotted(*) {\r\n        --awf-button-icon-only-hover-background: var(--at-navy-tint);\r\n        --awf-button-icon-only-background: var(--at-dark-navy);\r\n\r\n        --awf-button-border: solid 1px var(--at-dark-navy);\r\n        --awf-button-background: var(--at-dark-navy);\r\n        --awf-button-font-color: var(--at-white);\r\n\r\n        --awf-button-hover-border: solid 1px var(--at-navy-tint);\r\n        --awf-button-hover-background: var(--at-navy-tint);\r\n        --awf-button-hover-font-color: var(--at-white);\r\n\r\n        --awf-icon-color: var(--at-white);\r\n        --awf-button-border-active: solid 1px var(--at-blue-shade);\r\n        --awf-notification-bubble-stroke-color: var(--at-dark-navy);\r\n    }\r\n\r\n    ::slotted(.active),\r\n    ::slotted(:active) {\r\n        --awf-button-background: var(--at-blue-shade);\r\n        --awf-button-border: solid 1px var(--at-blue-shade);\r\n\r\n        --awf-button-active-background: var(--at-blue-shade);\r\n        --awf-button-icon-only-active-background: var(--at-blue-shade);\r\n        --awf-button-active-border: solid 1px var(--at-blue-shade);\r\n\r\n        --awf-button-hover-border: solid 1px var(--at-blue-shade);\r\n        --awf-button-hover-background: var(--at-blue-shade);\r\n      \r\n        --awf-button-icon-only-active-foreground: var(--at-white);\r\n    }\r\n\r\n    ::slotted([slot=brand]) {\r\n        font-family: 'Noto Sans Display Semibold', sans-serif;\r\n\r\n        --awf-button-border-active: solid 1px var(--at-dark-navy);\r\n        --awf-button-background-active: var(--at-dark-navy);\r\n\r\n        --awf-button-hover-border: solid 1px var(--at-dark-navy);\r\n        --awf-button-hover-background: var(--at-dark-navy);\r\n    }\r\n\r\n    ::slotted(hr) {\r\n        margin: 0;\r\n        height: inherit;\r\n        opacity: 0.3;\r\n        border-style: solid;\r\n        border-right: none;\r\n        border-bottom: none;\r\n        border-color: var(--at-white);\r\n        background-color: var(--at-white);\r\n    }\r\n\r\n    @media only screen and (max-width: 1365px) {\r\n        :host {\r\n            --awf-button-label-display: none;\r\n            --awf-button-label-margin: 0;\r\n            --awf-button-padding-right: 0;\r\n        }\r\n    }\r\n`;\r\n//# sourceMappingURL=navigation-bar.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { NAVBAR_CSS_VARIABLES } from './navigation-bar.css-variables.styles';\r\nimport { NAVIGATION_BAR_STYLES } from './navigation-bar.styles';\r\nlet AwfNavigationBar = class AwfNavigationBar extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.vertical = false;\r\n        this.extended = false;\r\n    }\r\n    render() {\r\n        return html `\r\n            <slot name=\"menuTrigger\"></slot>\r\n            <slot name=\"brand\"></slot>\r\n            <slot @slotchange=${this.handleSlotChange}></slot>\r\n            <slot name=\"end\" @slotchange=${this.handleSlotChange}></slot>\r\n        `;\r\n    }\r\n    handleSlotChange(e) {\r\n        if (this.vertical && this.extended) {\r\n            const childNodes = e.target.assignedNodes();\r\n            childNodes\r\n                .filter(child => child.nodeName === 'AWF-BUTTON')\r\n                .map(child => child)\r\n                .filter(child => child.label === null)\r\n                .filter(child => child.textContent?.trim() === '')\r\n                .forEach(child => {\r\n                child.label = ' ';\r\n            });\r\n        }\r\n    }\r\n};\r\nAwfNavigationBar.styles = [COMMON_STYLES, NAVBAR_CSS_VARIABLES, NAVIGATION_BAR_STYLES];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfNavigationBar.prototype, \"vertical\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfNavigationBar.prototype, \"extended\", void 0);\r\nAwfNavigationBar = __decorate([\r\n    customElement('awf-navigation-bar', true)\r\n], AwfNavigationBar);\r\nexport { AwfNavigationBar };\r\n//# sourceMappingURL=navigation-bar.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { html, LitElement } from 'lit';\r\nimport { queryAssignedElements } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { STEPPER_CSS_VARIABLES } from './stepper.css-variables.styles';\r\nimport { STEPPER_STYLES } from './stepper.styles';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/stepper)\r\n */\r\nlet AwfStepper = class AwfStepper extends LitElement {\r\n    static get styles() {\r\n        return [COMMON_STYLES, STEPPER_CSS_VARIABLES, STEPPER_STYLES];\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.steps.forEach(s => s.addEventListener('click', (event) => this.handleClick(event, s)));\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.steps.forEach(s => s.removeEventListener('click', (event) => this.handleClick(event, s)));\r\n    }\r\n    render() {\r\n        return html `<slot @slotchange=${this.handleSlotChange}></slot>`;\r\n    }\r\n    handleSlotChange() {\r\n        this.steps.forEach((step) => {\r\n            step.addEventListener('click', (event) => this.handleClick(event, step));\r\n        });\r\n        if (this.steps.every(s => s.selected === false)) {\r\n            this.selectFirstStep();\r\n        }\r\n    }\r\n    handleClick(event, step) {\r\n        event.stopPropagation();\r\n        if (!step.disabled && !step.selected) {\r\n            this.selectStep(step);\r\n        }\r\n    }\r\n    selectStep(step) {\r\n        this.steps.forEach(s => {\r\n            if (s.selected) {\r\n                s.previewed = true;\r\n            }\r\n            s.selected = false;\r\n        });\r\n        step.selected = true;\r\n    }\r\n    selectFirstStep() {\r\n        if (this.steps.length > 0) {\r\n            this.steps[0].selected = true;\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    queryAssignedElements({ selector: 'awf-step' })\r\n], AwfStepper.prototype, \"steps\", void 0);\r\nAwfStepper = __decorate([\r\n    customElement('awf-stepper', true)\r\n], AwfStepper);\r\nexport { AwfStepper };\r\n//# sourceMappingURL=stepper.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const TAB_SET_STYLES = css `\r\n    :host {\r\n        display: flex;\r\n        height: 100%;\r\n        width: 100%;\r\n        flex-direction: column;\r\n        background-color: var(--awf-tabset-background-color-inner);\r\n    }\r\n\r\n    :host(:not([vertical])) {\r\n        overflow: hidden;\r\n\r\n        --awf-tabset-tabs-border-bottom-inner: none;\r\n        --awf-tabset-tabs-border-left-inner: none;\r\n        --awf-tabset-tabs-border-right-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-tabs-border-top-inner: none;\r\n        --awf-tabset-tab-border-bottom-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-tab-border-left-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-tab-border-right-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-tab-border-top-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-filler-border-bottom-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-filler-border-left-inner: none;\r\n        --awf-tabset-filler-border-right-inner: none;\r\n        --awf-tabset-filler-border-top-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-action-border-bottom-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-action-border-left-inner: none;\r\n        --awf-tabset-action-border-right-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-action-border-top-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-panel-border-bottom-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-panel-border-left-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-panel-border-right-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-panel-border-top-inner: none;\r\n    }\r\n\r\n    :host([vertical]) {\r\n        flex-direction: row;\r\n\r\n        --awf-tabset-tabs-border-bottom-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-tabs-border-left-inner: none;\r\n        --awf-tabset-tabs-border-right-inner: none;\r\n        --awf-tabset-tabs-border-top-inner: none;\r\n        --awf-tabset-tab-border-bottom-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-tab-border-left-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-tab-border-right-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-tab-border-top-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-filler-border-bottom-inner: none;\r\n        --awf-tabset-filler-border-left-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-filler-border-right-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-filler-border-top-inner: none;\r\n        --awf-tabset-action-border-bottom-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-action-border-left-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-action-border-right-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-action-border-top-inner: none;\r\n        --awf-tabset-panel-border-bottom-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-panel-border-left-inner: none;\r\n        --awf-tabset-panel-border-right-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n        --awf-tabset-panel-border-top-inner: 1px solid var(--awf-tabset-border-color-inner);\r\n    }\r\n\r\n    .tabs {\r\n        border-bottom: var(--awf-tabset-tabs-border-bottom-inner);\r\n        border-left: var(--awf-tabset-tabs-border-left-inner);\r\n        border-right: var(--awf-tabset-tabs-border-right-inner);\r\n        border-top: var(--awf-tabset-tabs-border-top-inner);\r\n        display: inline-grid;\r\n        grid-auto-flow: column;\r\n        flex: 0 0 auto;\r\n        box-sizing: border-box;\r\n        overflow-x: auto;\r\n        overflow-y: hidden;\r\n    }\r\n\r\n    ::slotted([slot=action]) {\r\n        border-bottom: var(--awf-tabset-action-border-bottom-inner);\r\n        border-left: var(--awf-tabset-action-border-left-inner);\r\n        border-right: var(--awf-tabset-action-border-right-inner);\r\n        border-top: var(--awf-tabset-action-border-top-inner);\r\n        --awf-button-height: calc(var(--awf-tab-height-inner) - 2px);\r\n    }\r\n\r\n    :host .filler {\r\n        border-bottom: var(--awf-tabset-filler-border-bottom-inner);\r\n        border-left: var(--awf-tabset-filler-border-left-inner);\r\n        border-right: var(--awf-tabset-filler-border-right-inner);\r\n        border-top: var(--awf-tabset-filler-border-top-inner);\r\n        margin-left: -1px;\r\n    }\r\n\r\n    :host .panel {\r\n        border-bottom: var(--awf-tabset-panel-border-bottom-inner);\r\n        border-left: var(--awf-tabset-panel-border-left-inner);\r\n        border-right: var(--awf-tabset-panel-border-right-inner);\r\n        border-top: var(--awf-tabset-panel-border-top-inner);\r\n        flex-grow: 1;\r\n        overflow-x: var(--awf-tabset-panel-overflow-x-inner);\r\n        overflow-y: var(--awf-tabset-panel-overflow-y-inner);\r\n    }\r\n\r\n    ::slotted(awf-tab) {\r\n        width: var(--awf-tab-width-inner);\r\n    }\r\n\r\n    ::slotted(awf-tab) {\r\n        border-bottom: var(--awf-tabset-tab-border-bottom-inner);\r\n        border-left: var(--awf-tabset-tab-border-left-inner);\r\n        border-right: var(--awf-tabset-tab-border-right-inner);\r\n        border-top: var(--awf-tabset-tab-border-top-inner);\r\n        position: relative;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    ::slotted(awf-tab:not(:first-of-type)) {\r\n        margin-left: -1px;\r\n    }\r\n\r\n    ::slotted(awf-tab[selected])::before {\r\n        position: absolute;\r\n        display: block;\r\n        bottom: -1px;\r\n        height: 0;\r\n        width: 0;\r\n        right: calc(50% - 7px);\r\n        content: '';\r\n        border-width: 0 7px 7px;\r\n        border-style: solid;\r\n        border-color: var(--awf-tabset-border-color-inner) transparent;\r\n    }\r\n\r\n    ::slotted(awf-tab[selected])::after {\r\n        position: absolute;\r\n        display: block;\r\n        bottom: -1px;\r\n        height: 0;\r\n        width: 0;\r\n        right: calc(50% - 6px);\r\n        content: '';\r\n        border-width: 0 6px 6px;\r\n        border-style: solid;\r\n        border-color: var(--awf-tabset-background-color-inner) transparent;\r\n    }\r\n\r\n    ::slotted(awf-tab:not([disabled]):hover) {\r\n        border: 1px solid var(--at-blue-medium);\r\n        background-color: var(--at-blue-soft);\r\n        z-index: var(--awf-elevation-z1);\r\n    }\r\n\r\n    ::slotted(awf-tab:not([disabled]):hover)::before {\r\n        border-color: var(--at-blue-medium) transparent;\r\n    }\r\n\r\n    :host([vertical]) .tabs {\r\n        grid-template-columns: 1fr;\r\n        grid-auto-flow: row;\r\n        overflow-y: auto;\r\n        overflow-x: hidden;\r\n    }\r\n\r\n    :host([vertical]) .filler {\r\n        margin: -1px 0 0 0;\r\n    }\r\n\r\n    :host([vertical]) .panel {\r\n        justify-content: stretch;\r\n    }\r\n\r\n    :host([vertical]) ::slotted(awf-tab:not(:first-of-type)) {\r\n        margin-left: 0;\r\n        margin-top: -1px;\r\n    }\r\n\r\n    :host([vertical]) ::slotted(awf-tab[selected])::before {\r\n        bottom: calc(50% - 7px);\r\n        right: -1px;\r\n        border-width: 7px 7px 7px 0;\r\n        border-color: transparent var(--awf-tabset-border-color-inner);\r\n    }\r\n\r\n    :host([vertical]) ::slotted(awf-tab[selected])::after {\r\n        bottom: calc(50% - 6px);\r\n        right: -1px;\r\n        border-width: 6px 6px 6px 0;\r\n        border-color: transparent var(--awf-tabset-background-color-inner);\r\n    }\r\n\r\n    :host([vertical]) ::slotted(awf-tab:not([disabled]):hover)::before {\r\n        border-color: transparent var(--at-blue-medium);\r\n    }\r\n`;\r\n//# sourceMappingURL=tab-set.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { html, LitElement } from 'lit';\r\nimport { property, query, queryAssignedElements, queryAssignedNodes } from 'lit/decorators.js';\r\nimport { TAB_CSS_VARIABLES } from '../../atoms/tab/tab.css-variables.styles';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { ElementStyleController } from '../../common/style/element-style.controller';\r\nimport { dispatchCustomEvent, moveElementsIntoSlot } from '../../common/utils/util';\r\nimport { TABSET_CSS_VARIABLES } from './tab-set.css-variables.styles';\r\nimport { TAB_SET_STYLES } from './tab-set.styles';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/structure/tabs)\r\n */\r\nlet AwfTabSet = class AwfTabSet extends LitElement {\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * If true, then the tabs are aligned vertically\r\n         * ([UX Ref](https://brand.agilent.com/document/213#/structure/tabs/vertical)).\r\n         * If false, then the tabs are aligned horizontally\r\n         * ([UX Ref](https://brand.agilent.com/document/213#/structure/tabs/horizontal)).\r\n         */\r\n        this.vertical = false;\r\n        this.dispatchCustomEvent = dispatchCustomEvent.bind(this);\r\n        this.parentStyle = document.createElement('style');\r\n        this.outerStyle = document.createElement('style');\r\n        this.parentStyle.innerText = `\r\n            awf-tab-set[vertical] awf-tab:not([underline]):not([disabled]):hover + awf-tab {\r\n                border-top-color: var(--at-gray-pale);\r\n            }\r\n        `;\r\n        new ElementStyleController(this, [`\r\n            awf-tab:not([underline]):not([disabled]):hover + awf-tab {\r\n                border-left-color: var(--at-gray-pale);\r\n            }\r\n        `]);\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.parentElement?.appendChild(this.parentStyle);\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.parentStyle.remove();\r\n    }\r\n    render() {\r\n        return html `\r\n            <div class=\"tabs\">\r\n                <slot name=\"tab\" @slotchange=${this.tabSlotChange}></slot>\r\n                <slot name=\"action\" @slotchange=${this.actionSlotChange}></slot>\r\n                <div class=\"filler\"></div>\r\n            </div>\r\n            <div class=\"panel\">\r\n                <slot name=\"panel\"></slot>\r\n            </div>\r\n            <slot @slotchange=${this.slotChange}></slot>`;\r\n    }\r\n    firstUpdated() {\r\n        this.setAttribute('role', 'tablist');\r\n    }\r\n    updated(changes) {\r\n        super.updated(changes);\r\n        if (changes.has('value')) {\r\n            this.updateSelectedTab();\r\n        }\r\n        if (changes.has('vertical')) {\r\n            this.determineGridLayout();\r\n        }\r\n    }\r\n    slotChange() {\r\n        const selector = 'slot:not([name])';\r\n        const target = this.shadowRoot.querySelector(selector);\r\n        if (target) {\r\n            moveElementsIntoSlot(target, 'awf-tab', 'tab');\r\n            moveElementsIntoSlot(target, 'awf-tab-panel', 'panel');\r\n        }\r\n    }\r\n    tabSlotChange() {\r\n        this.tabs.forEach((tab) => {\r\n            tab.addEventListener('click', (event) => this.handleClick(event, tab));\r\n        });\r\n        const selectableTab = this.tabs.find(t => t.value === this.value);\r\n        if (selectableTab) {\r\n            this.selectTab(selectableTab);\r\n        }\r\n        else if (this.tabs.length > 0) {\r\n            this.selectFirstTab();\r\n        }\r\n        this.determineGridLayout();\r\n    }\r\n    actionSlotChange() {\r\n        this.determineGridLayout();\r\n    }\r\n    handleClick(event, tab) {\r\n        event.stopPropagation();\r\n        if (!tab.disabled && !tab.selected) {\r\n            this.value = tab.value;\r\n        }\r\n    }\r\n    updateSelectedTab() {\r\n        const tab = this.tabs.find(t => t.value === this.value);\r\n        if (tab) {\r\n            this.selectTab(tab);\r\n        }\r\n        this.emitValue(this.value);\r\n    }\r\n    determineGridLayout() {\r\n        let tabLayout = '';\r\n        let actionLayout = '';\r\n        if (this.tabs.length > 0) {\r\n            tabLayout = `repeat(${this.tabs.length}, max-content)`;\r\n        }\r\n        if (this.actions.length > 0) {\r\n            actionLayout = ` repeat(${this.actions.length}, auto)`;\r\n        }\r\n        const layout = `${tabLayout}${actionLayout} 1fr`;\r\n        this.tabsDiv.style.gridTemplateRows = '';\r\n        this.tabsDiv.style.gridTemplateColumns = '';\r\n        if (this.vertical) {\r\n            this.tabsDiv.style.gridTemplateRows = layout;\r\n        }\r\n        else {\r\n            this.tabsDiv.style.gridTemplateColumns = layout;\r\n        }\r\n    }\r\n    selectTab(tab) {\r\n        this.deselectAllTabs();\r\n        tab.selected = true;\r\n        let panel = this.panels.find(p => p.value === tab.value);\r\n        panel = panel ?? this.panels.find(p => p.defaultPanel);\r\n        if (panel) {\r\n            panel.selected = true;\r\n        }\r\n    }\r\n    selectFirstTab() {\r\n        const [tab] = this.tabs;\r\n        this.value = tab.value;\r\n    }\r\n    deselectAllTabs() {\r\n        [...this.panels, ...this.tabs].forEach(tab => {\r\n            tab.selected = false;\r\n        });\r\n    }\r\n    emitValue(value) {\r\n        this.dispatchCustomEvent(AwfEvent.VALUE_CHANGE, value);\r\n    }\r\n};\r\nAwfTabSet.styles = [COMMON_STYLES, TAB_CSS_VARIABLES, TABSET_CSS_VARIABLES, TAB_SET_STYLES];\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfTabSet.prototype, \"value\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfTabSet.prototype, \"vertical\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'awf-tab-panel', slot: 'panel' })\r\n], AwfTabSet.prototype, \"panels\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'awf-tab', slot: 'tab' })\r\n], AwfTabSet.prototype, \"tabs\", void 0);\r\n__decorate([\r\n    queryAssignedNodes({ slot: 'action' })\r\n], AwfTabSet.prototype, \"actions\", void 0);\r\n__decorate([\r\n    query('.tabs')\r\n], AwfTabSet.prototype, \"tabsDiv\", void 0);\r\nAwfTabSet = __decorate([\r\n    customElement('awf-tab-set', true)\r\n], AwfTabSet);\r\nexport { AwfTabSet };\r\n//# sourceMappingURL=tab-set.js.map","/*\r\n* © Agilent Technologies, Inc. 2023.\r\n*\r\n* Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n* is prohibited and will be prosecuted to the maximum extent under the law.\r\n*\r\n*/\r\nimport { css } from 'lit';\r\nconst TOAST_INFO_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-toast-info-background-color-inner: var(--awf-toast-info-background-color, var(--at-white));\r\n        --awf-toast-info-border-inner: var(--awf-toast-info-border, 1px solid var(--at-gray-soft));\r\n        --awf-toast-info-font-color-inner: var(--awf-toast-info-font-color, var(--at-dark-navy));\r\n        --awf-toast-info-icon-color-inner: var(--awf-toast-info-icon-color, var(--awf-toast-info-font-color-inner));\r\n        --awf-toast-info-progress-color-inner: var(--awf-toast-info-progress-color, var(--at-dark-navy));\r\n    }\r\n`;\r\nconst TOAST_SUCCESS_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-toast-success-background-color-inner: var(--awf-toast-success-background-color, var(--at-green-extra-light));\r\n        --awf-toast-success-border-inner: none;\r\n        --awf-toast-success-font-color-inner: var(--awf-toast-success-font-color, var(--at-dark-navy));\r\n        --awf-toast-success-icon-color-inner: var(--awf-toast-success-icon-color, var(--at-green));\r\n        --awf-toast-success-progress-color-inner: var(--awf-toast-success-progress-color, var(--at-green));\r\n    }\r\n`;\r\nconst TOAST_SUCCESS_STRONG_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-toast-success-strong-background-color-inner: var(--awf-toast-success-background-color, var(--at-green));\r\n        --awf-toast-success-strong-border-inner: none;\r\n        --awf-toast-success-strong-font-color-inner: var(--awf-toast-success-font-color, var(--at-white));\r\n        --awf-toast-success-strong-icon-color-inner: var(--awf-toast-success-icon-color, var(--at-white));\r\n        --awf-toast-success-strong-progress-color-inner: var(--awf-toast-success-progress-color, var(--at-green-dark));\r\n    }\r\n`;\r\nconst TOAST_PROGRESSING_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-toast-progressing-background-color-inner: var(--awf-toast-progressing-background-color, var(--at-periwinkle-extra-light));\r\n        --awf-toast-success-border-inner: none;\r\n        --awf-toast-progressing-font-color-inner: var(--awf-toast-progressing-font-color, var(--at-dark-navy));\r\n        --awf-toast-progressing-icon-color-inner: var(--awf-toast-progressing-icon-color, var(--awf-toast-progressing-font-color-inner));\r\n        --awf-toast-progressing-progress-color-inner: var(--awf-toast-progressing-progress-color, var(--at-periwinkle));\r\n    }\r\n`;\r\nconst TOAST_PROGRESSING_STRONG_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-toast-progressing-strong-background-color-inner: var(--awf-toast-progressing-strong-background-color, var(--at-periwinkle));\r\n        --awf-toast-progressing-strong-border-inner: none;\r\n        --awf-toast-progressing-strong-font-color-inner: var(--awf-toast-progressing-strong-font-color, var(--at-white));\r\n        --awf-toast-progressing-strong-icon-color-inner: var(--awf-toast-progressing-strong-icon-color, var(--awf-toast-progressing-strong-font-color-inner));\r\n        --awf-toast-progressing-strong-progress-color-inner: var(--awf-toast-progressing-strong-progress-color, var(--at-periwinkle-dark));\r\n    }\r\n`;\r\nconst TOAST_WARNING_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-toast-warning-background-color-inner: var(--awf-toast-warning-background-color, var(--at-yellow-extra-light));\r\n        --awf-toast-warning-border-inner: none;\r\n        --awf-toast-warning-font-color-inner: var(--awf-toast-warning-font-color, var(--at-dark-navy));\r\n        --awf-toast-warning-icon-color-inner: var(--awf-toast-warning-icon-color, var(--awf-toast-warning-font-color-inner));\r\n        --awf-toast-warning-progress-color-inner: var(--awf-toast-warning-progress-color, var(--at-yellow));\r\n    }\r\n`;\r\nconst TOAST_WARNING_STRONG_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-toast-warning-strong-background-color-inner: var(--awf-toast-warning-strong-background-color, var(--at-yellow));\r\n        --awf-toast-warning-strong-border-inner: none;\r\n        --awf-toast-warning-strong-font-color-inner: var(--awf-toast-warning-strong-font-color, var(--at-dark-navy));\r\n        --awf-toast-warning-strong-icon-color-inner: var(--awf-toast-warning-strong-icon-color, var(--awf-toast-warning-strong-font-color-inner));\r\n        --awf-toast-warning-strong-progress-color-inner: var(--awf-toast-warning-strong-progress-color, var(--at-yellow-dark));\r\n    }\r\n`;\r\nconst TOAST_ERROR_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-toast-error-background-color-inner: var(--awf-toast-error-background-color, var(--at-red-extra-light));\r\n        --awf-toast-error-border-inner: none;\r\n        --awf-toast-error-font-color-inner: var(--awf-toast-error-font-color, var(--at-dark-navy));\r\n        --awf-toast-error-icon-color-inner: var(--awf-toast-error-icon-color, var(--at-red));\r\n        --awf-toast-error-progress-color-inner: var(--awf-toast-error-progress-color, var(--at-red));\r\n    }\r\n`;\r\nconst TOAST_ERROR_STRONG_CSS_VARIABLES = css `\r\n    :host {\r\n        --awf-toast-error-strong-background-color-inner: var(--awf-toast-error-strong-background-color, var(--at-red));\r\n        --awf-toast-error-strong-border-inner: none;\r\n        --awf-toast-error-strong-font-color-inner: var(--awf-toast-error-strong-font-color, var(--at-white));\r\n        --awf-toast-error-strong-icon-color-inner: var(--awf-toast-error-strong-icon-color, var(--at-white));\r\n        --awf-toast-error-strong-progress-color-inner: var(--awf-toast-error-strong-progress-color, var(--at-red-dark));\r\n    }\r\n`;\r\nexport const TOAST_CSS_VARIABLES = [\r\n    TOAST_INFO_CSS_VARIABLES,\r\n    TOAST_SUCCESS_CSS_VARIABLES,\r\n    TOAST_SUCCESS_STRONG_CSS_VARIABLES,\r\n    TOAST_PROGRESSING_CSS_VARIABLES,\r\n    TOAST_PROGRESSING_STRONG_CSS_VARIABLES,\r\n    TOAST_WARNING_CSS_VARIABLES,\r\n    TOAST_WARNING_STRONG_CSS_VARIABLES,\r\n    TOAST_ERROR_CSS_VARIABLES,\r\n    TOAST_ERROR_STRONG_CSS_VARIABLES\r\n];\r\n//# sourceMappingURL=toast.css-variables.styles.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nexport const TOAST_STYLES = css `\r\n    :host {\r\n        width: 440px;\r\n        padding: 16px;\r\n        position: relative;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        box-sizing: border-box;\r\n        background-color: var(--awf-toast-background-color-inner);\r\n        color: var(--awf-toast-font-color-inner);\r\n        border: var(--awf-toast-border-inner);\r\n        box-shadow: 2px 2px 16px 0 rgba(0, 0, 0, 0.21);\r\n        z-index: var( --awf-elevation-z7);\r\n    }\r\n\r\n    :host([variant='informational']) {\r\n        --awf-toast-background-color-inner: var(--awf-toast-info-background-color-inner);\r\n        --awf-toast-border-inner: var(--awf-toast-info-border-inner);\r\n        --awf-toast-font-color-inner: var(--awf-toast-info-font-color-inner);\r\n        --awf-toast-icon-color-inner: var(--awf-toast-info-icon-color-inner);\r\n        --awf-toast-progress-color-inner: var(--awf-toast-info-progress-color-inner);\r\n    }\r\n\r\n    :host([strong][variant='success']) {\r\n        --awf-toast-background-color-inner: var(--awf-toast-success-strong-background-color-inner);\r\n        --awf-toast-border-inner: var(--awf-toast-success-strong-border-inner);\r\n        --awf-toast-font-color-inner: var(--awf-toast-success-strong-font-color-inner);\r\n        --awf-toast-icon-color-inner: var(--awf-toast-success-strong-icon-color-inner);\r\n        --awf-toast-progress-color-inner: var(--awf-toast-success-strong-progress-color-inner);\r\n    }\r\n\r\n    :host([variant='success']) {\r\n        --awf-toast-background-color-inner: var(--awf-toast-success-background-color-inner);\r\n        --awf-toast-border-inner: var(--awf-toast-success-border-inner);\r\n        --awf-toast-font-color-inner: var(--awf-toast-success-font-color-inner);\r\n        --awf-toast-icon-color-inner: var(--awf-toast-success-icon-color-inner);\r\n        --awf-toast-progress-color-inner: var(--awf-toast-success-progress-color-inner);\r\n    }\r\n\r\n    :host([strong][variant='progressing']) {\r\n        --awf-toast-background-color-inner: var(--awf-toast-progressing-strong-background-color-inner);\r\n        --awf-toast-border-inner: var(--awf-toast-progressing-strong-border-inner);\r\n        --awf-toast-font-color-inner: var(--awf-toast-progressing-strong-font-color-inner);\r\n        --awf-toast-icon-color-inner: var(--awf-toast-progressing-strong-icon-color-inner);\r\n        --awf-toast-progress-color-inner: var(--awf-toast-progressing-strong-progress-color-inner);\r\n\r\n        --awf-spinner-border-background-color: var(--at-periwinkle-light);\r\n        --awf-spinner-border-color: var(--at-white);\r\n    }\r\n\r\n    :host([variant='progressing']) {\r\n        --awf-toast-background-color-inner: var(--awf-toast-progressing-background-color-inner);\r\n        --awf-toast-border-inner: var(--awf-toast-progressing-border-inner);\r\n        --awf-toast-font-color-inner: var(--awf-toast-progressing-font-color-inner);\r\n        --awf-toast-icon-color-inner: var(--awf-toast-progressing-icon-color-inner);\r\n        --awf-toast-progress-color-inner: var(--awf-toast-progressing-progress-color-inner);\r\n\r\n        --awf-spinner-size: 22px;\r\n        --awf-spinner-border-width: 2px;\r\n        --awf-spinner-border-background-color: var(--at-white);\r\n        --awf-spinner-border-color: var(--at-dark-navy);\r\n    }\r\n\r\n    :host([strong][variant='warning']) {\r\n        --awf-toast-background-color-inner: var(--awf-toast-warning-strong-background-color-inner);\r\n        --awf-toast-border-inner: var(--awf-toast-warning-strong-border-inner);\r\n        --awf-toast-font-color-inner: var(--awf-toast-warning-strong-font-color-inner);\r\n        --awf-toast-icon-color-inner: var(--awf-toast-warning-strong-icon-color-inner);\r\n        --awf-toast-progress-color-inner: var(--awf-toast-warning-strong-progress-color-inner);\r\n    }\r\n\r\n    :host([variant='warning']) {\r\n        --awf-toast-background-color-inner: var(--awf-toast-warning-background-color-inner);\r\n        --awf-toast-border-inner: var(--awf-toast-warning-border-inner);\r\n        --awf-toast-font-color-inner: var(--awf-toast-warning-font-color-inner);\r\n        --awf-toast-icon-color-inner: var(--awf-toast-warning-icon-color-inner);\r\n        --awf-toast-progress-color-inner: var(--awf-toast-warning-progress-color-inner);\r\n    }\r\n\r\n    :host([strong][variant='error']) {\r\n        --awf-toast-background-color-inner: var(--awf-toast-error-strong-background-color-inner);\r\n        --awf-toast-border-inner: var(--awf-toast-error-strong-border-inner);\r\n        --awf-toast-font-color-inner: var(--awf-toast-error-strong-font-color-inner);\r\n        --awf-toast-icon-color-inner: var(--awf-toast-error-strong-icon-color-inner);\r\n        --awf-toast-progress-color-inner: var(--awf-toast-error-strong-progress-color-inner);\r\n    }\r\n\r\n    :host([variant='error']) {\r\n        --awf-toast-background-color-inner: var(--awf-toast-error-background-color-inner);\r\n        --awf-toast-border-inner: var(--awf-toast-error-border-inner);\r\n        --awf-toast-font-color-inner: var(--awf-toast-error-font-color-inner);\r\n        --awf-toast-icon-color-inner: var(--awf-toast-error-icon-color-inner);\r\n        --awf-toast-progress-color-inner: var(--awf-toast-error-progress-color-inner);\r\n    }\r\n\r\n    .grid {\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 100%;\r\n    }\r\n\r\n    .icon-header-wrapper {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 16px;\r\n    }\r\n\r\n    .header {\r\n        font-family: 'Noto Sans Display Bold', sans-serif;\r\n        height: 21px;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n\r\n    .message {\r\n        margin-left: 40px;\r\n    }\r\n\r\n    awf-icon, \r\n    .icon awf-icon {\r\n        --awf-icon-color: var(--awf-toast-font-color-inner);\r\n    }\r\n\r\n    .icon {\r\n        height: 24px;\r\n        width: 24px;\r\n        justify-self: center;\r\n    }\r\n\r\n    .icon awf-spinner {\r\n        margin: 2px;\r\n    }\r\n\r\n    .close-button {\r\n        display: flex;\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        margin: 8px 8px 0 0;\r\n        border: none;\r\n        padding: 0;\r\n        background-color: transparent;\r\n        color: var(--awf-toast-font-color-inner);\r\n        cursor: pointer;\r\n        font-family: 'Noto Sans Display', sans-serif;\r\n        font-size: 20px;\r\n    }\r\n\r\n    :host([hideCountdown]) progress {\r\n        display: none;\r\n    }\r\n\r\n    progress {\r\n        -webkit-appearance: none;\r\n        height: 4px;\r\n        width: 438px;\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    progress::-webkit-progress-bar {\r\n        background-color: var(--awf-toast-background-color-inner);\r\n    }\r\n\r\n    progress::-webkit-progress-value {\r\n        background-color: var(--awf-toast-progress-color-inner);\r\n    }\r\n\r\n    progress::-moz-progress-bar {\r\n        background-color: var(--awf-toast-progress-color-inner);\r\n    }\r\n`;\r\n//# sourceMappingURL=toast.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { agErrorOctagon, agSampleStatusIndicatorSuccess, agWarningTriangle } from '@agilent/web-icons/core';\r\nimport { agInfoCircle } from '@agilent/web-icons/core/info-circle.js';\r\nimport { LitElement, html } from 'lit';\r\nimport { property, query } from 'lit/decorators.js';\r\nimport { DeleteCross12px } from '../../../assets/icons';\r\nimport '../../atoms/icon/icon.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { TOAST_CSS_VARIABLES } from './toast.css-variables.styles';\r\nimport { TOAST_STYLES } from './toast.styles';\r\n// eslint-disable-next-line no-shadow\r\nexport var ToastVariant;\r\n(function (ToastVariant) {\r\n    ToastVariant[\"INFORMATIONAL\"] = \"informational\";\r\n    ToastVariant[\"SUCCESS\"] = \"success\";\r\n    ToastVariant[\"PROGRESSING\"] = \"progressing\";\r\n    ToastVariant[\"WARNING\"] = \"warning\";\r\n    ToastVariant[\"ERROR\"] = \"error\";\r\n})(ToastVariant || (ToastVariant = {}));\r\nexport const VARIANT_ICON_MAPPING = new Map([\r\n    [ToastVariant.INFORMATIONAL, agInfoCircle],\r\n    [ToastVariant.SUCCESS, agSampleStatusIndicatorSuccess],\r\n    [ToastVariant.WARNING, agWarningTriangle],\r\n    [ToastVariant.ERROR, agErrorOctagon],\r\n]);\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/status-communication/toasts)\r\n*/\r\nlet AwfToast = class AwfToast extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The variant of the toast to display.\r\n         * There are five options available: informational, success, progressing, warning and error.\r\n         */\r\n        this.variant = ToastVariant.INFORMATIONAL;\r\n        /**\r\n         * By default, the toast is displayed in light colors.\r\n         * If set to true, the toast will be displayed in strong colors.\r\n        */\r\n        this.strong = false;\r\n        /**\r\n         * By default, the countdown is visualized at the bottom of the toast.\r\n         * If set to true, the visualized countdown will be hidden.\r\n         */\r\n        this.hideCountdown = false;\r\n        /**\r\n         * The text that is displayed in the header of the toast.\r\n         */\r\n        this.header = '';\r\n        /**\r\n         * The optional text that is displayed in the body of the toast.\r\n         */\r\n        this.message = '';\r\n        /**\r\n         * Property to configure wether or not the toast should dismiss automatically.\r\n         */\r\n        this.autoDismiss = false;\r\n        this.countdownStart = 0;\r\n        this.nextCount = -1;\r\n        this.stopTime = 0;\r\n        this.interruptions = [];\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        if (this.isAutoDismissing()) {\r\n            this.startCountdown();\r\n        }\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.stopCountdown();\r\n    }\r\n    render() {\r\n        let template = html `\r\n            <div class=\"grid\">\r\n                <div class=\"icon-header-wrapper\">\r\n                    <div class=\"icon\">${this.renderIcon()}</div>\r\n                    <div class=\"header\">${this.header}</div>\r\n                </div>\r\n                <div class=\"message\">${this.message}</div>\r\n            </div>\r\n            <button aria-label=\"close\" class=\"close-button\" @click=${this.handleClose}>\r\n                <awf-icon name=${DeleteCross12px.name}></awf-icon>\r\n            </button>\r\n        `;\r\n        if (this.isAutoDismissing()) {\r\n            template = html `\r\n                ${template}\r\n            <progress value=\"100\" max=\"100\"></progress>`;\r\n        }\r\n        return template;\r\n    }\r\n    renderIcon() {\r\n        const iconName = VARIANT_ICON_MAPPING.get(this.variant) ?? '';\r\n        let icon = html `<awf-icon raw=${iconName}></awf-icon>`;\r\n        if (this.variant === ToastVariant.PROGRESSING) {\r\n            icon = html `<awf-spinner></awf-spinner>`;\r\n        }\r\n        return icon;\r\n    }\r\n    startCountdown() {\r\n        this.countdown();\r\n        this.addEventListener('mouseenter', this.holdCountdown);\r\n    }\r\n    stopCountdown() {\r\n        cancelAnimationFrame(this.nextCount);\r\n        this.countdownStart = 0;\r\n        this.removeEventListener('mouseenter', this.holdCountdown);\r\n    }\r\n    holdCountdown() {\r\n        cancelAnimationFrame(this.nextCount);\r\n        this.stopTime = performance.now();\r\n        this.addEventListener('mouseleave', this.resumeCountdown);\r\n    }\r\n    resumeCountdown() {\r\n        this.interruptions = [...this.interruptions, performance.now() - this.stopTime];\r\n        this.removeEventListener('mouseleave', this.resumeCountdown);\r\n        this.countdown();\r\n    }\r\n    countdown() {\r\n        cancelAnimationFrame(this.nextCount);\r\n        this.nextCount = requestAnimationFrame(this.doCountdown.bind(this));\r\n    }\r\n    doCountdown(time) {\r\n        const timeout = this.getTimeout();\r\n        if (!this.countdownStart) {\r\n            this.countdownStart = time;\r\n        }\r\n        const totalInterruption = this.interruptions.reduce((sum, interruption) => sum + interruption, 0);\r\n        const timeElapsed = time - this.countdownStart - totalInterruption;\r\n        if (timeElapsed > timeout) {\r\n            this.handleClose();\r\n            this.countdownStart = 0;\r\n        }\r\n        else {\r\n            this.updateProgress(timeElapsed, timeout);\r\n            this.countdown();\r\n        }\r\n    }\r\n    getTimeout() {\r\n        const wordCount = this.getWordCount();\r\n        let timeout = 8000;\r\n        if (wordCount <= 8) {\r\n            timeout = 5000;\r\n        }\r\n        if (wordCount <= 4) {\r\n            timeout = 3000;\r\n        }\r\n        return timeout;\r\n    }\r\n    handleClose() {\r\n        const customEvent = new CustomEvent(AwfEvent.CLOSE, {\r\n            composed: true,\r\n            bubbles: true,\r\n            cancelable: true,\r\n        });\r\n        this.dispatchEvent(customEvent);\r\n    }\r\n    updateProgress(timeElapsed, timeout) {\r\n        const share = 1 - timeElapsed / timeout;\r\n        this.progress.value = share * 100;\r\n    }\r\n    getWordCount() {\r\n        const words = this.header.concat(' ', this.message).split(' ');\r\n        return words.length;\r\n    }\r\n    isAutoDismissing() {\r\n        return (this.variant === ToastVariant.SUCCESS) || this.autoDismiss;\r\n    }\r\n};\r\nAwfToast.styles = [COMMON_STYLES, TOAST_CSS_VARIABLES, TOAST_STYLES];\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfToast.prototype, \"variant\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfToast.prototype, \"strong\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfToast.prototype, \"hideCountdown\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfToast.prototype, \"header\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfToast.prototype, \"message\", void 0);\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfToast.prototype, \"autoDismiss\", void 0);\r\n__decorate([\r\n    query('progress')\r\n], AwfToast.prototype, \"progress\", void 0);\r\nAwfToast = __decorate([\r\n    customElement('awf-toast', true)\r\n], AwfToast);\r\nexport { AwfToast };\r\n//# sourceMappingURL=toast.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { html, LitElement } from 'lit';\r\nimport { repeat } from 'lit-html/directives/repeat.js';\r\nimport { eventOptions, property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { ToastVariant } from '../toast/toast';\r\nimport '../toast/toast.js';\r\nimport { TOAST_CONTAINER_STYLES } from './toast-container.styles';\r\n// eslint-disable-next-line no-shadow\r\nexport var ToastPosition;\r\n(function (ToastPosition) {\r\n    ToastPosition[\"TOP_RIGHT\"] = \"top_right\";\r\n    ToastPosition[\"TOP_CENTER\"] = \"top_center\";\r\n    ToastPosition[\"TOP_LEFT\"] = \"top_left\";\r\n    ToastPosition[\"BOTTOM_RIGHT\"] = \"bottom_right\";\r\n    ToastPosition[\"BOTTOM_CENTER\"] = \"bottom_center\";\r\n    ToastPosition[\"BOTTOM_LEFT\"] = \"bottom_left\";\r\n})(ToastPosition || (ToastPosition = {}));\r\n// eslint-disable-next-line no-shadow\r\nexport var ToastEvent;\r\n(function (ToastEvent) {\r\n    ToastEvent[\"ADD\"] = \"toast:add\";\r\n})(ToastEvent || (ToastEvent = {}));\r\nexport function showToast(toast) {\r\n    const customEvent = new CustomEvent(ToastEvent.ADD, {\r\n        composed: true,\r\n        bubbles: true,\r\n        cancelable: true,\r\n        detail: toast\r\n    });\r\n    document.dispatchEvent(customEvent);\r\n}\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/status-communication/toasts)\r\n *\r\n * Note: Should be unique throughout the page. Other references will be automatically removed\r\n */\r\nlet AwfToastContainer = class AwfToastContainer extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The position of the toast container relative to the view port.\r\n         * There are six options available: top_right, top_center, top_left, bottom_right, bottom_center and bottom_left.\r\n         */\r\n        this.position = ToastPosition.BOTTOM_CENTER;\r\n        /**\r\n         * By default all toasts in the toast container are displayed in light colors.\r\n         * If set to true, all toasts in the toast container will be displayed in strong colors.\r\n         */\r\n        this.strong = false;\r\n        /**\r\n         * The maximum number of toasts the toast container can contain at the same time.\r\n         * If the maximum number of toasts is exceeded, the toast at the bottom of the stack is dismissed.\r\n         */\r\n        this.maxCount = 3;\r\n        /**\r\n         * The id of the element, to make sure there is only one instance of the toast container\r\n         */\r\n        this.id = `awf-toast-container-${Date.now()}`;\r\n        this.toasts = [];\r\n        this.currentId = 0;\r\n        this.touchStartY = 0;\r\n        this.addToastEventHandler = (event) => {\r\n            if (event instanceof CustomEvent) {\r\n                this.addToast(event.detail);\r\n            }\r\n        };\r\n    }\r\n    static get styles() {\r\n        return [COMMON_STYLES, TOAST_CONTAINER_STYLES];\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        document.addEventListener(ToastEvent.ADD, this.addToastEventHandler);\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        document.removeEventListener(ToastEvent.ADD, this.addToastEventHandler);\r\n    }\r\n    render() {\r\n        return html `${repeat(this.toasts, ({ id }) => id, toast => this.createToastElement(toast))}`;\r\n    }\r\n    createToastElement({ header, message, variant, hideCountdown, id, autoDismiss }) {\r\n        return html `<awf-toast\r\n            id=\"${id}\"\r\n            header=\"${header}\"\r\n            message=\"${message}\"\r\n            .variant=\"${variant || ToastVariant.INFORMATIONAL}\"\r\n            ?strong=\"${this.strong}\"\r\n            ?hideCountdown=\"${hideCountdown}\"\r\n            ?autoDismiss=\"${autoDismiss}\"\r\n            @close=\"${(event) => this.markToastForRemoval(event, id)}\"\r\n            @transitionend=\"${() => this.removeToast(id)}\"\r\n            @touchstart=\"${this.onTouchStart}\"\r\n            @touchend=\"${(event) => this.onTouchEnd(event, id)}\"\r\n        ></awf-toast>`;\r\n    }\r\n    addToast(toast) {\r\n        this.toasts = [{ ...toast, id: `toast-${this.currentId++}` }, ...this.toasts];\r\n        this.requestUpdate();\r\n        this.markOverflowToasts();\r\n    }\r\n    markToastForRemoval(event, toastId) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        this.addDeleteClass(toastId);\r\n    }\r\n    removeToast(toastId) {\r\n        this.toasts = this.toasts.filter(({ id }) => id !== toastId);\r\n        this.requestUpdate();\r\n    }\r\n    onTouchStart(event) {\r\n        this.touchStartY = event.changedTouches[0].screenY;\r\n    }\r\n    onTouchEnd(event, toastId) {\r\n        const touchEndY = event.changedTouches[0].screenY;\r\n        this.handleSwipeGesture(touchEndY, toastId);\r\n    }\r\n    markOverflowToasts() {\r\n        const maxLength = this.maxCount < 1 ? 1 : this.maxCount;\r\n        const difference = this.toasts.length - maxLength;\r\n        if (difference < 1) {\r\n            return;\r\n        }\r\n        this.toasts.slice(-difference).forEach(({ id }) => this.addDeleteClass(id));\r\n    }\r\n    addDeleteClass(toastId) {\r\n        const toast = this.shadowRoot?.querySelector(`#${toastId}`);\r\n        if (toast) {\r\n            toast.classList.add('delete');\r\n        }\r\n    }\r\n    handleSwipeGesture(touchEndY, toastId) {\r\n        const swipedDown = touchEndY > this.touchStartY;\r\n        const swipedUp = touchEndY < this.touchStartY;\r\n        const isTopPositioned = this.isTopPositioned();\r\n        if ((isTopPositioned && swipedUp) || (!isTopPositioned && swipedDown)) {\r\n            this.addDeleteClass(toastId);\r\n        }\r\n    }\r\n    isTopPositioned() {\r\n        return [ToastPosition.TOP_CENTER, ToastPosition.TOP_LEFT, ToastPosition.TOP_RIGHT].includes(this.position);\r\n    }\r\n};\r\n__decorate([\r\n    property()\r\n], AwfToastContainer.prototype, \"position\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AwfToastContainer.prototype, \"strong\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfToastContainer.prototype, \"maxCount\", void 0);\r\n__decorate([\r\n    property({ type: String })\r\n], AwfToastContainer.prototype, \"id\", void 0);\r\n__decorate([\r\n    eventOptions({ passive: true })\r\n], AwfToastContainer.prototype, \"onTouchStart\", null);\r\n__decorate([\r\n    eventOptions({ passive: true })\r\n], AwfToastContainer.prototype, \"onTouchEnd\", null);\r\nAwfToastContainer = __decorate([\r\n    customElement('awf-toast-container', true)\r\n], AwfToastContainer);\r\nexport { AwfToastContainer };\r\n//# sourceMappingURL=toast-container.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { css } from 'lit';\r\nimport { CHIP_TRANSITIONS } from '../../atoms/chip/chip.styles';\r\nexport const TOGGLE_CHIPS_STYLES = css `\r\n    :host {\r\n        --awf-chip-rest-background: transparent;\r\n        --awf-chip-rest-border: 1px solid transparent;\r\n        --awf-chip-rest-disabled-border: 1px solid transparent;\r\n\r\n        display: flex;\r\n        background-color: var(--at-gray-soft);\r\n        width: fit-content;\r\n        border-radius: 16px;\r\n\r\n        ${CHIP_TRANSITIONS};\r\n    }\r\n\r\n    :host([disabled]) {\r\n        background-color: var(--at-gray-pale);\r\n    }\r\n`;\r\n//# sourceMappingURL=toggle-chips.styles.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { html, LitElement } from 'lit';\r\nimport { property, queryAssignedElements } from 'lit/decorators.js';\r\nimport { AwfChip } from '../../atoms/chip/chip';\r\nimport '../../atoms/chip/chip.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { AwfEvent } from '../../common/events/events.enum';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles';\r\nimport { dispatchCustomEvent } from '../../common/utils/util';\r\nimport { TOGGLE_CHIPS_STYLES } from './toggle-chips.styles';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/inputs-controls/chips/toggle-chip)\r\n */\r\nlet AwfToggleChips = class AwfToggleChips extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * If true, then the toggle-chips are disabled and can't be changed i.e. the slotted chips cannot be activated.\r\n         */\r\n        this.disabled = false;\r\n        this.dispatchCustomEvent = dispatchCustomEvent.bind(this);\r\n    }\r\n    render() {\r\n        return html `<slot @click=${this.handleChipClick}></slot> `;\r\n    }\r\n    updated(changes) {\r\n        super.updated(changes);\r\n        if (changes.has('disabled')) {\r\n            this.setChipsDisabledState(this.disabled);\r\n            this.disabled ? this.setAttribute('aria-disabled', 'true') : this.removeAttribute('aria-disabled');\r\n        }\r\n        if (changes.has('value')) {\r\n            this.updateChipsActiveState();\r\n        }\r\n    }\r\n    handleChipClick(event) {\r\n        event.stopPropagation();\r\n        const { target } = event;\r\n        if (target instanceof AwfChip && !target.active && !target.disabled) {\r\n            this.deactivateAllChips();\r\n            target.active = true;\r\n            this.emitValue(target.value);\r\n        }\r\n    }\r\n    setChipsDisabledState(disabled) {\r\n        this.chips.forEach(chip => {\r\n            chip.disabled = disabled;\r\n        });\r\n    }\r\n    updateChipsActiveState() {\r\n        this.chips.forEach(chip => {\r\n            chip.active = chip.value === this.value;\r\n        });\r\n    }\r\n    deactivateAllChips() {\r\n        this.chips.forEach(chip => {\r\n            chip.active = false;\r\n        });\r\n    }\r\n    emitValue(value) {\r\n        this.dispatchCustomEvent(AwfEvent.VALUE_CHANGE, value);\r\n    }\r\n};\r\nAwfToggleChips.styles = [COMMON_STYLES, TOGGLE_CHIPS_STYLES];\r\n__decorate([\r\n    property({ type: Boolean, reflect: true })\r\n], AwfToggleChips.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfToggleChips.prototype, \"value\", void 0);\r\n__decorate([\r\n    queryAssignedElements({ selector: 'awf-chip' })\r\n], AwfToggleChips.prototype, \"chips\", void 0);\r\nAwfToggleChips = __decorate([\r\n    customElement('awf-toggle-chips', true)\r\n], AwfToggleChips);\r\nexport { AwfToggleChips };\r\n//# sourceMappingURL=toggle-chips.js.map","/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { __decorate } from \"tslib\";\r\nimport { html, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { customElement } from '../../common/decorators/awf-custom-element.js';\r\nimport { COMMON_STYLES } from '../../common/style/common-styles.js';\r\nimport { WIDGET_LAYOUT_STYLES } from './widget-layout.styles.js';\r\n/**\r\n * [UX Ref](https://brand.agilent.com/document/213#/structure/cards)\r\n */\r\nlet AwfWidgetLayout = class AwfWidgetLayout extends LitElement {\r\n    render() {\r\n        this.getColumns();\r\n        this.getRows();\r\n        return html `<slot></slot>`;\r\n    }\r\n    getColumns() {\r\n        let templateColumns = 'auto';\r\n        if (this.columns && this.columns > 0) {\r\n            templateColumns = `repeat(${this.columns}, 1fr)`;\r\n        }\r\n        this.style.gridTemplateColumns = templateColumns;\r\n    }\r\n    getRows() {\r\n        let templateRows = 'auto';\r\n        if (this.rows && this.rows > 0) {\r\n            templateRows = `repeat(${this.rows}, 1fr)`;\r\n        }\r\n        this.style.gridTemplateRows = templateRows;\r\n    }\r\n};\r\nAwfWidgetLayout.styles = [COMMON_STYLES, WIDGET_LAYOUT_STYLES];\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfWidgetLayout.prototype, \"columns\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], AwfWidgetLayout.prototype, \"rows\", void 0);\r\nAwfWidgetLayout = __decorate([\r\n    customElement('awf-widget-layout', true)\r\n], AwfWidgetLayout);\r\nexport { AwfWidgetLayout };\r\n//# sourceMappingURL=widget-layout.js.map","class IconService {\r\n    /**\r\n     * Load SVG icon.\r\n     *\r\n     * @param src Path to the icon in the form id@filepath\r\n     *            where file path is the path to the .svg file and id is the id of the svg (optional)\r\n     * @returns The icon definition containing the SVG and view box.\r\n     */\r\n    load(src) {\r\n        let url = src;\r\n        let name;\r\n        const i = src.indexOf('@');\r\n        if (i > -1) {\r\n            name = src.substring(0, i);\r\n            url = src.substring(i + 1);\r\n        }\r\n        return this.fetch(url, name);\r\n    }\r\n    /**\r\n     * Fetch SVG icon using the url or url + name.\r\n     *\r\n     * @param url URL of the SVG file to fetch\r\n     * @param name name of the icon to get if the SVG at url is a set of icon.\r\n     * @returns The icon definition containing the SVG and view box.\r\n     */\r\n    async fetch(url, name) {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n            return null;\r\n        }\r\n        const svgNode = await this.extractSVGNode(response);\r\n        let iconSvgNode = svgNode;\r\n        if (name && svgNode?.querySelector('symbol')) {\r\n            iconSvgNode = svgNode.querySelector(`symbol[id=${name}]`);\r\n        }\r\n        return this.toSVG2TSFile(iconSvgNode);\r\n    }\r\n    async extractSVGNode(response) {\r\n        const svgAsString = await response.text();\r\n        const parser = new DOMParser();\r\n        const svg = parser.parseFromString(svgAsString, 'application/xml');\r\n        return svg.querySelector('svg');\r\n    }\r\n    toSVG2TSFile(iconSvgNode) {\r\n        const [minx, miny, height, width] = iconSvgNode?.getAttribute('viewBox')?.split(' ') ?? ['0', '0', '0', '0'];\r\n        return {\r\n            viewBox: {\r\n                minx: Number.parseInt(minx),\r\n                miny: Number.parseInt(miny),\r\n                height: Number.parseInt(height),\r\n                width: Number.parseInt(width),\r\n            },\r\n            name: '',\r\n            svg: iconSvgNode?.innerHTML ?? '',\r\n            svgHash: '',\r\n        };\r\n    }\r\n}\r\nexport const iconService = new IconService();\r\n//# sourceMappingURL=icon.service.js.map","import { __decorate } from \"tslib\";\r\n/*\r\n * © Agilent Technologies, Inc. 2022-2023.\r\n *\r\n * Warning: Unauthorized reproduction or distribution of this program, or any portion of it,\r\n * is prohibited and will be prosecuted to the maximum extent under the law.\r\n *\r\n */\r\nimport { html, LitElement, svg } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport { unsafeSVG } from 'lit/directives/unsafe-svg.js';\r\nimport { assetsMap } from '../../../assets/assets';\r\nimport { customElement } from '../../common/decorators/awf-custom-element';\r\nimport { ICON_CSS_VARIABLES } from './icon.css-variables.styles';\r\nimport { iconService } from './icon.service';\r\nimport { ICON_STYLES } from './icon.styles';\r\nlet AwfIcon = class AwfIcon extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The name of the icon from a custom library (see url property).\r\n         *\r\n         * @deprecated since 6.0.0. Use raw property or new property if it was used with url.\r\n         */\r\n        this.name = '';\r\n        /**\r\n         * The URL to an .svg file. The .svg file can be:\r\n         * - an icon\r\n         * - an icon library. In that case, the name property is used to identify the icon to display from this library.\r\n         *\r\n         * @deprecated since 6.0.0. Use new property instead.\r\n         */\r\n        this.url = '';\r\n        this.iconSize = '24px';\r\n        this.fetchedSvg = null;\r\n    }\r\n    async willUpdate(_changedProperties) {\r\n        if (_changedProperties.has('url') || _changedProperties.has('name') || _changedProperties.has('src')) {\r\n            if (this.url || this.src) {\r\n                let fetchedSvg;\r\n                if (this.src) {\r\n                    fetchedSvg = await iconService.load(this.src);\r\n                }\r\n                else {\r\n                    fetchedSvg = await iconService.fetch(this.url, this.name);\r\n                }\r\n                this.fetchedSvg = fetchedSvg;\r\n                this.iconSize = `${fetchedSvg?.viewBox?.height}px`;\r\n                this.requestUpdate();\r\n            }\r\n            else {\r\n                this.fetchedSvg = null;\r\n                this.iconSize = `${assetsMap[this.name]?.viewBox?.height ?? '24'}px`;\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        const innerStyle = () => html `<style>\r\n            :host {\r\n                --awf-icon-calculated-size: var(--awf-icon-size, ${this.iconSize});\r\n            }\r\n        </style>`;\r\n        if (this.raw) {\r\n            const match = this.raw.matchAll(/viewBox=\"\\d+ \\d+ \\d+ (\\d+)\"/g);\r\n            const value = match.next().value;\r\n            this.iconSize = value ? `${value[1]}px` : '24px';\r\n            return html `${innerStyle()}${unsafeSVG(this.raw)}`;\r\n        }\r\n        if (this.fetchedSvg) {\r\n            return html `${innerStyle()}${this.renderSvg(this.fetchedSvg)}`;\r\n        }\r\n        if (this.name) {\r\n            return html `${innerStyle()}${this.renderSvg(assetsMap[this.name])}`;\r\n        }\r\n        const svgElement = this.querySelector('svg');\r\n        if (svgElement) {\r\n            const viewBox = svgElement.getAttribute('viewBox');\r\n            const split = viewBox?.split(' ');\r\n            this.iconSize = split?.length === 4 ? `${split[3]}px` : '24px';\r\n        }\r\n        return html `${innerStyle()}<slot></slot>`;\r\n    }\r\n    renderSvg(icon) {\r\n        if (!icon || icon.svg.indexOf('<svg') === -1) {\r\n            return html `<svg viewBox=${this.getViewBox(icon)}>${this.getSvgContent(icon)}</svg>`;\r\n        }\r\n        return this.getSvgContent(icon);\r\n    }\r\n    getSvgContent(asset) {\r\n        return svg `${unsafeSVG(asset?.svg)}`;\r\n    }\r\n    getViewBox(asset) {\r\n        return [asset?.viewBox?.minx ?? 0, asset?.viewBox?.miny ?? 0, asset?.viewBox?.width ?? 0, asset?.viewBox?.height ?? 0].join(' ');\r\n    }\r\n};\r\nAwfIcon.styles = [ICON_CSS_VARIABLES, ICON_STYLES];\r\n__decorate([\r\n    property({ reflect: true })\r\n], AwfIcon.prototype, \"name\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfIcon.prototype, \"url\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfIcon.prototype, \"raw\", void 0);\r\n__decorate([\r\n    property()\r\n], AwfIcon.prototype, \"src\", void 0);\r\nAwfIcon = __decorate([\r\n    customElement('awf-icon', true)\r\n], AwfIcon);\r\nexport { AwfIcon };\r\n//# sourceMappingURL=icon.js.map"],"names":[],"sourceRoot":""}